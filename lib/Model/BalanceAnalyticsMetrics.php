<?php
/**
 * BalanceAnalyticsMetrics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BalanceAnalyticsMetrics Class Doc Comment
 *
 * @category Class
 * @description Balance analytics metrics and calculations
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BalanceAnalyticsMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BalanceAnalyticsMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'available_balance' => 'float',
        'available_balance_date' => 'string',
        'average_daily_balance_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'average_daily_balance_for_the_report_time_period' => 'float',
        'average_weekday_balance_for_the_report_time_period' => 'float',
        'count_daily_negative_balances_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndCount[]',
        'current_running_balance' => 'float',
        'current_running_balance_date' => 'string',
        'daily_balances_by_weekday_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDailyBalance[]',
        'daily_balances_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDailyBalance[]',
        'historic_number_of_weeks_average_balance_increasing' => '\OpenAPI\Client\Model\ObbNumWeeksAverageBalanceIncreasing',
        'maximum_daily_balance_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'maximum_running_balance_for_the_report_time_period' => 'float',
        'minimum_daily_balance_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'minimum_running_balance_for_the_report_time_period' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'available_balance' => null,
        'available_balance_date' => null,
        'average_daily_balance_by_month_for_the_report_time_period' => null,
        'average_daily_balance_for_the_report_time_period' => null,
        'average_weekday_balance_for_the_report_time_period' => null,
        'count_daily_negative_balances_by_month_for_the_report_time_period' => null,
        'current_running_balance' => null,
        'current_running_balance_date' => null,
        'daily_balances_by_weekday_for_the_report_time_period' => null,
        'daily_balances_for_the_report_time_period' => null,
        'historic_number_of_weeks_average_balance_increasing' => null,
        'maximum_daily_balance_by_month_for_the_report_time_period' => null,
        'maximum_running_balance_for_the_report_time_period' => null,
        'minimum_daily_balance_by_month_for_the_report_time_period' => null,
        'minimum_running_balance_for_the_report_time_period' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'available_balance' => false,
        'available_balance_date' => false,
        'average_daily_balance_by_month_for_the_report_time_period' => false,
        'average_daily_balance_for_the_report_time_period' => false,
        'average_weekday_balance_for_the_report_time_period' => false,
        'count_daily_negative_balances_by_month_for_the_report_time_period' => false,
        'current_running_balance' => false,
        'current_running_balance_date' => false,
        'daily_balances_by_weekday_for_the_report_time_period' => false,
        'daily_balances_for_the_report_time_period' => false,
        'historic_number_of_weeks_average_balance_increasing' => false,
        'maximum_daily_balance_by_month_for_the_report_time_period' => false,
        'maximum_running_balance_for_the_report_time_period' => false,
        'minimum_daily_balance_by_month_for_the_report_time_period' => false,
        'minimum_running_balance_for_the_report_time_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_balance' => 'availableBalance',
        'available_balance_date' => 'availableBalanceDate',
        'average_daily_balance_by_month_for_the_report_time_period' => 'averageDailyBalanceByMonthForTheReportTimePeriod',
        'average_daily_balance_for_the_report_time_period' => 'averageDailyBalanceForTheReportTimePeriod',
        'average_weekday_balance_for_the_report_time_period' => 'averageWeekdayBalanceForTheReportTimePeriod',
        'count_daily_negative_balances_by_month_for_the_report_time_period' => 'countDailyNegativeBalancesByMonthForTheReportTimePeriod',
        'current_running_balance' => 'currentRunningBalance',
        'current_running_balance_date' => 'currentRunningBalanceDate',
        'daily_balances_by_weekday_for_the_report_time_period' => 'dailyBalancesByWeekdayForTheReportTimePeriod',
        'daily_balances_for_the_report_time_period' => 'dailyBalancesForTheReportTimePeriod',
        'historic_number_of_weeks_average_balance_increasing' => 'historicNumberOfWeeksAverageBalanceIncreasing',
        'maximum_daily_balance_by_month_for_the_report_time_period' => 'maximumDailyBalanceByMonthForTheReportTimePeriod',
        'maximum_running_balance_for_the_report_time_period' => 'maximumRunningBalanceForTheReportTimePeriod',
        'minimum_daily_balance_by_month_for_the_report_time_period' => 'minimumDailyBalanceByMonthForTheReportTimePeriod',
        'minimum_running_balance_for_the_report_time_period' => 'minimumRunningBalanceForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_balance' => 'setAvailableBalance',
        'available_balance_date' => 'setAvailableBalanceDate',
        'average_daily_balance_by_month_for_the_report_time_period' => 'setAverageDailyBalanceByMonthForTheReportTimePeriod',
        'average_daily_balance_for_the_report_time_period' => 'setAverageDailyBalanceForTheReportTimePeriod',
        'average_weekday_balance_for_the_report_time_period' => 'setAverageWeekdayBalanceForTheReportTimePeriod',
        'count_daily_negative_balances_by_month_for_the_report_time_period' => 'setCountDailyNegativeBalancesByMonthForTheReportTimePeriod',
        'current_running_balance' => 'setCurrentRunningBalance',
        'current_running_balance_date' => 'setCurrentRunningBalanceDate',
        'daily_balances_by_weekday_for_the_report_time_period' => 'setDailyBalancesByWeekdayForTheReportTimePeriod',
        'daily_balances_for_the_report_time_period' => 'setDailyBalancesForTheReportTimePeriod',
        'historic_number_of_weeks_average_balance_increasing' => 'setHistoricNumberOfWeeksAverageBalanceIncreasing',
        'maximum_daily_balance_by_month_for_the_report_time_period' => 'setMaximumDailyBalanceByMonthForTheReportTimePeriod',
        'maximum_running_balance_for_the_report_time_period' => 'setMaximumRunningBalanceForTheReportTimePeriod',
        'minimum_daily_balance_by_month_for_the_report_time_period' => 'setMinimumDailyBalanceByMonthForTheReportTimePeriod',
        'minimum_running_balance_for_the_report_time_period' => 'setMinimumRunningBalanceForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_balance' => 'getAvailableBalance',
        'available_balance_date' => 'getAvailableBalanceDate',
        'average_daily_balance_by_month_for_the_report_time_period' => 'getAverageDailyBalanceByMonthForTheReportTimePeriod',
        'average_daily_balance_for_the_report_time_period' => 'getAverageDailyBalanceForTheReportTimePeriod',
        'average_weekday_balance_for_the_report_time_period' => 'getAverageWeekdayBalanceForTheReportTimePeriod',
        'count_daily_negative_balances_by_month_for_the_report_time_period' => 'getCountDailyNegativeBalancesByMonthForTheReportTimePeriod',
        'current_running_balance' => 'getCurrentRunningBalance',
        'current_running_balance_date' => 'getCurrentRunningBalanceDate',
        'daily_balances_by_weekday_for_the_report_time_period' => 'getDailyBalancesByWeekdayForTheReportTimePeriod',
        'daily_balances_for_the_report_time_period' => 'getDailyBalancesForTheReportTimePeriod',
        'historic_number_of_weeks_average_balance_increasing' => 'getHistoricNumberOfWeeksAverageBalanceIncreasing',
        'maximum_daily_balance_by_month_for_the_report_time_period' => 'getMaximumDailyBalanceByMonthForTheReportTimePeriod',
        'maximum_running_balance_for_the_report_time_period' => 'getMaximumRunningBalanceForTheReportTimePeriod',
        'minimum_daily_balance_by_month_for_the_report_time_period' => 'getMinimumDailyBalanceByMonthForTheReportTimePeriod',
        'minimum_running_balance_for_the_report_time_period' => 'getMinimumRunningBalanceForTheReportTimePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('available_balance_date', $data ?? [], null);
        $this->setIfExists('average_daily_balance_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('average_daily_balance_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('average_weekday_balance_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('count_daily_negative_balances_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('current_running_balance', $data ?? [], null);
        $this->setIfExists('current_running_balance_date', $data ?? [], null);
        $this->setIfExists('daily_balances_by_weekday_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('daily_balances_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('historic_number_of_weeks_average_balance_increasing', $data ?? [], null);
        $this->setIfExists('maximum_daily_balance_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('maximum_running_balance_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('minimum_daily_balance_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('minimum_running_balance_for_the_report_time_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['available_balance_date']) && (mb_strlen($this->container['available_balance_date']) > 25)) {
            $invalidProperties[] = "invalid value for 'available_balance_date', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['available_balance_date']) && (mb_strlen($this->container['available_balance_date']) < 25)) {
            $invalidProperties[] = "invalid value for 'available_balance_date', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['current_running_balance_date']) && (mb_strlen($this->container['current_running_balance_date']) > 25)) {
            $invalidProperties[] = "invalid value for 'current_running_balance_date', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['current_running_balance_date']) && (mb_strlen($this->container['current_running_balance_date']) < 25)) {
            $invalidProperties[] = "invalid value for 'current_running_balance_date', the character length must be bigger than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance Available Balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets available_balance_date
     *
     * @return string|null
     */
    public function getAvailableBalanceDate()
    {
        return $this->container['available_balance_date'];
    }

    /**
     * Sets available_balance_date
     *
     * @param string|null $available_balance_date Available Balance date
     *
     * @return self
     */
    public function setAvailableBalanceDate($available_balance_date)
    {
        if (is_null($available_balance_date)) {
            throw new \InvalidArgumentException('non-nullable available_balance_date cannot be null');
        }
        if ((mb_strlen($available_balance_date) > 25)) {
            throw new \InvalidArgumentException('invalid length for $available_balance_date when calling BalanceAnalyticsMetrics., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($available_balance_date) < 25)) {
            throw new \InvalidArgumentException('invalid length for $available_balance_date when calling BalanceAnalyticsMetrics., must be bigger than or equal to 25.');
        }

        $this->container['available_balance_date'] = $available_balance_date;

        return $this;
    }

    /**
     * Gets average_daily_balance_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null
     */
    public function getAverageDailyBalanceByMonthForTheReportTimePeriod()
    {
        return $this->container['average_daily_balance_by_month_for_the_report_time_period'];
    }

    /**
     * Sets average_daily_balance_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null $average_daily_balance_by_month_for_the_report_time_period Average daily ending balance each month over the report time period
     *
     * @return self
     */
    public function setAverageDailyBalanceByMonthForTheReportTimePeriod($average_daily_balance_by_month_for_the_report_time_period)
    {
        if (is_null($average_daily_balance_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable average_daily_balance_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['average_daily_balance_by_month_for_the_report_time_period'] = $average_daily_balance_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets average_daily_balance_for_the_report_time_period
     *
     * @return float|null
     */
    public function getAverageDailyBalanceForTheReportTimePeriod()
    {
        return $this->container['average_daily_balance_for_the_report_time_period'];
    }

    /**
     * Sets average_daily_balance_for_the_report_time_period
     *
     * @param float|null $average_daily_balance_for_the_report_time_period Average Daily Balance
     *
     * @return self
     */
    public function setAverageDailyBalanceForTheReportTimePeriod($average_daily_balance_for_the_report_time_period)
    {
        if (is_null($average_daily_balance_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable average_daily_balance_for_the_report_time_period cannot be null');
        }
        $this->container['average_daily_balance_for_the_report_time_period'] = $average_daily_balance_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets average_weekday_balance_for_the_report_time_period
     *
     * @return float|null
     */
    public function getAverageWeekdayBalanceForTheReportTimePeriod()
    {
        return $this->container['average_weekday_balance_for_the_report_time_period'];
    }

    /**
     * Sets average_weekday_balance_for_the_report_time_period
     *
     * @param float|null $average_weekday_balance_for_the_report_time_period Average Weekday Balance
     *
     * @return self
     */
    public function setAverageWeekdayBalanceForTheReportTimePeriod($average_weekday_balance_for_the_report_time_period)
    {
        if (is_null($average_weekday_balance_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable average_weekday_balance_for_the_report_time_period cannot be null');
        }
        $this->container['average_weekday_balance_for_the_report_time_period'] = $average_weekday_balance_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets count_daily_negative_balances_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndCount[]|null
     */
    public function getCountDailyNegativeBalancesByMonthForTheReportTimePeriod()
    {
        return $this->container['count_daily_negative_balances_by_month_for_the_report_time_period'];
    }

    /**
     * Sets count_daily_negative_balances_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndCount[]|null $count_daily_negative_balances_by_month_for_the_report_time_period Number of negative daily ending balances each month over the report time period
     *
     * @return self
     */
    public function setCountDailyNegativeBalancesByMonthForTheReportTimePeriod($count_daily_negative_balances_by_month_for_the_report_time_period)
    {
        if (is_null($count_daily_negative_balances_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable count_daily_negative_balances_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['count_daily_negative_balances_by_month_for_the_report_time_period'] = $count_daily_negative_balances_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets current_running_balance
     *
     * @return float|null
     */
    public function getCurrentRunningBalance()
    {
        return $this->container['current_running_balance'];
    }

    /**
     * Sets current_running_balance
     *
     * @param float|null $current_running_balance Current Running Balance Date
     *
     * @return self
     */
    public function setCurrentRunningBalance($current_running_balance)
    {
        if (is_null($current_running_balance)) {
            throw new \InvalidArgumentException('non-nullable current_running_balance cannot be null');
        }
        $this->container['current_running_balance'] = $current_running_balance;

        return $this;
    }

    /**
     * Gets current_running_balance_date
     *
     * @return string|null
     */
    public function getCurrentRunningBalanceDate()
    {
        return $this->container['current_running_balance_date'];
    }

    /**
     * Sets current_running_balance_date
     *
     * @param string|null $current_running_balance_date Current Running Balance date
     *
     * @return self
     */
    public function setCurrentRunningBalanceDate($current_running_balance_date)
    {
        if (is_null($current_running_balance_date)) {
            throw new \InvalidArgumentException('non-nullable current_running_balance_date cannot be null');
        }
        if ((mb_strlen($current_running_balance_date) > 25)) {
            throw new \InvalidArgumentException('invalid length for $current_running_balance_date when calling BalanceAnalyticsMetrics., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($current_running_balance_date) < 25)) {
            throw new \InvalidArgumentException('invalid length for $current_running_balance_date when calling BalanceAnalyticsMetrics., must be bigger than or equal to 25.');
        }

        $this->container['current_running_balance_date'] = $current_running_balance_date;

        return $this;
    }

    /**
     * Gets daily_balances_by_weekday_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDailyBalance[]|null
     */
    public function getDailyBalancesByWeekdayForTheReportTimePeriod()
    {
        return $this->container['daily_balances_by_weekday_for_the_report_time_period'];
    }

    /**
     * Sets daily_balances_by_weekday_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDailyBalance[]|null $daily_balances_by_weekday_for_the_report_time_period Daily balance of the account during weekdays over the length of the report
     *
     * @return self
     */
    public function setDailyBalancesByWeekdayForTheReportTimePeriod($daily_balances_by_weekday_for_the_report_time_period)
    {
        if (is_null($daily_balances_by_weekday_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable daily_balances_by_weekday_for_the_report_time_period cannot be null');
        }
        $this->container['daily_balances_by_weekday_for_the_report_time_period'] = $daily_balances_by_weekday_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets daily_balances_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDailyBalance[]|null
     */
    public function getDailyBalancesForTheReportTimePeriod()
    {
        return $this->container['daily_balances_for_the_report_time_period'];
    }

    /**
     * Sets daily_balances_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDailyBalance[]|null $daily_balances_for_the_report_time_period Daily balance of the account over the length of the report
     *
     * @return self
     */
    public function setDailyBalancesForTheReportTimePeriod($daily_balances_for_the_report_time_period)
    {
        if (is_null($daily_balances_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable daily_balances_for_the_report_time_period cannot be null');
        }
        $this->container['daily_balances_for_the_report_time_period'] = $daily_balances_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets historic_number_of_weeks_average_balance_increasing
     *
     * @return \OpenAPI\Client\Model\ObbNumWeeksAverageBalanceIncreasing|null
     */
    public function getHistoricNumberOfWeeksAverageBalanceIncreasing()
    {
        return $this->container['historic_number_of_weeks_average_balance_increasing'];
    }

    /**
     * Sets historic_number_of_weeks_average_balance_increasing
     *
     * @param \OpenAPI\Client\Model\ObbNumWeeksAverageBalanceIncreasing|null $historic_number_of_weeks_average_balance_increasing historic_number_of_weeks_average_balance_increasing
     *
     * @return self
     */
    public function setHistoricNumberOfWeeksAverageBalanceIncreasing($historic_number_of_weeks_average_balance_increasing)
    {
        if (is_null($historic_number_of_weeks_average_balance_increasing)) {
            throw new \InvalidArgumentException('non-nullable historic_number_of_weeks_average_balance_increasing cannot be null');
        }
        $this->container['historic_number_of_weeks_average_balance_increasing'] = $historic_number_of_weeks_average_balance_increasing;

        return $this;
    }

    /**
     * Gets maximum_daily_balance_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null
     */
    public function getMaximumDailyBalanceByMonthForTheReportTimePeriod()
    {
        return $this->container['maximum_daily_balance_by_month_for_the_report_time_period'];
    }

    /**
     * Sets maximum_daily_balance_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null $maximum_daily_balance_by_month_for_the_report_time_period Maximum daily ending balance each month over the report time period
     *
     * @return self
     */
    public function setMaximumDailyBalanceByMonthForTheReportTimePeriod($maximum_daily_balance_by_month_for_the_report_time_period)
    {
        if (is_null($maximum_daily_balance_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable maximum_daily_balance_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['maximum_daily_balance_by_month_for_the_report_time_period'] = $maximum_daily_balance_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets maximum_running_balance_for_the_report_time_period
     *
     * @return float|null
     */
    public function getMaximumRunningBalanceForTheReportTimePeriod()
    {
        return $this->container['maximum_running_balance_for_the_report_time_period'];
    }

    /**
     * Sets maximum_running_balance_for_the_report_time_period
     *
     * @param float|null $maximum_running_balance_for_the_report_time_period Maximum Running Balance
     *
     * @return self
     */
    public function setMaximumRunningBalanceForTheReportTimePeriod($maximum_running_balance_for_the_report_time_period)
    {
        if (is_null($maximum_running_balance_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable maximum_running_balance_for_the_report_time_period cannot be null');
        }
        $this->container['maximum_running_balance_for_the_report_time_period'] = $maximum_running_balance_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets minimum_daily_balance_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null
     */
    public function getMinimumDailyBalanceByMonthForTheReportTimePeriod()
    {
        return $this->container['minimum_daily_balance_by_month_for_the_report_time_period'];
    }

    /**
     * Sets minimum_daily_balance_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null $minimum_daily_balance_by_month_for_the_report_time_period Minimum daily ending balance each month over the report time period
     *
     * @return self
     */
    public function setMinimumDailyBalanceByMonthForTheReportTimePeriod($minimum_daily_balance_by_month_for_the_report_time_period)
    {
        if (is_null($minimum_daily_balance_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable minimum_daily_balance_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['minimum_daily_balance_by_month_for_the_report_time_period'] = $minimum_daily_balance_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets minimum_running_balance_for_the_report_time_period
     *
     * @return float|null
     */
    public function getMinimumRunningBalanceForTheReportTimePeriod()
    {
        return $this->container['minimum_running_balance_for_the_report_time_period'];
    }

    /**
     * Sets minimum_running_balance_for_the_report_time_period
     *
     * @param float|null $minimum_running_balance_for_the_report_time_period Minimum Running Balance
     *
     * @return self
     */
    public function setMinimumRunningBalanceForTheReportTimePeriod($minimum_running_balance_for_the_report_time_period)
    {
        if (is_null($minimum_running_balance_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable minimum_running_balance_for_the_report_time_period cannot be null');
        }
        $this->container['minimum_running_balance_for_the_report_time_period'] = $minimum_running_balance_for_the_report_time_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


