<?php
/**
 * Application
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Application Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Application implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Application';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_description' => 'string',
        'app_name' => 'string',
        'app_url' => 'string',
        'owner_address_line1' => 'string',
        'owner_address_line2' => 'string',
        'owner_city' => 'string',
        'owner_country' => 'string',
        'owner_name' => 'string',
        'owner_postal_code' => 'string',
        'owner_state' => 'string',
        'image' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_description' => null,
        'app_name' => null,
        'app_url' => null,
        'owner_address_line1' => null,
        'owner_address_line2' => null,
        'owner_city' => null,
        'owner_country' => null,
        'owner_name' => null,
        'owner_postal_code' => null,
        'owner_state' => null,
        'image' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_description' => false,
        'app_name' => false,
        'app_url' => false,
        'owner_address_line1' => false,
        'owner_address_line2' => false,
        'owner_city' => false,
        'owner_country' => false,
        'owner_name' => false,
        'owner_postal_code' => false,
        'owner_state' => false,
        'image' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_description' => 'appDescription',
        'app_name' => 'appName',
        'app_url' => 'appUrl',
        'owner_address_line1' => 'ownerAddressLine1',
        'owner_address_line2' => 'ownerAddressLine2',
        'owner_city' => 'ownerCity',
        'owner_country' => 'ownerCountry',
        'owner_name' => 'ownerName',
        'owner_postal_code' => 'ownerPostalCode',
        'owner_state' => 'ownerState',
        'image' => 'image'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_description' => 'setAppDescription',
        'app_name' => 'setAppName',
        'app_url' => 'setAppUrl',
        'owner_address_line1' => 'setOwnerAddressLine1',
        'owner_address_line2' => 'setOwnerAddressLine2',
        'owner_city' => 'setOwnerCity',
        'owner_country' => 'setOwnerCountry',
        'owner_name' => 'setOwnerName',
        'owner_postal_code' => 'setOwnerPostalCode',
        'owner_state' => 'setOwnerState',
        'image' => 'setImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_description' => 'getAppDescription',
        'app_name' => 'getAppName',
        'app_url' => 'getAppUrl',
        'owner_address_line1' => 'getOwnerAddressLine1',
        'owner_address_line2' => 'getOwnerAddressLine2',
        'owner_city' => 'getOwnerCity',
        'owner_country' => 'getOwnerCountry',
        'owner_name' => 'getOwnerName',
        'owner_postal_code' => 'getOwnerPostalCode',
        'owner_state' => 'getOwnerState',
        'image' => 'getImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_description', $data ?? [], null);
        $this->setIfExists('app_name', $data ?? [], null);
        $this->setIfExists('app_url', $data ?? [], null);
        $this->setIfExists('owner_address_line1', $data ?? [], null);
        $this->setIfExists('owner_address_line2', $data ?? [], null);
        $this->setIfExists('owner_city', $data ?? [], null);
        $this->setIfExists('owner_country', $data ?? [], null);
        $this->setIfExists('owner_name', $data ?? [], null);
        $this->setIfExists('owner_postal_code', $data ?? [], null);
        $this->setIfExists('owner_state', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_description'] === null) {
            $invalidProperties[] = "'app_description' can't be null";
        }
        if ($this->container['app_name'] === null) {
            $invalidProperties[] = "'app_name' can't be null";
        }
        if ($this->container['app_url'] === null) {
            $invalidProperties[] = "'app_url' can't be null";
        }
        if ($this->container['owner_address_line1'] === null) {
            $invalidProperties[] = "'owner_address_line1' can't be null";
        }
        if ($this->container['owner_address_line2'] === null) {
            $invalidProperties[] = "'owner_address_line2' can't be null";
        }
        if ($this->container['owner_city'] === null) {
            $invalidProperties[] = "'owner_city' can't be null";
        }
        if ($this->container['owner_country'] === null) {
            $invalidProperties[] = "'owner_country' can't be null";
        }
        if ($this->container['owner_name'] === null) {
            $invalidProperties[] = "'owner_name' can't be null";
        }
        if ($this->container['owner_postal_code'] === null) {
            $invalidProperties[] = "'owner_postal_code' can't be null";
        }
        if ($this->container['owner_state'] === null) {
            $invalidProperties[] = "'owner_state' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_description
     *
     * @return string
     */
    public function getAppDescription()
    {
        return $this->container['app_description'];
    }

    /**
     * Sets app_description
     *
     * @param string $app_description A short description of the app. This will be visible to end users in the FI interface.
     *
     * @return self
     */
    public function setAppDescription($app_description)
    {
        if (is_null($app_description)) {
            throw new \InvalidArgumentException('non-nullable app_description cannot be null');
        }
        $this->container['app_description'] = $app_description;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name The name of the application assigned to the customer
     *
     * @return self
     */
    public function setAppName($app_name)
    {
        if (is_null($app_name)) {
            throw new \InvalidArgumentException('non-nullable app_name cannot be null');
        }
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_url
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['app_url'];
    }

    /**
     * Sets app_url
     *
     * @param string $app_url An URL for the app. This will be visible to end users in the FI interface.
     *
     * @return self
     */
    public function setAppUrl($app_url)
    {
        if (is_null($app_url)) {
            throw new \InvalidArgumentException('non-nullable app_url cannot be null');
        }
        $this->container['app_url'] = $app_url;

        return $this;
    }

    /**
     * Gets owner_address_line1
     *
     * @return string
     */
    public function getOwnerAddressLine1()
    {
        return $this->container['owner_address_line1'];
    }

    /**
     * Sets owner_address_line1
     *
     * @param string $owner_address_line1 Address line 1
     *
     * @return self
     */
    public function setOwnerAddressLine1($owner_address_line1)
    {
        if (is_null($owner_address_line1)) {
            throw new \InvalidArgumentException('non-nullable owner_address_line1 cannot be null');
        }
        $this->container['owner_address_line1'] = $owner_address_line1;

        return $this;
    }

    /**
     * Gets owner_address_line2
     *
     * @return string
     */
    public function getOwnerAddressLine2()
    {
        return $this->container['owner_address_line2'];
    }

    /**
     * Sets owner_address_line2
     *
     * @param string $owner_address_line2 Address line 2
     *
     * @return self
     */
    public function setOwnerAddressLine2($owner_address_line2)
    {
        if (is_null($owner_address_line2)) {
            throw new \InvalidArgumentException('non-nullable owner_address_line2 cannot be null');
        }
        $this->container['owner_address_line2'] = $owner_address_line2;

        return $this;
    }

    /**
     * Gets owner_city
     *
     * @return string
     */
    public function getOwnerCity()
    {
        return $this->container['owner_city'];
    }

    /**
     * Sets owner_city
     *
     * @param string $owner_city City for the business entity that owns the app. Information for registration purposes only and not given to the end user.
     *
     * @return self
     */
    public function setOwnerCity($owner_city)
    {
        if (is_null($owner_city)) {
            throw new \InvalidArgumentException('non-nullable owner_city cannot be null');
        }
        $this->container['owner_city'] = $owner_city;

        return $this;
    }

    /**
     * Gets owner_country
     *
     * @return string
     */
    public function getOwnerCountry()
    {
        return $this->container['owner_country'];
    }

    /**
     * Sets owner_country
     *
     * @param string $owner_country Country for the  business entity that owns the app. Information for registration purposes only and not given to the end user.
     *
     * @return self
     */
    public function setOwnerCountry($owner_country)
    {
        if (is_null($owner_country)) {
            throw new \InvalidArgumentException('non-nullable owner_country cannot be null');
        }
        $this->container['owner_country'] = $owner_country;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string $owner_name Business name for the business entity that owns the app. Information for registration purposes only and not given to the end user.
     *
     * @return self
     */
    public function setOwnerName($owner_name)
    {
        if (is_null($owner_name)) {
            throw new \InvalidArgumentException('non-nullable owner_name cannot be null');
        }
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets owner_postal_code
     *
     * @return string
     */
    public function getOwnerPostalCode()
    {
        return $this->container['owner_postal_code'];
    }

    /**
     * Sets owner_postal_code
     *
     * @param string $owner_postal_code Zip code for the business entity that owns the app. Information for registration purposes only and not given to the end user.
     *
     * @return self
     */
    public function setOwnerPostalCode($owner_postal_code)
    {
        if (is_null($owner_postal_code)) {
            throw new \InvalidArgumentException('non-nullable owner_postal_code cannot be null');
        }
        $this->container['owner_postal_code'] = $owner_postal_code;

        return $this;
    }

    /**
     * Gets owner_state
     *
     * @return string
     */
    public function getOwnerState()
    {
        return $this->container['owner_state'];
    }

    /**
     * Sets owner_state
     *
     * @param string $owner_state State for the business entity that owns the app. Information for registration purposes only and not given to the end user.
     *
     * @return self
     */
    public function setOwnerState($owner_state)
    {
        if (is_null($owner_state)) {
            throw new \InvalidArgumentException('non-nullable owner_state cannot be null');
        }
        $this->container['owner_state'] = $owner_state;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image An app logo passed as a Base64 encoded image (1:1 SVG file, must be less than 50KB)
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


