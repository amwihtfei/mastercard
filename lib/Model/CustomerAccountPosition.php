<?php
/**
 * CustomerAccountPosition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerAccountPosition Class Doc Comment
 *
 * @category Class
 * @description Details for investment account holdings
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerAccountPosition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerAccountPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'symbol' => 'string',
        'units' => 'float',
        'current_price' => 'float',
        'security_name' => 'string',
        'transaction_type' => 'string',
        'market_value' => 'float',
        'change_percent' => 'float',
        'daily_change' => 'float',
        'cost_basis' => 'float',
        'hold_type' => 'string',
        'inv_security_type' => 'string',
        'status' => 'string',
        'current_price_date' => 'int',
        'security_type' => 'string',
        'mf_type' => 'string',
        'pos_type' => 'string',
        'total_gl_dollar' => 'float',
        'total_gl_percent' => 'float',
        'option_strike_price' => 'float',
        'option_type' => 'string',
        'option_shares_per_contract' => 'float',
        'option_expire_date' => '\DateTime',
        'fi_asset_class' => 'string',
        'asset_class' => 'string',
        'currency_rate' => 'float',
        'security_id' => 'string',
        'security_id_type' => 'string',
        'cost_basis_per_share' => 'float',
        'sub_account_type' => 'string',
        'security_currency' => 'string',
        'today_gl_dollar' => 'float',
        'today_gl_percent' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'description' => null,
        'symbol' => null,
        'units' => null,
        'current_price' => null,
        'security_name' => null,
        'transaction_type' => null,
        'market_value' => null,
        'change_percent' => null,
        'daily_change' => null,
        'cost_basis' => null,
        'hold_type' => null,
        'inv_security_type' => null,
        'status' => null,
        'current_price_date' => 'int64',
        'security_type' => null,
        'mf_type' => null,
        'pos_type' => null,
        'total_gl_dollar' => null,
        'total_gl_percent' => null,
        'option_strike_price' => null,
        'option_type' => null,
        'option_shares_per_contract' => null,
        'option_expire_date' => 'date',
        'fi_asset_class' => null,
        'asset_class' => null,
        'currency_rate' => null,
        'security_id' => null,
        'security_id_type' => null,
        'cost_basis_per_share' => null,
        'sub_account_type' => null,
        'security_currency' => null,
        'today_gl_dollar' => null,
        'today_gl_percent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'description' => false,
        'symbol' => false,
        'units' => false,
        'current_price' => false,
        'security_name' => false,
        'transaction_type' => false,
        'market_value' => false,
        'change_percent' => false,
        'daily_change' => false,
        'cost_basis' => false,
        'hold_type' => false,
        'inv_security_type' => false,
        'status' => false,
        'current_price_date' => false,
        'security_type' => false,
        'mf_type' => false,
        'pos_type' => false,
        'total_gl_dollar' => false,
        'total_gl_percent' => false,
        'option_strike_price' => false,
        'option_type' => false,
        'option_shares_per_contract' => false,
        'option_expire_date' => false,
        'fi_asset_class' => false,
        'asset_class' => false,
        'currency_rate' => false,
        'security_id' => false,
        'security_id_type' => false,
        'cost_basis_per_share' => false,
        'sub_account_type' => false,
        'security_currency' => false,
        'today_gl_dollar' => false,
        'today_gl_percent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'symbol' => 'symbol',
        'units' => 'units',
        'current_price' => 'currentPrice',
        'security_name' => 'securityName',
        'transaction_type' => 'transactionType',
        'market_value' => 'marketValue',
        'change_percent' => 'changePercent',
        'daily_change' => 'dailyChange',
        'cost_basis' => 'costBasis',
        'hold_type' => 'holdType',
        'inv_security_type' => 'invSecurityType',
        'status' => 'status',
        'current_price_date' => 'currentPriceDate',
        'security_type' => 'securityType',
        'mf_type' => 'mfType',
        'pos_type' => 'posType',
        'total_gl_dollar' => 'totalGLDollar',
        'total_gl_percent' => 'totalGLPercent',
        'option_strike_price' => 'optionStrikePrice',
        'option_type' => 'optionType',
        'option_shares_per_contract' => 'optionSharesPerContract',
        'option_expire_date' => 'optionExpireDate',
        'fi_asset_class' => 'fiAssetClass',
        'asset_class' => 'assetClass',
        'currency_rate' => 'currencyRate',
        'security_id' => 'securityId',
        'security_id_type' => 'securityIdType',
        'cost_basis_per_share' => 'costBasisPerShare',
        'sub_account_type' => 'subAccountType',
        'security_currency' => 'securityCurrency',
        'today_gl_dollar' => 'todayGLDollar',
        'today_gl_percent' => 'todayGLPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'symbol' => 'setSymbol',
        'units' => 'setUnits',
        'current_price' => 'setCurrentPrice',
        'security_name' => 'setSecurityName',
        'transaction_type' => 'setTransactionType',
        'market_value' => 'setMarketValue',
        'change_percent' => 'setChangePercent',
        'daily_change' => 'setDailyChange',
        'cost_basis' => 'setCostBasis',
        'hold_type' => 'setHoldType',
        'inv_security_type' => 'setInvSecurityType',
        'status' => 'setStatus',
        'current_price_date' => 'setCurrentPriceDate',
        'security_type' => 'setSecurityType',
        'mf_type' => 'setMfType',
        'pos_type' => 'setPosType',
        'total_gl_dollar' => 'setTotalGlDollar',
        'total_gl_percent' => 'setTotalGlPercent',
        'option_strike_price' => 'setOptionStrikePrice',
        'option_type' => 'setOptionType',
        'option_shares_per_contract' => 'setOptionSharesPerContract',
        'option_expire_date' => 'setOptionExpireDate',
        'fi_asset_class' => 'setFiAssetClass',
        'asset_class' => 'setAssetClass',
        'currency_rate' => 'setCurrencyRate',
        'security_id' => 'setSecurityId',
        'security_id_type' => 'setSecurityIdType',
        'cost_basis_per_share' => 'setCostBasisPerShare',
        'sub_account_type' => 'setSubAccountType',
        'security_currency' => 'setSecurityCurrency',
        'today_gl_dollar' => 'setTodayGlDollar',
        'today_gl_percent' => 'setTodayGlPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'symbol' => 'getSymbol',
        'units' => 'getUnits',
        'current_price' => 'getCurrentPrice',
        'security_name' => 'getSecurityName',
        'transaction_type' => 'getTransactionType',
        'market_value' => 'getMarketValue',
        'change_percent' => 'getChangePercent',
        'daily_change' => 'getDailyChange',
        'cost_basis' => 'getCostBasis',
        'hold_type' => 'getHoldType',
        'inv_security_type' => 'getInvSecurityType',
        'status' => 'getStatus',
        'current_price_date' => 'getCurrentPriceDate',
        'security_type' => 'getSecurityType',
        'mf_type' => 'getMfType',
        'pos_type' => 'getPosType',
        'total_gl_dollar' => 'getTotalGlDollar',
        'total_gl_percent' => 'getTotalGlPercent',
        'option_strike_price' => 'getOptionStrikePrice',
        'option_type' => 'getOptionType',
        'option_shares_per_contract' => 'getOptionSharesPerContract',
        'option_expire_date' => 'getOptionExpireDate',
        'fi_asset_class' => 'getFiAssetClass',
        'asset_class' => 'getAssetClass',
        'currency_rate' => 'getCurrencyRate',
        'security_id' => 'getSecurityId',
        'security_id_type' => 'getSecurityIdType',
        'cost_basis_per_share' => 'getCostBasisPerShare',
        'sub_account_type' => 'getSubAccountType',
        'security_currency' => 'getSecurityCurrency',
        'today_gl_dollar' => 'getTodayGlDollar',
        'today_gl_percent' => 'getTodayGlPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('current_price', $data ?? [], null);
        $this->setIfExists('security_name', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('market_value', $data ?? [], null);
        $this->setIfExists('change_percent', $data ?? [], null);
        $this->setIfExists('daily_change', $data ?? [], null);
        $this->setIfExists('cost_basis', $data ?? [], null);
        $this->setIfExists('hold_type', $data ?? [], null);
        $this->setIfExists('inv_security_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('current_price_date', $data ?? [], null);
        $this->setIfExists('security_type', $data ?? [], null);
        $this->setIfExists('mf_type', $data ?? [], null);
        $this->setIfExists('pos_type', $data ?? [], null);
        $this->setIfExists('total_gl_dollar', $data ?? [], null);
        $this->setIfExists('total_gl_percent', $data ?? [], null);
        $this->setIfExists('option_strike_price', $data ?? [], null);
        $this->setIfExists('option_type', $data ?? [], null);
        $this->setIfExists('option_shares_per_contract', $data ?? [], null);
        $this->setIfExists('option_expire_date', $data ?? [], null);
        $this->setIfExists('fi_asset_class', $data ?? [], null);
        $this->setIfExists('asset_class', $data ?? [], null);
        $this->setIfExists('currency_rate', $data ?? [], null);
        $this->setIfExists('security_id', $data ?? [], null);
        $this->setIfExists('security_id_type', $data ?? [], null);
        $this->setIfExists('cost_basis_per_share', $data ?? [], null);
        $this->setIfExists('sub_account_type', $data ?? [], null);
        $this->setIfExists('security_currency', $data ?? [], null);
        $this->setIfExists('today_gl_dollar', $data ?? [], null);
        $this->setIfExists('today_gl_percent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the investment position
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the holding
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The investment position's market ticker symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units The number of units of the holding
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return float|null
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param float|null $current_price The current price of the investment holding
     *
     * @return self
     */
    public function setCurrentPrice($current_price)
    {
        if (is_null($current_price)) {
            throw new \InvalidArgumentException('non-nullable current_price cannot be null');
        }
        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets security_name
     *
     * @return string|null
     */
    public function getSecurityName()
    {
        return $this->container['security_name'];
    }

    /**
     * Sets security_name
     *
     * @param string|null $security_name The security name for the investment holding
     *
     * @return self
     */
    public function setSecurityName($security_name)
    {
        if (is_null($security_name)) {
            throw new \InvalidArgumentException('non-nullable security_name cannot be null');
        }
        $this->container['security_name'] = $security_name;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type The transaction type of the holding, such as cash, margin, and more
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets market_value
     *
     * @return float|null
     */
    public function getMarketValue()
    {
        return $this->container['market_value'];
    }

    /**
     * Sets market_value
     *
     * @param float|null $market_value Market value of an investment position at the time of retrieval
     *
     * @return self
     */
    public function setMarketValue($market_value)
    {
        if (is_null($market_value)) {
            throw new \InvalidArgumentException('non-nullable market_value cannot be null');
        }
        $this->container['market_value'] = $market_value;

        return $this;
    }

    /**
     * Gets change_percent
     *
     * @return float|null
     */
    public function getChangePercent()
    {
        return $this->container['change_percent'];
    }

    /**
     * Sets change_percent
     *
     * @param float|null $change_percent The percent change in value since the previous day
     *
     * @return self
     */
    public function setChangePercent($change_percent)
    {
        if (is_null($change_percent)) {
            throw new \InvalidArgumentException('non-nullable change_percent cannot be null');
        }
        $this->container['change_percent'] = $change_percent;

        return $this;
    }

    /**
     * Gets daily_change
     *
     * @return float|null
     */
    public function getDailyChange()
    {
        return $this->container['daily_change'];
    }

    /**
     * Sets daily_change
     *
     * @param float|null $daily_change The value amount change since the previous day
     *
     * @return self
     */
    public function setDailyChange($daily_change)
    {
        if (is_null($daily_change)) {
            throw new \InvalidArgumentException('non-nullable daily_change cannot be null');
        }
        $this->container['daily_change'] = $daily_change;

        return $this;
    }

    /**
     * Gets cost_basis
     *
     * @return float|null
     */
    public function getCostBasis()
    {
        return $this->container['cost_basis'];
    }

    /**
     * Sets cost_basis
     *
     * @param float|null $cost_basis The total cost of acquiring the security
     *
     * @return self
     */
    public function setCostBasis($cost_basis)
    {
        if (is_null($cost_basis)) {
            throw new \InvalidArgumentException('non-nullable cost_basis cannot be null');
        }
        $this->container['cost_basis'] = $cost_basis;

        return $this;
    }

    /**
     * Gets hold_type
     *
     * @return string|null
     */
    public function getHoldType()
    {
        return $this->container['hold_type'];
    }

    /**
     * Sets hold_type
     *
     * @param string|null $hold_type The type of the holding
     *
     * @return self
     */
    public function setHoldType($hold_type)
    {
        if (is_null($hold_type)) {
            throw new \InvalidArgumentException('non-nullable hold_type cannot be null');
        }
        $this->container['hold_type'] = $hold_type;

        return $this;
    }

    /**
     * Gets inv_security_type
     *
     * @return string|null
     */
    public function getInvSecurityType()
    {
        return $this->container['inv_security_type'];
    }

    /**
     * Sets inv_security_type
     *
     * @param string|null $inv_security_type The security type for the investment holding
     *
     * @return self
     */
    public function setInvSecurityType($inv_security_type)
    {
        if (is_null($inv_security_type)) {
            throw new \InvalidArgumentException('non-nullable inv_security_type cannot be null');
        }
        $this->container['inv_security_type'] = $inv_security_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the holding
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets current_price_date
     *
     * @return int|null
     */
    public function getCurrentPriceDate()
    {
        return $this->container['current_price_date'];
    }

    /**
     * Sets current_price_date
     *
     * @param int|null $current_price_date A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setCurrentPriceDate($current_price_date)
    {
        if (is_null($current_price_date)) {
            throw new \InvalidArgumentException('non-nullable current_price_date cannot be null');
        }
        $this->container['current_price_date'] = $current_price_date;

        return $this;
    }

    /**
     * Gets security_type
     *
     * @return string|null
     */
    public function getSecurityType()
    {
        return $this->container['security_type'];
    }

    /**
     * Sets security_type
     *
     * @param string|null $security_type Type of security for the investment position
     *
     * @return self
     */
    public function setSecurityType($security_type)
    {
        if (is_null($security_type)) {
            throw new \InvalidArgumentException('non-nullable security_type cannot be null');
        }
        $this->container['security_type'] = $security_type;

        return $this;
    }

    /**
     * Gets mf_type
     *
     * @return string|null
     */
    public function getMfType()
    {
        return $this->container['mf_type'];
    }

    /**
     * Sets mf_type
     *
     * @param string|null $mf_type Type of mutual fund, such as open ended
     *
     * @return self
     */
    public function setMfType($mf_type)
    {
        if (is_null($mf_type)) {
            throw new \InvalidArgumentException('non-nullable mf_type cannot be null');
        }
        $this->container['mf_type'] = $mf_type;

        return $this;
    }

    /**
     * Gets pos_type
     *
     * @return string|null
     */
    public function getPosType()
    {
        return $this->container['pos_type'];
    }

    /**
     * Sets pos_type
     *
     * @param string|null $pos_type Fund type assigned by the FI (long or short)
     *
     * @return self
     */
    public function setPosType($pos_type)
    {
        if (is_null($pos_type)) {
            throw new \InvalidArgumentException('non-nullable pos_type cannot be null');
        }
        $this->container['pos_type'] = $pos_type;

        return $this;
    }

    /**
     * Gets total_gl_dollar
     *
     * @return float|null
     */
    public function getTotalGlDollar()
    {
        return $this->container['total_gl_dollar'];
    }

    /**
     * Sets total_gl_dollar
     *
     * @param float|null $total_gl_dollar Total gain and loss of the position at the time of aggregation in dollars
     *
     * @return self
     */
    public function setTotalGlDollar($total_gl_dollar)
    {
        if (is_null($total_gl_dollar)) {
            throw new \InvalidArgumentException('non-nullable total_gl_dollar cannot be null');
        }
        $this->container['total_gl_dollar'] = $total_gl_dollar;

        return $this;
    }

    /**
     * Gets total_gl_percent
     *
     * @return float|null
     */
    public function getTotalGlPercent()
    {
        return $this->container['total_gl_percent'];
    }

    /**
     * Sets total_gl_percent
     *
     * @param float|null $total_gl_percent Total gain and loss of the position at the time of aggregation in percentage
     *
     * @return self
     */
    public function setTotalGlPercent($total_gl_percent)
    {
        if (is_null($total_gl_percent)) {
            throw new \InvalidArgumentException('non-nullable total_gl_percent cannot be null');
        }
        $this->container['total_gl_percent'] = $total_gl_percent;

        return $this;
    }

    /**
     * Gets option_strike_price
     *
     * @return float|null
     */
    public function getOptionStrikePrice()
    {
        return $this->container['option_strike_price'];
    }

    /**
     * Sets option_strike_price
     *
     * @param float|null $option_strike_price The strike price of the option contract
     *
     * @return self
     */
    public function setOptionStrikePrice($option_strike_price)
    {
        if (is_null($option_strike_price)) {
            throw new \InvalidArgumentException('non-nullable option_strike_price cannot be null');
        }
        $this->container['option_strike_price'] = $option_strike_price;

        return $this;
    }

    /**
     * Gets option_type
     *
     * @return string|null
     */
    public function getOptionType()
    {
        return $this->container['option_type'];
    }

    /**
     * Sets option_type
     *
     * @param string|null $option_type The type of option contract (PUT or CALL)
     *
     * @return self
     */
    public function setOptionType($option_type)
    {
        if (is_null($option_type)) {
            throw new \InvalidArgumentException('non-nullable option_type cannot be null');
        }
        $this->container['option_type'] = $option_type;

        return $this;
    }

    /**
     * Gets option_shares_per_contract
     *
     * @return float|null
     */
    public function getOptionSharesPerContract()
    {
        return $this->container['option_shares_per_contract'];
    }

    /**
     * Sets option_shares_per_contract
     *
     * @param float|null $option_shares_per_contract The number of shares per option contract
     *
     * @return self
     */
    public function setOptionSharesPerContract($option_shares_per_contract)
    {
        if (is_null($option_shares_per_contract)) {
            throw new \InvalidArgumentException('non-nullable option_shares_per_contract cannot be null');
        }
        $this->container['option_shares_per_contract'] = $option_shares_per_contract;

        return $this;
    }

    /**
     * Gets option_expire_date
     *
     * @return \DateTime|null
     */
    public function getOptionExpireDate()
    {
        return $this->container['option_expire_date'];
    }

    /**
     * Sets option_expire_date
     *
     * @param \DateTime|null $option_expire_date Expiration date of option
     *
     * @return self
     */
    public function setOptionExpireDate($option_expire_date)
    {
        if (is_null($option_expire_date)) {
            throw new \InvalidArgumentException('non-nullable option_expire_date cannot be null');
        }
        $this->container['option_expire_date'] = $option_expire_date;

        return $this;
    }

    /**
     * Gets fi_asset_class
     *
     * @return string|null
     */
    public function getFiAssetClass()
    {
        return $this->container['fi_asset_class'];
    }

    /**
     * Sets fi_asset_class
     *
     * @param string|null $fi_asset_class Financial Institution (FI) defined asset class (COMMON STOCK, COMNEQTY, EQUITY/STOCK, CMA-ISA, CONVERTIBLE PREFERREDS, CORPORATE BONDS, OTHER MONEY FUNDS, ALLOCATION FUNDS, CMA-TAXABLE, FOREIGNEQUITYADRS, COMMONSTOCK, PREFERRED STOCKS, STABLE VALUE, FOREIGN EQUITY ADRS)
     *
     * @return self
     */
    public function setFiAssetClass($fi_asset_class)
    {
        if (is_null($fi_asset_class)) {
            throw new \InvalidArgumentException('non-nullable fi_asset_class cannot be null');
        }
        $this->container['fi_asset_class'] = $fi_asset_class;

        return $this;
    }

    /**
     * Gets asset_class
     *
     * @return string|null
     */
    public function getAssetClass()
    {
        return $this->container['asset_class'];
    }

    /**
     * Sets asset_class
     *
     * @param string|null $asset_class An asset class is a grouping of comparable financial securities. These include equities (stocks), fixed income (bonds), and cash equivalent or money market instruments. (DOMESTICBOND, LARGESTOCK, INTLSTOCK, MONEYMRKT, OTHER)
     *
     * @return self
     */
    public function setAssetClass($asset_class)
    {
        if (is_null($asset_class)) {
            throw new \InvalidArgumentException('non-nullable asset_class cannot be null');
        }
        $this->container['asset_class'] = $asset_class;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return float|null
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param float|null $currency_rate Currency rate, ratio of currency to original currency
     *
     * @return self
     */
    public function setCurrencyRate($currency_rate)
    {
        if (is_null($currency_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_rate cannot be null');
        }
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets security_id
     *
     * @return string|null
     */
    public function getSecurityId()
    {
        return $this->container['security_id'];
    }

    /**
     * Sets security_id
     *
     * @param string|null $security_id The security ID of the transaction
     *
     * @return self
     */
    public function setSecurityId($security_id)
    {
        if (is_null($security_id)) {
            throw new \InvalidArgumentException('non-nullable security_id cannot be null');
        }
        $this->container['security_id'] = $security_id;

        return $this;
    }

    /**
     * Gets security_id_type
     *
     * @return string|null
     */
    public function getSecurityIdType()
    {
        return $this->container['security_id_type'];
    }

    /**
     * Sets security_id_type
     *
     * @param string|null $security_id_type The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"
     *
     * @return self
     */
    public function setSecurityIdType($security_id_type)
    {
        if (is_null($security_id_type)) {
            throw new \InvalidArgumentException('non-nullable security_id_type cannot be null');
        }
        $this->container['security_id_type'] = $security_id_type;

        return $this;
    }

    /**
     * Gets cost_basis_per_share
     *
     * @return float|null
     */
    public function getCostBasisPerShare()
    {
        return $this->container['cost_basis_per_share'];
    }

    /**
     * Sets cost_basis_per_share
     *
     * @param float|null $cost_basis_per_share The per share cost of acquiring the security
     *
     * @return self
     */
    public function setCostBasisPerShare($cost_basis_per_share)
    {
        if (is_null($cost_basis_per_share)) {
            throw new \InvalidArgumentException('non-nullable cost_basis_per_share cannot be null');
        }
        $this->container['cost_basis_per_share'] = $cost_basis_per_share;

        return $this;
    }

    /**
     * Gets sub_account_type
     *
     * @return string|null
     */
    public function getSubAccountType()
    {
        return $this->container['sub_account_type'];
    }

    /**
     * Sets sub_account_type
     *
     * @param string|null $sub_account_type The subaccount's type, such as cash
     *
     * @return self
     */
    public function setSubAccountType($sub_account_type)
    {
        if (is_null($sub_account_type)) {
            throw new \InvalidArgumentException('non-nullable sub_account_type cannot be null');
        }
        $this->container['sub_account_type'] = $sub_account_type;

        return $this;
    }

    /**
     * Gets security_currency
     *
     * @return string|null
     */
    public function getSecurityCurrency()
    {
        return $this->container['security_currency'];
    }

    /**
     * Sets security_currency
     *
     * @param string|null $security_currency Symbol for the currency that the account is being converted into
     *
     * @return self
     */
    public function setSecurityCurrency($security_currency)
    {
        if (is_null($security_currency)) {
            throw new \InvalidArgumentException('non-nullable security_currency cannot be null');
        }
        $this->container['security_currency'] = $security_currency;

        return $this;
    }

    /**
     * Gets today_gl_dollar
     *
     * @return float|null
     */
    public function getTodayGlDollar()
    {
        return $this->container['today_gl_dollar'];
    }

    /**
     * Sets today_gl_dollar
     *
     * @param float|null $today_gl_dollar The current day's gain and loss of the position at the time of aggregation in dollars
     *
     * @return self
     */
    public function setTodayGlDollar($today_gl_dollar)
    {
        if (is_null($today_gl_dollar)) {
            throw new \InvalidArgumentException('non-nullable today_gl_dollar cannot be null');
        }
        $this->container['today_gl_dollar'] = $today_gl_dollar;

        return $this;
    }

    /**
     * Gets today_gl_percent
     *
     * @return float|null
     */
    public function getTodayGlPercent()
    {
        return $this->container['today_gl_percent'];
    }

    /**
     * Sets today_gl_percent
     *
     * @param float|null $today_gl_percent The current day's gain and loss of the position at the time of aggregation in percentage
     *
     * @return self
     */
    public function setTodayGlPercent($today_gl_percent)
    {
        if (is_null($today_gl_percent)) {
            throw new \InvalidArgumentException('non-nullable today_gl_percent cannot be null');
        }
        $this->container['today_gl_percent'] = $today_gl_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


