<?php
/**
 * ObbAccountDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObbAccountDetails Class Doc Comment
 *
 * @category Class
 * @description Details of the account and financial institution
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObbAccountDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ObbAccountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number_display' => 'string',
        'account_owner' => '\OpenAPI\Client\Model\ObbAccountOwner',
        'aggregation_attempt_date' => 'string',
        'aggregation_status_code' => 'int',
        'aggregation_success_date' => 'string',
        'currency' => 'string',
        'current_balance' => 'float',
        'id' => 'int',
        'institution' => '\OpenAPI\Client\Model\ObbInstitution',
        'institution_login_id' => 'int',
        'name' => 'string',
        'real_account_number_last4' => 'int',
        'status' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number_display' => null,
        'account_owner' => null,
        'aggregation_attempt_date' => null,
        'aggregation_status_code' => null,
        'aggregation_success_date' => null,
        'currency' => null,
        'current_balance' => null,
        'id' => 'int64',
        'institution' => null,
        'institution_login_id' => 'int64',
        'name' => null,
        'real_account_number_last4' => null,
        'status' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_number_display' => false,
        'account_owner' => false,
        'aggregation_attempt_date' => false,
        'aggregation_status_code' => false,
        'aggregation_success_date' => false,
        'currency' => false,
        'current_balance' => false,
        'id' => false,
        'institution' => false,
        'institution_login_id' => false,
        'name' => false,
        'real_account_number_last4' => false,
        'status' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number_display' => 'accountNumberDisplay',
        'account_owner' => 'accountOwner',
        'aggregation_attempt_date' => 'aggregationAttemptDate',
        'aggregation_status_code' => 'aggregationStatusCode',
        'aggregation_success_date' => 'aggregationSuccessDate',
        'currency' => 'currency',
        'current_balance' => 'currentBalance',
        'id' => 'id',
        'institution' => 'institution',
        'institution_login_id' => 'institutionLoginId',
        'name' => 'name',
        'real_account_number_last4' => 'realAccountNumberLast4',
        'status' => 'status',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number_display' => 'setAccountNumberDisplay',
        'account_owner' => 'setAccountOwner',
        'aggregation_attempt_date' => 'setAggregationAttemptDate',
        'aggregation_status_code' => 'setAggregationStatusCode',
        'aggregation_success_date' => 'setAggregationSuccessDate',
        'currency' => 'setCurrency',
        'current_balance' => 'setCurrentBalance',
        'id' => 'setId',
        'institution' => 'setInstitution',
        'institution_login_id' => 'setInstitutionLoginId',
        'name' => 'setName',
        'real_account_number_last4' => 'setRealAccountNumberLast4',
        'status' => 'setStatus',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number_display' => 'getAccountNumberDisplay',
        'account_owner' => 'getAccountOwner',
        'aggregation_attempt_date' => 'getAggregationAttemptDate',
        'aggregation_status_code' => 'getAggregationStatusCode',
        'aggregation_success_date' => 'getAggregationSuccessDate',
        'currency' => 'getCurrency',
        'current_balance' => 'getCurrentBalance',
        'id' => 'getId',
        'institution' => 'getInstitution',
        'institution_login_id' => 'getInstitutionLoginId',
        'name' => 'getName',
        'real_account_number_last4' => 'getRealAccountNumberLast4',
        'status' => 'getStatus',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_number_display', $data ?? [], null);
        $this->setIfExists('account_owner', $data ?? [], null);
        $this->setIfExists('aggregation_attempt_date', $data ?? [], null);
        $this->setIfExists('aggregation_status_code', $data ?? [], null);
        $this->setIfExists('aggregation_success_date', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('institution', $data ?? [], null);
        $this->setIfExists('institution_login_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('real_account_number_last4', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_number_display']) && (mb_strlen($this->container['account_number_display']) > 50)) {
            $invalidProperties[] = "invalid value for 'account_number_display', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['account_number_display']) && (mb_strlen($this->container['account_number_display']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_number_display', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['account_owner'] === null) {
            $invalidProperties[] = "'account_owner' can't be null";
        }
        if (!is_null($this->container['aggregation_attempt_date']) && (mb_strlen($this->container['aggregation_attempt_date']) > 25)) {
            $invalidProperties[] = "invalid value for 'aggregation_attempt_date', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['aggregation_attempt_date']) && (mb_strlen($this->container['aggregation_attempt_date']) < 25)) {
            $invalidProperties[] = "invalid value for 'aggregation_attempt_date', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['aggregation_success_date']) && (mb_strlen($this->container['aggregation_success_date']) > 25)) {
            $invalidProperties[] = "invalid value for 'aggregation_success_date', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['aggregation_success_date']) && (mb_strlen($this->container['aggregation_success_date']) < 25)) {
            $invalidProperties[] = "invalid value for 'aggregation_success_date', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['institution'] === null) {
            $invalidProperties[] = "'institution' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 50)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 0)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 50)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) < 0)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number_display
     *
     * @return string|null
     */
    public function getAccountNumberDisplay()
    {
        return $this->container['account_number_display'];
    }

    /**
     * Sets account_number_display
     *
     * @param string|null $account_number_display The account number from a financial institution in truncated format
     *
     * @return self
     */
    public function setAccountNumberDisplay($account_number_display)
    {
        if (is_null($account_number_display)) {
            throw new \InvalidArgumentException('non-nullable account_number_display cannot be null');
        }
        if ((mb_strlen($account_number_display) > 50)) {
            throw new \InvalidArgumentException('invalid length for $account_number_display when calling ObbAccountDetails., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($account_number_display) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_number_display when calling ObbAccountDetails., must be bigger than or equal to 0.');
        }

        $this->container['account_number_display'] = $account_number_display;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return \OpenAPI\Client\Model\ObbAccountOwner
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param \OpenAPI\Client\Model\ObbAccountOwner $account_owner account_owner
     *
     * @return self
     */
    public function setAccountOwner($account_owner)
    {
        if (is_null($account_owner)) {
            throw new \InvalidArgumentException('non-nullable account_owner cannot be null');
        }
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets aggregation_attempt_date
     *
     * @return string|null
     */
    public function getAggregationAttemptDate()
    {
        return $this->container['aggregation_attempt_date'];
    }

    /**
     * Sets aggregation_attempt_date
     *
     * @param string|null $aggregation_attempt_date A timestamp showing the last aggregation attempt. This will not be present until you have run your first aggregation for the account.
     *
     * @return self
     */
    public function setAggregationAttemptDate($aggregation_attempt_date)
    {
        if (is_null($aggregation_attempt_date)) {
            throw new \InvalidArgumentException('non-nullable aggregation_attempt_date cannot be null');
        }
        if ((mb_strlen($aggregation_attempt_date) > 25)) {
            throw new \InvalidArgumentException('invalid length for $aggregation_attempt_date when calling ObbAccountDetails., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($aggregation_attempt_date) < 25)) {
            throw new \InvalidArgumentException('invalid length for $aggregation_attempt_date when calling ObbAccountDetails., must be bigger than or equal to 25.');
        }

        $this->container['aggregation_attempt_date'] = $aggregation_attempt_date;

        return $this;
    }

    /**
     * Gets aggregation_status_code
     *
     * @return int|null
     */
    public function getAggregationStatusCode()
    {
        return $this->container['aggregation_status_code'];
    }

    /**
     * Sets aggregation_status_code
     *
     * @param int|null $aggregation_status_code The status of the most recent aggregation attempt. This will not be present until you have run your first aggregation for the account
     *
     * @return self
     */
    public function setAggregationStatusCode($aggregation_status_code)
    {
        if (is_null($aggregation_status_code)) {
            throw new \InvalidArgumentException('non-nullable aggregation_status_code cannot be null');
        }
        $this->container['aggregation_status_code'] = $aggregation_status_code;

        return $this;
    }

    /**
     * Gets aggregation_success_date
     *
     * @return string|null
     */
    public function getAggregationSuccessDate()
    {
        return $this->container['aggregation_success_date'];
    }

    /**
     * Sets aggregation_success_date
     *
     * @param string|null $aggregation_success_date A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account.
     *
     * @return self
     */
    public function setAggregationSuccessDate($aggregation_success_date)
    {
        if (is_null($aggregation_success_date)) {
            throw new \InvalidArgumentException('non-nullable aggregation_success_date cannot be null');
        }
        if ((mb_strlen($aggregation_success_date) > 25)) {
            throw new \InvalidArgumentException('invalid length for $aggregation_success_date when calling ObbAccountDetails., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($aggregation_success_date) < 25)) {
            throw new \InvalidArgumentException('invalid length for $aggregation_success_date when calling ObbAccountDetails., must be bigger than or equal to 25.');
        }

        $this->container['aggregation_success_date'] = $aggregation_success_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the account
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ObbAccountDetails., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($currency) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ObbAccountDetails., must be bigger than or equal to 0.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return float|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param float|null $current_balance Current reported balance of the account
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id An account ID represented as a number
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution
     *
     * @return \OpenAPI\Client\Model\ObbInstitution
     */
    public function getInstitution()
    {
        return $this->container['institution'];
    }

    /**
     * Sets institution
     *
     * @param \OpenAPI\Client\Model\ObbInstitution $institution institution
     *
     * @return self
     */
    public function setInstitution($institution)
    {
        if (is_null($institution)) {
            throw new \InvalidArgumentException('non-nullable institution cannot be null');
        }
        $this->container['institution'] = $institution;

        return $this;
    }

    /**
     * Gets institution_login_id
     *
     * @return int|null
     */
    public function getInstitutionLoginId()
    {
        return $this->container['institution_login_id'];
    }

    /**
     * Sets institution_login_id
     *
     * @param int|null $institution_login_id An institution login ID (from the account record), represented as a number
     *
     * @return self
     */
    public function setInstitutionLoginId($institution_login_id)
    {
        if (is_null($institution_login_id)) {
            throw new \InvalidArgumentException('non-nullable institution_login_id cannot be null');
        }
        $this->container['institution_login_id'] = $institution_login_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The account name from the institution
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ObbAccountDetails., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ObbAccountDetails., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets real_account_number_last4
     *
     * @return int|null
     */
    public function getRealAccountNumberLast4()
    {
        return $this->container['real_account_number_last4'];
    }

    /**
     * Sets real_account_number_last4
     *
     * @param int|null $real_account_number_last4 The last 4 digits of the ACH account number
     *
     * @return self
     */
    public function setRealAccountNumberLast4($real_account_number_last4)
    {
        if (is_null($real_account_number_last4)) {
            throw new \InvalidArgumentException('non-nullable real_account_number_last4 cannot be null');
        }
        $this->container['real_account_number_last4'] = $real_account_number_last4;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status pending during account discovery, always active following successful account activation
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        if ((mb_strlen($status) > 50)) {
            throw new \InvalidArgumentException('invalid length for $status when calling ObbAccountDetails., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status when calling ObbAccountDetails., must be bigger than or equal to 0.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Account type, e.g. checking/saving
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        if ((mb_strlen($type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $type when calling ObbAccountDetails., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $type when calling ObbAccountDetails., must be bigger than or equal to 0.');
        }

        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


