<?php
/**
 * AnnualIncome
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnnualIncome Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnnualIncome implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnnualIncome';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'year' => 'string',
        'gross_pay_amount_ytd' => 'float',
        'net_pay_amount_ytd' => 'float',
        'base_pay_amount_ytd' => 'float',
        'overtime_pay_amount_ytd' => 'float',
        'other_pay_amount_ytd' => 'float',
        'commission_pay_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'year' => null,
        'gross_pay_amount_ytd' => null,
        'net_pay_amount_ytd' => null,
        'base_pay_amount_ytd' => null,
        'overtime_pay_amount_ytd' => null,
        'other_pay_amount_ytd' => null,
        'commission_pay_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'year' => false,
        'gross_pay_amount_ytd' => false,
        'net_pay_amount_ytd' => false,
        'base_pay_amount_ytd' => false,
        'overtime_pay_amount_ytd' => false,
        'other_pay_amount_ytd' => false,
        'commission_pay_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year' => 'year',
        'gross_pay_amount_ytd' => 'grossPayAmountYTD',
        'net_pay_amount_ytd' => 'netPayAmountYTD',
        'base_pay_amount_ytd' => 'basePayAmountYTD',
        'overtime_pay_amount_ytd' => 'overtimePayAmountYTD',
        'other_pay_amount_ytd' => 'otherPayAmountYTD',
        'commission_pay_amount' => 'commissionPayAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year' => 'setYear',
        'gross_pay_amount_ytd' => 'setGrossPayAmountYtd',
        'net_pay_amount_ytd' => 'setNetPayAmountYtd',
        'base_pay_amount_ytd' => 'setBasePayAmountYtd',
        'overtime_pay_amount_ytd' => 'setOvertimePayAmountYtd',
        'other_pay_amount_ytd' => 'setOtherPayAmountYtd',
        'commission_pay_amount' => 'setCommissionPayAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year' => 'getYear',
        'gross_pay_amount_ytd' => 'getGrossPayAmountYtd',
        'net_pay_amount_ytd' => 'getNetPayAmountYtd',
        'base_pay_amount_ytd' => 'getBasePayAmountYtd',
        'overtime_pay_amount_ytd' => 'getOvertimePayAmountYtd',
        'other_pay_amount_ytd' => 'getOtherPayAmountYtd',
        'commission_pay_amount' => 'getCommissionPayAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('gross_pay_amount_ytd', $data ?? [], null);
        $this->setIfExists('net_pay_amount_ytd', $data ?? [], null);
        $this->setIfExists('base_pay_amount_ytd', $data ?? [], null);
        $this->setIfExists('overtime_pay_amount_ytd', $data ?? [], null);
        $this->setIfExists('other_pay_amount_ytd', $data ?? [], null);
        $this->setIfExists('commission_pay_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['year'] === null) {
            $invalidProperties[] = "'year' can't be null";
        }
        if ($this->container['gross_pay_amount_ytd'] === null) {
            $invalidProperties[] = "'gross_pay_amount_ytd' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year
     *
     * @return string
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string $year The year for the amounts given in YTD totals for an employer
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets gross_pay_amount_ytd
     *
     * @return float
     */
    public function getGrossPayAmountYtd()
    {
        return $this->container['gross_pay_amount_ytd'];
    }

    /**
     * Sets gross_pay_amount_ytd
     *
     * @param float $gross_pay_amount_ytd Year to date (YTD) gross pay amount for the indicated year
     *
     * @return self
     */
    public function setGrossPayAmountYtd($gross_pay_amount_ytd)
    {
        if (is_null($gross_pay_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable gross_pay_amount_ytd cannot be null');
        }
        $this->container['gross_pay_amount_ytd'] = $gross_pay_amount_ytd;

        return $this;
    }

    /**
     * Gets net_pay_amount_ytd
     *
     * @return float|null
     */
    public function getNetPayAmountYtd()
    {
        return $this->container['net_pay_amount_ytd'];
    }

    /**
     * Sets net_pay_amount_ytd
     *
     * @param float|null $net_pay_amount_ytd Year to date (YTD) net pay amount for the indicated year
     *
     * @return self
     */
    public function setNetPayAmountYtd($net_pay_amount_ytd)
    {
        if (is_null($net_pay_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable net_pay_amount_ytd cannot be null');
        }
        $this->container['net_pay_amount_ytd'] = $net_pay_amount_ytd;

        return $this;
    }

    /**
     * Gets base_pay_amount_ytd
     *
     * @return float|null
     */
    public function getBasePayAmountYtd()
    {
        return $this->container['base_pay_amount_ytd'];
    }

    /**
     * Sets base_pay_amount_ytd
     *
     * @param float|null $base_pay_amount_ytd Year to date (YTD) base pay amount for the year indicated
     *
     * @return self
     */
    public function setBasePayAmountYtd($base_pay_amount_ytd)
    {
        if (is_null($base_pay_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable base_pay_amount_ytd cannot be null');
        }
        $this->container['base_pay_amount_ytd'] = $base_pay_amount_ytd;

        return $this;
    }

    /**
     * Gets overtime_pay_amount_ytd
     *
     * @return float|null
     */
    public function getOvertimePayAmountYtd()
    {
        return $this->container['overtime_pay_amount_ytd'];
    }

    /**
     * Sets overtime_pay_amount_ytd
     *
     * @param float|null $overtime_pay_amount_ytd Year to date (YTD) overtime pay amount for the year indicated
     *
     * @return self
     */
    public function setOvertimePayAmountYtd($overtime_pay_amount_ytd)
    {
        if (is_null($overtime_pay_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable overtime_pay_amount_ytd cannot be null');
        }
        $this->container['overtime_pay_amount_ytd'] = $overtime_pay_amount_ytd;

        return $this;
    }

    /**
     * Gets other_pay_amount_ytd
     *
     * @return float|null
     */
    public function getOtherPayAmountYtd()
    {
        return $this->container['other_pay_amount_ytd'];
    }

    /**
     * Sets other_pay_amount_ytd
     *
     * @param float|null $other_pay_amount_ytd Year to date (YTD) other pay amount for the indicated year. Other pay is pay that is not categorized into one of the other categories.
     *
     * @return self
     */
    public function setOtherPayAmountYtd($other_pay_amount_ytd)
    {
        if (is_null($other_pay_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable other_pay_amount_ytd cannot be null');
        }
        $this->container['other_pay_amount_ytd'] = $other_pay_amount_ytd;

        return $this;
    }

    /**
     * Gets commission_pay_amount
     *
     * @return float|null
     */
    public function getCommissionPayAmount()
    {
        return $this->container['commission_pay_amount'];
    }

    /**
     * Sets commission_pay_amount
     *
     * @param float|null $commission_pay_amount Year to date (YTD) commission pay amount for the indicated year
     *
     * @return self
     */
    public function setCommissionPayAmount($commission_pay_amount)
    {
        if (is_null($commission_pay_amount)) {
            throw new \InvalidArgumentException('non-nullable commission_pay_amount cannot be null');
        }
        $this->container['commission_pay_amount'] = $commission_pay_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


