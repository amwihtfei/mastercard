<?php
/**
 * VOIEPaystubWithStatementPayStatement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VOIEPaystubWithStatementPayStatement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VOIEPaystubWithStatementPayStatement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VOIEPaystubWithStatementPayStatement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_period' => 'string',
        'billable' => 'bool',
        'asset_id' => 'string',
        'pay_date' => 'int',
        'start_date' => 'int',
        'end_date' => 'int',
        'net_pay_current' => 'float',
        'net_pay_ytd' => 'float',
        'gross_pay_current' => 'float',
        'gross_pay_ytd' => 'float',
        'payroll_provider' => 'string',
        'employer' => '\OpenAPI\Client\Model\Employer',
        'employee' => '\OpenAPI\Client\Model\Employee',
        'pay_stat' => '\OpenAPI\Client\Model\PayStat[]',
        'direct_deposits' => '\OpenAPI\Client\Model\DirectDeposit[]',
        'institutions' => 'string[]',
        'error_code' => 'int',
        'error_message' => 'string',
        'monthly_income' => '\OpenAPI\Client\Model\PaystubTxVerifyMonthlyIncomeRecord'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_period' => null,
        'billable' => null,
        'asset_id' => null,
        'pay_date' => 'int64',
        'start_date' => 'int64',
        'end_date' => 'int64',
        'net_pay_current' => null,
        'net_pay_ytd' => null,
        'gross_pay_current' => null,
        'gross_pay_ytd' => null,
        'payroll_provider' => null,
        'employer' => null,
        'employee' => null,
        'pay_stat' => null,
        'direct_deposits' => null,
        'institutions' => null,
        'error_code' => 'int32',
        'error_message' => null,
        'monthly_income' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_period' => false,
        'billable' => false,
        'asset_id' => false,
        'pay_date' => false,
        'start_date' => false,
        'end_date' => false,
        'net_pay_current' => false,
        'net_pay_ytd' => false,
        'gross_pay_current' => false,
        'gross_pay_ytd' => false,
        'payroll_provider' => false,
        'employer' => false,
        'employee' => false,
        'pay_stat' => false,
        'direct_deposits' => false,
        'institutions' => false,
        'error_code' => false,
        'error_message' => false,
        'monthly_income' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_period' => 'payPeriod',
        'billable' => 'billable',
        'asset_id' => 'assetId',
        'pay_date' => 'payDate',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'net_pay_current' => 'netPayCurrent',
        'net_pay_ytd' => 'netPayYTD',
        'gross_pay_current' => 'grossPayCurrent',
        'gross_pay_ytd' => 'grossPayYTD',
        'payroll_provider' => 'payrollProvider',
        'employer' => 'employer',
        'employee' => 'employee',
        'pay_stat' => 'payStat',
        'direct_deposits' => 'directDeposits',
        'institutions' => 'institutions',
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'monthly_income' => 'monthlyIncome'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_period' => 'setPayPeriod',
        'billable' => 'setBillable',
        'asset_id' => 'setAssetId',
        'pay_date' => 'setPayDate',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'net_pay_current' => 'setNetPayCurrent',
        'net_pay_ytd' => 'setNetPayYtd',
        'gross_pay_current' => 'setGrossPayCurrent',
        'gross_pay_ytd' => 'setGrossPayYtd',
        'payroll_provider' => 'setPayrollProvider',
        'employer' => 'setEmployer',
        'employee' => 'setEmployee',
        'pay_stat' => 'setPayStat',
        'direct_deposits' => 'setDirectDeposits',
        'institutions' => 'setInstitutions',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'monthly_income' => 'setMonthlyIncome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_period' => 'getPayPeriod',
        'billable' => 'getBillable',
        'asset_id' => 'getAssetId',
        'pay_date' => 'getPayDate',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'net_pay_current' => 'getNetPayCurrent',
        'net_pay_ytd' => 'getNetPayYtd',
        'gross_pay_current' => 'getGrossPayCurrent',
        'gross_pay_ytd' => 'getGrossPayYtd',
        'payroll_provider' => 'getPayrollProvider',
        'employer' => 'getEmployer',
        'employee' => 'getEmployee',
        'pay_stat' => 'getPayStat',
        'direct_deposits' => 'getDirectDeposits',
        'institutions' => 'getInstitutions',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'monthly_income' => 'getMonthlyIncome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pay_period', $data ?? [], null);
        $this->setIfExists('billable', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('net_pay_current', $data ?? [], null);
        $this->setIfExists('net_pay_ytd', $data ?? [], null);
        $this->setIfExists('gross_pay_current', $data ?? [], null);
        $this->setIfExists('gross_pay_ytd', $data ?? [], null);
        $this->setIfExists('payroll_provider', $data ?? [], null);
        $this->setIfExists('employer', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('pay_stat', $data ?? [], null);
        $this->setIfExists('direct_deposits', $data ?? [], null);
        $this->setIfExists('institutions', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('monthly_income', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billable'] === null) {
            $invalidProperties[] = "'billable' can't be null";
        }
        if ($this->container['asset_id'] === null) {
            $invalidProperties[] = "'asset_id' can't be null";
        }
        if ($this->container['employer'] === null) {
            $invalidProperties[] = "'employer' can't be null";
        }
        if ($this->container['employee'] === null) {
            $invalidProperties[] = "'employee' can't be null";
        }
        if ($this->container['pay_stat'] === null) {
            $invalidProperties[] = "'pay_stat' can't be null";
        }
        if ($this->container['institutions'] === null) {
            $invalidProperties[] = "'institutions' can't be null";
        }
        if ($this->container['monthly_income'] === null) {
            $invalidProperties[] = "'monthly_income' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_period
     *
     * @return string|null
     */
    public function getPayPeriod()
    {
        return $this->container['pay_period'];
    }

    /**
     * Sets pay_period
     *
     * @param string|null $pay_period The pay period of the pay statement
     *
     * @return self
     */
    public function setPayPeriod($pay_period)
    {
        if (is_null($pay_period)) {
            throw new \InvalidArgumentException('non-nullable pay_period cannot be null');
        }
        $this->container['pay_period'] = $pay_period;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool $billable This will display true if the pay statement is billable. If a pay statement has been digitized previously, this will display as false as it will not be billable.
     *
     * @return self
     */
    public function setBillable($billable)
    {
        if (is_null($billable)) {
            throw new \InvalidArgumentException('non-nullable billable cannot be null');
        }
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id The asset ID of the stored pay statement
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return int|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param int|null $pay_date The listed pay date for the pay statement
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date The beginning of the pay period
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date The end of the pay period
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets net_pay_current
     *
     * @return float|null
     */
    public function getNetPayCurrent()
    {
        return $this->container['net_pay_current'];
    }

    /**
     * Sets net_pay_current
     *
     * @param float|null $net_pay_current The total pay after deductions for the employee for the current pay period
     *
     * @return self
     */
    public function setNetPayCurrent($net_pay_current)
    {
        if (is_null($net_pay_current)) {
            throw new \InvalidArgumentException('non-nullable net_pay_current cannot be null');
        }
        $this->container['net_pay_current'] = $net_pay_current;

        return $this;
    }

    /**
     * Gets net_pay_ytd
     *
     * @return float|null
     */
    public function getNetPayYtd()
    {
        return $this->container['net_pay_ytd'];
    }

    /**
     * Sets net_pay_ytd
     *
     * @param float|null $net_pay_ytd The total accumulation of pay after deductions for the employee for the current pay year
     *
     * @return self
     */
    public function setNetPayYtd($net_pay_ytd)
    {
        if (is_null($net_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable net_pay_ytd cannot be null');
        }
        $this->container['net_pay_ytd'] = $net_pay_ytd;

        return $this;
    }

    /**
     * Gets gross_pay_current
     *
     * @return float|null
     */
    public function getGrossPayCurrent()
    {
        return $this->container['gross_pay_current'];
    }

    /**
     * Sets gross_pay_current
     *
     * @param float|null $gross_pay_current The total pay before deductions for the employee for the current pay period
     *
     * @return self
     */
    public function setGrossPayCurrent($gross_pay_current)
    {
        if (is_null($gross_pay_current)) {
            throw new \InvalidArgumentException('non-nullable gross_pay_current cannot be null');
        }
        $this->container['gross_pay_current'] = $gross_pay_current;

        return $this;
    }

    /**
     * Gets gross_pay_ytd
     *
     * @return float|null
     */
    public function getGrossPayYtd()
    {
        return $this->container['gross_pay_ytd'];
    }

    /**
     * Sets gross_pay_ytd
     *
     * @param float|null $gross_pay_ytd The total accumulation of pay before deductions for the employee for the current pay year
     *
     * @return self
     */
    public function setGrossPayYtd($gross_pay_ytd)
    {
        if (is_null($gross_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable gross_pay_ytd cannot be null');
        }
        $this->container['gross_pay_ytd'] = $gross_pay_ytd;

        return $this;
    }

    /**
     * Gets payroll_provider
     *
     * @return string|null
     */
    public function getPayrollProvider()
    {
        return $this->container['payroll_provider'];
    }

    /**
     * Sets payroll_provider
     *
     * @param string|null $payroll_provider The payroll provider extracted from the pay statement
     *
     * @return self
     */
    public function setPayrollProvider($payroll_provider)
    {
        if (is_null($payroll_provider)) {
            throw new \InvalidArgumentException('non-nullable payroll_provider cannot be null');
        }
        $this->container['payroll_provider'] = $payroll_provider;

        return $this;
    }

    /**
     * Gets employer
     *
     * @return \OpenAPI\Client\Model\Employer
     */
    public function getEmployer()
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \OpenAPI\Client\Model\Employer $employer employer
     *
     * @return self
     */
    public function setEmployer($employer)
    {
        if (is_null($employer)) {
            throw new \InvalidArgumentException('non-nullable employer cannot be null');
        }
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Model\Employee
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Model\Employee $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets pay_stat
     *
     * @return \OpenAPI\Client\Model\PayStat[]
     */
    public function getPayStat()
    {
        return $this->container['pay_stat'];
    }

    /**
     * Sets pay_stat
     *
     * @param \OpenAPI\Client\Model\PayStat[] $pay_stat Information pertaining to the earnings on the pay statement
     *
     * @return self
     */
    public function setPayStat($pay_stat)
    {
        if (is_null($pay_stat)) {
            throw new \InvalidArgumentException('non-nullable pay_stat cannot be null');
        }
        $this->container['pay_stat'] = $pay_stat;

        return $this;
    }

    /**
     * Gets direct_deposits
     *
     * @return \OpenAPI\Client\Model\DirectDeposit[]|null
     */
    public function getDirectDeposits()
    {
        return $this->container['direct_deposits'];
    }

    /**
     * Sets direct_deposits
     *
     * @param \OpenAPI\Client\Model\DirectDeposit[]|null $direct_deposits Information pertaining to the direct deposits on the pay statement
     *
     * @return self
     */
    public function setDirectDeposits($direct_deposits)
    {
        if (is_null($direct_deposits)) {
            throw new \InvalidArgumentException('non-nullable direct_deposits cannot be null');
        }
        $this->container['direct_deposits'] = $direct_deposits;

        return $this;
    }

    /**
     * Gets institutions
     *
     * @return string[]
     */
    public function getInstitutions()
    {
        return $this->container['institutions'];
    }

    /**
     * Sets institutions
     *
     * @param string[] $institutions Not populated for the voieWithStatement style of paystub report. For the VOIE - Paystub (with TXVerify) reports this would include details of the financial institution accounts and income streams with matching transactions to the pay statement.
     *
     * @return self
     */
    public function setInstitutions($institutions)
    {
        if (is_null($institutions)) {
            throw new \InvalidArgumentException('non-nullable institutions cannot be null');
        }
        $this->container['institutions'] = $institutions;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int|null $error_code Error code for the asset
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Error message for the asset
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets monthly_income
     *
     * @return \OpenAPI\Client\Model\PaystubTxVerifyMonthlyIncomeRecord
     */
    public function getMonthlyIncome()
    {
        return $this->container['monthly_income'];
    }

    /**
     * Sets monthly_income
     *
     * @param \OpenAPI\Client\Model\PaystubTxVerifyMonthlyIncomeRecord $monthly_income monthly_income
     *
     * @return self
     */
    public function setMonthlyIncome($monthly_income)
    {
        if (is_null($monthly_income)) {
            throw new \InvalidArgumentException('non-nullable monthly_income cannot be null');
        }
        $this->container['monthly_income'] = $monthly_income;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


