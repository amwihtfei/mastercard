<?php
/**
 * PayrollEmploymentHistoryVOIE
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayrollEmploymentHistoryVOIE Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollEmploymentHistoryVOIE implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayrollEmploymentHistoryVOIE';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'as_of_date' => 'int',
        'employment_id' => 'string',
        'employer_name' => 'string',
        'payroll_source' => 'string',
        'employee' => '\OpenAPI\Client\Model\PayrollEmployeeRecord',
        'employment' => '\OpenAPI\Client\Model\PayrollEmploymentRecord',
        'income' => '\OpenAPI\Client\Model\PayrollVOIEIncomeRecord'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'as_of_date' => 'int64',
        'employment_id' => null,
        'employer_name' => null,
        'payroll_source' => null,
        'employee' => null,
        'employment' => null,
        'income' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'as_of_date' => false,
        'employment_id' => false,
        'employer_name' => false,
        'payroll_source' => false,
        'employee' => false,
        'employment' => false,
        'income' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'as_of_date' => 'asOfDate',
        'employment_id' => 'employmentId',
        'employer_name' => 'employerName',
        'payroll_source' => 'payrollSource',
        'employee' => 'employee',
        'employment' => 'employment',
        'income' => 'income'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'as_of_date' => 'setAsOfDate',
        'employment_id' => 'setEmploymentId',
        'employer_name' => 'setEmployerName',
        'payroll_source' => 'setPayrollSource',
        'employee' => 'setEmployee',
        'employment' => 'setEmployment',
        'income' => 'setIncome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'as_of_date' => 'getAsOfDate',
        'employment_id' => 'getEmploymentId',
        'employer_name' => 'getEmployerName',
        'payroll_source' => 'getPayrollSource',
        'employee' => 'getEmployee',
        'employment' => 'getEmployment',
        'income' => 'getIncome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('as_of_date', $data ?? [], null);
        $this->setIfExists('employment_id', $data ?? [], null);
        $this->setIfExists('employer_name', $data ?? [], null);
        $this->setIfExists('payroll_source', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('employment', $data ?? [], null);
        $this->setIfExists('income', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['as_of_date'] === null) {
            $invalidProperties[] = "'as_of_date' can't be null";
        }
        if ($this->container['employer_name'] === null) {
            $invalidProperties[] = "'employer_name' can't be null";
        }
        if ($this->container['payroll_source'] === null) {
            $invalidProperties[] = "'payroll_source' can't be null";
        }
        if ($this->container['employee'] === null) {
            $invalidProperties[] = "'employee' can't be null";
        }
        if ($this->container['employment'] === null) {
            $invalidProperties[] = "'employment' can't be null";
        }
        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets as_of_date
     *
     * @return int
     */
    public function getAsOfDate()
    {
        return $this->container['as_of_date'];
    }

    /**
     * Sets as_of_date
     *
     * @param int $as_of_date The last time the payroll data was updated in the payroll provider's system
     *
     * @return self
     */
    public function setAsOfDate($as_of_date)
    {
        if (is_null($as_of_date)) {
            throw new \InvalidArgumentException('non-nullable as_of_date cannot be null');
        }
        $this->container['as_of_date'] = $as_of_date;

        return $this;
    }

    /**
     * Gets employment_id
     *
     * @return string|null
     */
    public function getEmploymentId()
    {
        return $this->container['employment_id'];
    }

    /**
     * Sets employment_id
     *
     * @param string|null $employment_id This is a Mastercard assigned ID to the employment record. It remains consistent for that employment record, even if the report is refreshed. It can be used to limit the employment records that are returned in the report.
     *
     * @return self
     */
    public function setEmploymentId($employment_id)
    {
        if (is_null($employment_id)) {
            throw new \InvalidArgumentException('non-nullable employment_id cannot be null');
        }
        $this->container['employment_id'] = $employment_id;

        return $this;
    }

    /**
     * Gets employer_name
     *
     * @return string
     */
    public function getEmployerName()
    {
        return $this->container['employer_name'];
    }

    /**
     * Sets employer_name
     *
     * @param string $employer_name Name of the employer as stated by the employer in the payroll system
     *
     * @return self
     */
    public function setEmployerName($employer_name)
    {
        if (is_null($employer_name)) {
            throw new \InvalidArgumentException('non-nullable employer_name cannot be null');
        }
        $this->container['employer_name'] = $employer_name;

        return $this;
    }

    /**
     * Gets payroll_source
     *
     * @return string
     */
    public function getPayrollSource()
    {
        return $this->container['payroll_source'];
    }

    /**
     * Sets payroll_source
     *
     * @param string $payroll_source The name of the payroll source where the data was retrieved
     *
     * @return self
     */
    public function setPayrollSource($payroll_source)
    {
        if (is_null($payroll_source)) {
            throw new \InvalidArgumentException('non-nullable payroll_source cannot be null');
        }
        $this->container['payroll_source'] = $payroll_source;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Model\PayrollEmployeeRecord
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Model\PayrollEmployeeRecord $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets employment
     *
     * @return \OpenAPI\Client\Model\PayrollEmploymentRecord
     */
    public function getEmployment()
    {
        return $this->container['employment'];
    }

    /**
     * Sets employment
     *
     * @param \OpenAPI\Client\Model\PayrollEmploymentRecord $employment employment
     *
     * @return self
     */
    public function setEmployment($employment)
    {
        if (is_null($employment)) {
            throw new \InvalidArgumentException('non-nullable employment cannot be null');
        }
        $this->container['employment'] = $employment;

        return $this;
    }

    /**
     * Gets income
     *
     * @return \OpenAPI\Client\Model\PayrollVOIEIncomeRecord
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param \OpenAPI\Client\Model\PayrollVOIEIncomeRecord $income income
     *
     * @return self
     */
    public function setIncome($income)
    {
        if (is_null($income)) {
            throw new \InvalidArgumentException('non-nullable income cannot be null');
        }
        $this->container['income'] = $income;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


