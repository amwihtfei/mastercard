<?php
/**
 * Categorization
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Categorization Class Doc Comment
 *
 * @category Class
 * @description Categorization Record
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Categorization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Categorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'normalized_payee_name' => 'string',
        'category' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'best_representation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'normalized_payee_name' => null,
        'category' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'best_representation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'normalized_payee_name' => false,
        'category' => false,
        'city' => false,
        'state' => false,
        'postal_code' => false,
        'country' => false,
        'best_representation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'normalized_payee_name' => 'normalizedPayeeName',
        'category' => 'category',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'best_representation' => 'bestRepresentation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'normalized_payee_name' => 'setNormalizedPayeeName',
        'category' => 'setCategory',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'best_representation' => 'setBestRepresentation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'normalized_payee_name' => 'getNormalizedPayeeName',
        'category' => 'getCategory',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'best_representation' => 'getBestRepresentation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('normalized_payee_name', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('best_representation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['normalized_payee_name'] === null) {
            $invalidProperties[] = "'normalized_payee_name' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets normalized_payee_name
     *
     * @return string
     */
    public function getNormalizedPayeeName()
    {
        return $this->container['normalized_payee_name'];
    }

    /**
     * Sets normalized_payee_name
     *
     * @param string $normalized_payee_name A normalized payee, derived from the transaction's description and memo fields
     *
     * @return self
     */
    public function setNormalizedPayeeName($normalized_payee_name)
    {
        if (is_null($normalized_payee_name)) {
            throw new \InvalidArgumentException('non-nullable normalized_payee_name cannot be null');
        }
        $this->container['normalized_payee_name'] = $normalized_payee_name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category The different categories for transactions. * \"ATM Fee\"  * \"Advertising\"  * \"Air Travel\"  * \"Alcohol & Bars\"  * \"Allowance\"  * \"Amusement\"  * \"Arts\"  * \"Auto & Transport\"  * \"Auto Insurance\"  * \"Auto Payment\"  * \"Baby Supplies\"  * \"Babysitter & Daycare\"  * \"Bank Fee\"  * \"Bills & Utilities\"  * \"Bonus\"  * \"Books\"  * \"Books & Supplies\"  * \"Business Services\"  * \"Buy\"  * \"Cash & ATM\"  * \"Charity\"  * \"Check\"  * \"Child Support\"  * \"Clothing\"  * \"Coffee Shops\"  * \"Credit Card Payment\"  * \"Dentist\"  * \"Deposit\"  * \"Dividend & Cap Gains\"  * \"Doctor\"  * \"Education\"  * \"Electronics & Software\"  * \"Entertainment\"  * \"Eyecare\"  * \"Fast Food\"  * \"Federal Tax\"  * \"Fees & Charges\"  * \"Finance Charge\"  * \"Financial\"  * \"Financial Advisor\"  * \"Food & Dining\"  * \"Furnishings\"  * \"Gas & Fuel\"  * \"Gift\"  * \"Gifts & Donations\"  * \"Groceries\"  * \"Gym\"  * \"Hair\"  * \"Health & Fitness\"  * \"Health Insurance\"  * \"Hobbies\"  * \"Home\"  * \"Home Improvement\"  * \"Home Insurance\"  * \"Home Phone\"  * \"Home Services\"  * \"Home Supplies\"  * \"Hotel\"  * \"Income\"  * \"Interest Income\"  * \"Internet\"  * \"Investments\"  * \"Kids\"  * \"Kids Activities\"  * \"Late Fee\"  * \"Laundry\"  * \"Lawn & Garden\"  * \"Legal\"  * \"Life Insurance\"  * \"Loan Fees and Charges\"  * \"Loan Insurance\"  * \"Loan Interest\"  * \"Loan Payment\"  * \"Loan Principal\"  * \"Loans\"  * \"Local Tax\"  * \"Low Balance\"  * \"Mobile Phone\"  * \"Mortgage & Rent\"  * \"Movies & DVDs\"  * \"Music\"  * \"Newspapers & Magazines\"  * \"Office Supplies\"  * \"Parking\"  * \"Paycheck\"  * \"Personal Care\"  * \"Pet Food & Supplies\"  * \"Pet Grooming\"  * \"Pets\"  * \"Pharmacy\"  * \"Printing\"  * \"Property Tax\"  * \"Public Transportation\"  * \"Reimbursement\"  * \"Rental Car & Taxi\"  * \"Restaurants\"  * \"Sales Tax\"  * \"Sell\"  * \"Service & Parts\"  * \"Service Fee\"  * \"Shipping\"  * \"Shopping\"  * \"Spa & Massage\"  * \"Sporting Goods\"  * \"Sports\"  * \"State Tax\"  * \"Streaming Services\"  * \"Student Loan\"  * \"Taxes\"  * \"Television\"  * \"Toys\"  * \"Trade Commissions\"  * \"Transfer\"  * \"Transfer for Cash Spending\"  * \"Travel\"  * \"Tuition\"  * \"Uncategorized\"  * \"Utilities\"  * \"Vacation\"  * \"Veterinary\"  * \"Internet / Broadband Charges\"
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code A ZIP code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country code is Iso3166-1 Alpha-2 code and Alpha 3 standard (max length 3).
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets best_representation
     *
     * @return string|null
     */
    public function getBestRepresentation()
    {
        return $this->container['best_representation'];
    }

    /**
     * Sets best_representation
     *
     * @param string|null $best_representation Combines the `description` and `memo` data together, removing duplicated information and numbers and special characters
     *
     * @return self
     */
    public function setBestRepresentation($best_representation)
    {
        if (is_null($best_representation)) {
            throw new \InvalidArgumentException('non-nullable best_representation cannot be null');
        }
        $this->container['best_representation'] = $best_representation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


