<?php
/**
 * CashFlowTransactionAnalyticsAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CashFlowTransactionAnalyticsAttributes Class Doc Comment
 *
 * @category Class
 * @description Transaction Analytics Attributes
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CashFlowTransactionAnalyticsAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CashFlowTransactionAnalyticsAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activity_deposits_credits_for_the_report_time_period' => '\OpenAPI\Client\Model\CashFlowActivityDepositsCredits[]',
        'activity_withdrawals_debits_for_the_report_time_period' => '\OpenAPI\Client\Model\CashFlowActivityWithdrawalsDebits[]',
        'average_transaction_value_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'historic_weeks_with_zero_transactions' => '\OpenAPI\Client\Model\CashFlowNumWeeksZeros',
        'last_transaction_date' => '\OpenAPI\Client\Model\CashFlowTransactionAnalyticsAttributesLastTransactionDateInner[]',
        'net_cash_flow_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'net_cash_flow_for_the_report_time_period' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activity_deposits_credits_for_the_report_time_period' => null,
        'activity_withdrawals_debits_for_the_report_time_period' => null,
        'average_transaction_value_by_month_for_the_report_time_period' => null,
        'historic_weeks_with_zero_transactions' => null,
        'last_transaction_date' => null,
        'net_cash_flow_by_month_for_the_report_time_period' => null,
        'net_cash_flow_for_the_report_time_period' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activity_deposits_credits_for_the_report_time_period' => false,
        'activity_withdrawals_debits_for_the_report_time_period' => false,
        'average_transaction_value_by_month_for_the_report_time_period' => false,
        'historic_weeks_with_zero_transactions' => false,
        'last_transaction_date' => false,
        'net_cash_flow_by_month_for_the_report_time_period' => false,
        'net_cash_flow_for_the_report_time_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_deposits_credits_for_the_report_time_period' => 'activityDepositsCreditsForTheReportTimePeriod',
        'activity_withdrawals_debits_for_the_report_time_period' => 'activityWithdrawalsDebitsForTheReportTimePeriod',
        'average_transaction_value_by_month_for_the_report_time_period' => 'averageTransactionValueByMonthForTheReportTimePeriod',
        'historic_weeks_with_zero_transactions' => 'historicWeeksWithZeroTransactions',
        'last_transaction_date' => 'lastTransactionDate',
        'net_cash_flow_by_month_for_the_report_time_period' => 'netCashFlowByMonthForTheReportTimePeriod',
        'net_cash_flow_for_the_report_time_period' => 'netCashFlowForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_deposits_credits_for_the_report_time_period' => 'setActivityDepositsCreditsForTheReportTimePeriod',
        'activity_withdrawals_debits_for_the_report_time_period' => 'setActivityWithdrawalsDebitsForTheReportTimePeriod',
        'average_transaction_value_by_month_for_the_report_time_period' => 'setAverageTransactionValueByMonthForTheReportTimePeriod',
        'historic_weeks_with_zero_transactions' => 'setHistoricWeeksWithZeroTransactions',
        'last_transaction_date' => 'setLastTransactionDate',
        'net_cash_flow_by_month_for_the_report_time_period' => 'setNetCashFlowByMonthForTheReportTimePeriod',
        'net_cash_flow_for_the_report_time_period' => 'setNetCashFlowForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_deposits_credits_for_the_report_time_period' => 'getActivityDepositsCreditsForTheReportTimePeriod',
        'activity_withdrawals_debits_for_the_report_time_period' => 'getActivityWithdrawalsDebitsForTheReportTimePeriod',
        'average_transaction_value_by_month_for_the_report_time_period' => 'getAverageTransactionValueByMonthForTheReportTimePeriod',
        'historic_weeks_with_zero_transactions' => 'getHistoricWeeksWithZeroTransactions',
        'last_transaction_date' => 'getLastTransactionDate',
        'net_cash_flow_by_month_for_the_report_time_period' => 'getNetCashFlowByMonthForTheReportTimePeriod',
        'net_cash_flow_for_the_report_time_period' => 'getNetCashFlowForTheReportTimePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activity_deposits_credits_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('activity_withdrawals_debits_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('average_transaction_value_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('historic_weeks_with_zero_transactions', $data ?? [], null);
        $this->setIfExists('last_transaction_date', $data ?? [], null);
        $this->setIfExists('net_cash_flow_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('net_cash_flow_for_the_report_time_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['activity_deposits_credits_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'activity_deposits_credits_for_the_report_time_period' can't be null";
        }
        if ($this->container['activity_withdrawals_debits_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'activity_withdrawals_debits_for_the_report_time_period' can't be null";
        }
        if ($this->container['average_transaction_value_by_month_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'average_transaction_value_by_month_for_the_report_time_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_deposits_credits_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\CashFlowActivityDepositsCredits[]
     */
    public function getActivityDepositsCreditsForTheReportTimePeriod()
    {
        return $this->container['activity_deposits_credits_for_the_report_time_period'];
    }

    /**
     * Sets activity_deposits_credits_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\CashFlowActivityDepositsCredits[] $activity_deposits_credits_for_the_report_time_period List of all deposit transactions posted to the account during the report period
     *
     * @return self
     */
    public function setActivityDepositsCreditsForTheReportTimePeriod($activity_deposits_credits_for_the_report_time_period)
    {
        if (is_null($activity_deposits_credits_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable activity_deposits_credits_for_the_report_time_period cannot be null');
        }
        $this->container['activity_deposits_credits_for_the_report_time_period'] = $activity_deposits_credits_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets activity_withdrawals_debits_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\CashFlowActivityWithdrawalsDebits[]
     */
    public function getActivityWithdrawalsDebitsForTheReportTimePeriod()
    {
        return $this->container['activity_withdrawals_debits_for_the_report_time_period'];
    }

    /**
     * Sets activity_withdrawals_debits_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\CashFlowActivityWithdrawalsDebits[] $activity_withdrawals_debits_for_the_report_time_period List of all withdrawal transactions posted to the account during the report period
     *
     * @return self
     */
    public function setActivityWithdrawalsDebitsForTheReportTimePeriod($activity_withdrawals_debits_for_the_report_time_period)
    {
        if (is_null($activity_withdrawals_debits_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable activity_withdrawals_debits_for_the_report_time_period cannot be null');
        }
        $this->container['activity_withdrawals_debits_for_the_report_time_period'] = $activity_withdrawals_debits_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets average_transaction_value_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]
     */
    public function getAverageTransactionValueByMonthForTheReportTimePeriod()
    {
        return $this->container['average_transaction_value_by_month_for_the_report_time_period'];
    }

    /**
     * Sets average_transaction_value_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[] $average_transaction_value_by_month_for_the_report_time_period Average value of transactions during periods in the report. Values may be positive or negative
     *
     * @return self
     */
    public function setAverageTransactionValueByMonthForTheReportTimePeriod($average_transaction_value_by_month_for_the_report_time_period)
    {
        if (is_null($average_transaction_value_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable average_transaction_value_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['average_transaction_value_by_month_for_the_report_time_period'] = $average_transaction_value_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets historic_weeks_with_zero_transactions
     *
     * @return \OpenAPI\Client\Model\CashFlowNumWeeksZeros|null
     */
    public function getHistoricWeeksWithZeroTransactions()
    {
        return $this->container['historic_weeks_with_zero_transactions'];
    }

    /**
     * Sets historic_weeks_with_zero_transactions
     *
     * @param \OpenAPI\Client\Model\CashFlowNumWeeksZeros|null $historic_weeks_with_zero_transactions historic_weeks_with_zero_transactions
     *
     * @return self
     */
    public function setHistoricWeeksWithZeroTransactions($historic_weeks_with_zero_transactions)
    {
        if (is_null($historic_weeks_with_zero_transactions)) {
            throw new \InvalidArgumentException('non-nullable historic_weeks_with_zero_transactions cannot be null');
        }
        $this->container['historic_weeks_with_zero_transactions'] = $historic_weeks_with_zero_transactions;

        return $this;
    }

    /**
     * Gets last_transaction_date
     *
     * @return \OpenAPI\Client\Model\CashFlowTransactionAnalyticsAttributesLastTransactionDateInner[]|null
     */
    public function getLastTransactionDate()
    {
        return $this->container['last_transaction_date'];
    }

    /**
     * Sets last_transaction_date
     *
     * @param \OpenAPI\Client\Model\CashFlowTransactionAnalyticsAttributesLastTransactionDateInner[]|null $last_transaction_date Latest posted transaction(s) to the account. May be more than one if they share the same timestamp
     *
     * @return self
     */
    public function setLastTransactionDate($last_transaction_date)
    {
        if (is_null($last_transaction_date)) {
            throw new \InvalidArgumentException('non-nullable last_transaction_date cannot be null');
        }
        $this->container['last_transaction_date'] = $last_transaction_date;

        return $this;
    }

    /**
     * Gets net_cash_flow_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null
     */
    public function getNetCashFlowByMonthForTheReportTimePeriod()
    {
        return $this->container['net_cash_flow_by_month_for_the_report_time_period'];
    }

    /**
     * Sets net_cash_flow_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null $net_cash_flow_by_month_for_the_report_time_period Net cash flow for each month during the report period
     *
     * @return self
     */
    public function setNetCashFlowByMonthForTheReportTimePeriod($net_cash_flow_by_month_for_the_report_time_period)
    {
        if (is_null($net_cash_flow_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['net_cash_flow_by_month_for_the_report_time_period'] = $net_cash_flow_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets net_cash_flow_for_the_report_time_period
     *
     * @return float|null
     */
    public function getNetCashFlowForTheReportTimePeriod()
    {
        return $this->container['net_cash_flow_for_the_report_time_period'];
    }

    /**
     * Sets net_cash_flow_for_the_report_time_period
     *
     * @param float|null $net_cash_flow_for_the_report_time_period Net cash flow during the report period (may be positive or negative)
     *
     * @return self
     */
    public function setNetCashFlowForTheReportTimePeriod($net_cash_flow_for_the_report_time_period)
    {
        if (is_null($net_cash_flow_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_for_the_report_time_period cannot be null');
        }
        $this->container['net_cash_flow_for_the_report_time_period'] = $net_cash_flow_for_the_report_time_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


