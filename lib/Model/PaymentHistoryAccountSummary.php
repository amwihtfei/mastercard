<?php
/**
 * PaymentHistoryAccountSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentHistoryAccountSummary Class Doc Comment
 *
 * @category Class
 * @description Account-level summary of transactions
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentHistoryAccountSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentHistoryAccountSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number_display' => 'string',
        'financial_institution' => 'string',
        'institution_icon' => 'string',
        'currency' => 'string',
        'status' => 'string',
        'account_name' => 'string',
        'account_owner' => '\OpenAPI\Client\Model\PaymentHistoryAccountSummaryAccountOwner',
        'account_type' => 'string',
        'beginning_balance' => 'float',
        'average_monthly_balance' => 'float',
        'current_balance' => 'float',
        'begin_date' => 'string',
        'end_date' => 'string',
        'total_nonsufficient_funds' => 'float',
        'days_since_nonsufficient_funds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number_display' => null,
        'financial_institution' => null,
        'institution_icon' => null,
        'currency' => null,
        'status' => null,
        'account_name' => null,
        'account_owner' => null,
        'account_type' => null,
        'beginning_balance' => null,
        'average_monthly_balance' => null,
        'current_balance' => null,
        'begin_date' => null,
        'end_date' => null,
        'total_nonsufficient_funds' => null,
        'days_since_nonsufficient_funds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_number_display' => false,
        'financial_institution' => false,
        'institution_icon' => false,
        'currency' => false,
        'status' => false,
        'account_name' => false,
        'account_owner' => false,
        'account_type' => false,
        'beginning_balance' => false,
        'average_monthly_balance' => false,
        'current_balance' => false,
        'begin_date' => false,
        'end_date' => false,
        'total_nonsufficient_funds' => false,
        'days_since_nonsufficient_funds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number_display' => 'accountNumberDisplay',
        'financial_institution' => 'financialInstitution',
        'institution_icon' => 'institutionIcon',
        'currency' => 'currency',
        'status' => 'status',
        'account_name' => 'accountName',
        'account_owner' => 'accountOwner',
        'account_type' => 'accountType',
        'beginning_balance' => 'beginningBalance',
        'average_monthly_balance' => 'averageMonthlyBalance',
        'current_balance' => 'currentBalance',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate',
        'total_nonsufficient_funds' => 'totalNonsufficientFunds',
        'days_since_nonsufficient_funds' => 'daysSinceNonsufficientFunds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number_display' => 'setAccountNumberDisplay',
        'financial_institution' => 'setFinancialInstitution',
        'institution_icon' => 'setInstitutionIcon',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'account_name' => 'setAccountName',
        'account_owner' => 'setAccountOwner',
        'account_type' => 'setAccountType',
        'beginning_balance' => 'setBeginningBalance',
        'average_monthly_balance' => 'setAverageMonthlyBalance',
        'current_balance' => 'setCurrentBalance',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'total_nonsufficient_funds' => 'setTotalNonsufficientFunds',
        'days_since_nonsufficient_funds' => 'setDaysSinceNonsufficientFunds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number_display' => 'getAccountNumberDisplay',
        'financial_institution' => 'getFinancialInstitution',
        'institution_icon' => 'getInstitutionIcon',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'account_name' => 'getAccountName',
        'account_owner' => 'getAccountOwner',
        'account_type' => 'getAccountType',
        'beginning_balance' => 'getBeginningBalance',
        'average_monthly_balance' => 'getAverageMonthlyBalance',
        'current_balance' => 'getCurrentBalance',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'total_nonsufficient_funds' => 'getTotalNonsufficientFunds',
        'days_since_nonsufficient_funds' => 'getDaysSinceNonsufficientFunds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_number_display', $data ?? [], null);
        $this->setIfExists('financial_institution', $data ?? [], null);
        $this->setIfExists('institution_icon', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_owner', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('beginning_balance', $data ?? [], null);
        $this->setIfExists('average_monthly_balance', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('total_nonsufficient_funds', $data ?? [], null);
        $this->setIfExists('days_since_nonsufficient_funds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_number_display'] === null) {
            $invalidProperties[] = "'account_number_display' can't be null";
        }
        if ($this->container['financial_institution'] === null) {
            $invalidProperties[] = "'financial_institution' can't be null";
        }
        if ($this->container['institution_icon'] === null) {
            $invalidProperties[] = "'institution_icon' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['account_owner'] === null) {
            $invalidProperties[] = "'account_owner' can't be null";
        }
        if ($this->container['account_type'] === null) {
            $invalidProperties[] = "'account_type' can't be null";
        }
        if ($this->container['beginning_balance'] === null) {
            $invalidProperties[] = "'beginning_balance' can't be null";
        }
        if ($this->container['average_monthly_balance'] === null) {
            $invalidProperties[] = "'average_monthly_balance' can't be null";
        }
        if ($this->container['current_balance'] === null) {
            $invalidProperties[] = "'current_balance' can't be null";
        }
        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['days_since_nonsufficient_funds'] === null) {
            $invalidProperties[] = "'days_since_nonsufficient_funds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number_display
     *
     * @return string
     */
    public function getAccountNumberDisplay()
    {
        return $this->container['account_number_display'];
    }

    /**
     * Sets account_number_display
     *
     * @param string $account_number_display Last four digits of the account
     *
     * @return self
     */
    public function setAccountNumberDisplay($account_number_display)
    {
        if (is_null($account_number_display)) {
            throw new \InvalidArgumentException('non-nullable account_number_display cannot be null');
        }
        $this->container['account_number_display'] = $account_number_display;

        return $this;
    }

    /**
     * Gets financial_institution
     *
     * @return string
     */
    public function getFinancialInstitution()
    {
        return $this->container['financial_institution'];
    }

    /**
     * Sets financial_institution
     *
     * @param string $financial_institution Name of the account's institution
     *
     * @return self
     */
    public function setFinancialInstitution($financial_institution)
    {
        if (is_null($financial_institution)) {
            throw new \InvalidArgumentException('non-nullable financial_institution cannot be null');
        }
        $this->container['financial_institution'] = $financial_institution;

        return $this;
    }

    /**
     * Gets institution_icon
     *
     * @return string
     */
    public function getInstitutionIcon()
    {
        return $this->container['institution_icon'];
    }

    /**
     * Sets institution_icon
     *
     * @param string $institution_icon URL of institution icon
     *
     * @return self
     */
    public function setInstitutionIcon($institution_icon)
    {
        if (is_null($institution_icon)) {
            throw new \InvalidArgumentException('non-nullable institution_icon cannot be null');
        }
        $this->container['institution_icon'] = $institution_icon;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency A currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status An account status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name The account name from the institution
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return \OpenAPI\Client\Model\PaymentHistoryAccountSummaryAccountOwner
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param \OpenAPI\Client\Model\PaymentHistoryAccountSummaryAccountOwner $account_owner account_owner
     *
     * @return self
     */
    public function setAccountOwner($account_owner)
    {
        if (is_null($account_owner)) {
            throw new \InvalidArgumentException('non-nullable account_owner cannot be null');
        }
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets beginning_balance
     *
     * @return float
     */
    public function getBeginningBalance()
    {
        return $this->container['beginning_balance'];
    }

    /**
     * Sets beginning_balance
     *
     * @param float $beginning_balance Beginning balance of account
     *
     * @return self
     */
    public function setBeginningBalance($beginning_balance)
    {
        if (is_null($beginning_balance)) {
            throw new \InvalidArgumentException('non-nullable beginning_balance cannot be null');
        }
        $this->container['beginning_balance'] = $beginning_balance;

        return $this;
    }

    /**
     * Gets average_monthly_balance
     *
     * @return float
     */
    public function getAverageMonthlyBalance()
    {
        return $this->container['average_monthly_balance'];
    }

    /**
     * Sets average_monthly_balance
     *
     * @param float $average_monthly_balance Monthly average balance of account
     *
     * @return self
     */
    public function setAverageMonthlyBalance($average_monthly_balance)
    {
        if (is_null($average_monthly_balance)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_balance cannot be null');
        }
        $this->container['average_monthly_balance'] = $average_monthly_balance;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return float
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param float $current_balance Current balance of account
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return string
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param string $begin_date Begin date of account
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End date of account
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets total_nonsufficient_funds
     *
     * @return float|null
     */
    public function getTotalNonsufficientFunds()
    {
        return $this->container['total_nonsufficient_funds'];
    }

    /**
     * Sets total_nonsufficient_funds
     *
     * @param float|null $total_nonsufficient_funds Total of NSF transactions in this account
     *
     * @return self
     */
    public function setTotalNonsufficientFunds($total_nonsufficient_funds)
    {
        if (is_null($total_nonsufficient_funds)) {
            throw new \InvalidArgumentException('non-nullable total_nonsufficient_funds cannot be null');
        }
        $this->container['total_nonsufficient_funds'] = $total_nonsufficient_funds;

        return $this;
    }

    /**
     * Gets days_since_nonsufficient_funds
     *
     * @return int
     */
    public function getDaysSinceNonsufficientFunds()
    {
        return $this->container['days_since_nonsufficient_funds'];
    }

    /**
     * Sets days_since_nonsufficient_funds
     *
     * @param int $days_since_nonsufficient_funds Days since the latest NSF transaction for this account
     *
     * @return self
     */
    public function setDaysSinceNonsufficientFunds($days_since_nonsufficient_funds)
    {
        if (is_null($days_since_nonsufficient_funds)) {
            throw new \InvalidArgumentException('non-nullable days_since_nonsufficient_funds cannot be null');
        }
        $this->container['days_since_nonsufficient_funds'] = $days_since_nonsufficient_funds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


