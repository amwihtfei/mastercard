<?php
/**
 * CustomerAccountDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerAccountDetail Class Doc Comment
 *
 * @category Class
 * @description Additional customer account details. Not all data points will return for each account type. You can see the account type that each data point will return for in descriptions. The data point are also subject to availability by the institution.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerAccountDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerAccountDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_as_of' => 'int',
        'available_balance_amount' => 'float',
        'open_date' => 'int',
        'period_start_date' => 'int',
        'period_end_date' => 'int',
        'period_interest_rate' => 'float',
        'period_deposit_amount' => 'float',
        'period_interest_amount' => 'float',
        'interest_ytd_amount' => 'float',
        'interest_prior_ytd_amount' => 'float',
        'maturity_date' => 'int',
        'interest_rate' => 'string',
        'credit_available_amount' => 'float',
        'credit_max_amount' => 'float',
        'cash_advance_available_amount' => 'float',
        'cash_advance_max_amount' => 'float',
        'cash_advance_balance' => 'float',
        'cash_advance_interest_rate' => 'float',
        'current_balance' => 'float',
        'payment_min_amount' => 'float',
        'payment_due_date' => 'int',
        'previous_balance' => 'float',
        'statement_start_date' => 'int',
        'statement_end_date' => 'int',
        'statement_purchase_amount' => 'float',
        'statement_finance_amount' => 'float',
        'statement_credit_amount' => 'float',
        'reward_earned_balance' => 'int',
        'past_due_amount' => 'float',
        'last_payment_amount' => 'float',
        'last_payment_date' => 'int',
        'statement_close_balance' => 'float',
        'term_of_ml' => 'string',
        'ml_holder_name' => 'string',
        'description' => 'string',
        'late_fee_amount' => 'float',
        'payoff_amount' => 'float',
        'payoff_amount_date' => 'int',
        'original_maturity_date' => 'int',
        'principal_balance' => 'float',
        'escrow_balance' => 'float',
        'interest_period' => 'string',
        'initial_ml_amount' => 'float',
        'initial_ml_date' => 'int',
        'next_payment_principal_amount' => 'float',
        'next_payment_interest_amount' => 'float',
        'next_payment' => 'float',
        'next_payment_date' => 'int',
        'last_payment_due_date' => 'int',
        'last_payment_receive_date' => 'int',
        'last_payment_principal_amount' => 'float',
        'last_payment_interest_amount' => 'float',
        'last_payment_escrow_amount' => 'float',
        'last_payment_last_fee_amount' => 'float',
        'last_payment_late_charge' => 'float',
        'ytd_principal_paid' => 'float',
        'ytd_interest_paid' => 'float',
        'ytd_insurance_paid' => 'float',
        'ytd_tax_paid' => 'float',
        'auto_pay_enrolled' => 'bool',
        'margin_allowed' => 'bool',
        'cash_account_allowed' => 'bool',
        'collateral' => 'string',
        'current_school' => 'string',
        'first_payment_date' => 'int',
        'first_mortgage' => 'bool',
        'loan_payment_freq' => 'string',
        'original_school' => 'string',
        'recurring_payment_amount' => 'float',
        'lender' => 'string',
        'ending_balance_amount' => 'float',
        'loan_term_type' => 'string',
        'payments_made' => 'int',
        'balloon_amount' => 'float',
        'projected_interest' => 'float',
        'interest_paid_ltd' => 'float',
        'interest_rate_type' => 'string',
        'loan_payment_type' => 'string',
        'repayment_plan' => 'string',
        'payments_remaining' => 'int',
        'margin_balance' => 'float',
        'short_balance' => 'float',
        'available_cash_balance' => 'float',
        'maturity_value_amount' => 'float',
        'vested_balance' => 'float',
        'emp_match_amount' => 'float',
        'emp_pretax_contrib_amount' => 'float',
        'emp_pretax_contrib_amount_ytd' => 'float',
        'contrib_total_ytd' => 'float',
        'cash_balance_amount' => 'float',
        'pre_tax_amount' => 'float',
        'after_tax_amount' => 'float',
        'match_amount' => 'float',
        'profit_sharing_amount' => 'float',
        'rollover_amount' => 'float',
        'other_vest_amount' => 'float',
        'other_nonvest_amount' => 'float',
        'current_loan_balance' => 'float',
        'loan_rate' => 'float',
        'buy_power' => 'float',
        'rollover_ltd' => 'float',
        'loan_award_id' => 'string',
        'original_interest_rate' => 'float',
        'guarantor' => 'string',
        'owner' => 'string',
        'interest_subsidy_type' => 'string',
        'interest_balance' => 'float',
        'remaining_term_of_ml' => 'float',
        'initial_interest_rate' => 'float',
        'fees_balance' => 'float',
        'loan_ytd_interest_paid' => 'float',
        'loan_ytd_fees_paid' => 'float',
        'loan_ytd_principal_paid' => 'float',
        'loan_status' => 'string',
        'loan_status_start_date' => 'int',
        'loan_status_end_date' => 'int',
        'weighted_interest_rate' => 'float',
        'repayment_plan_start_date' => 'int',
        'repayment_plan_end_date' => 'int',
        'expected_payoff_date' => 'int',
        'out_of_school_date' => 'int',
        'convert_to_repayment' => 'int',
        'days_delinquent' => 'int',
        'total_principal_paid' => 'float',
        'total_interest_paid' => 'float',
        'total_amount_paid' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_as_of' => 'int64',
        'available_balance_amount' => null,
        'open_date' => 'int64',
        'period_start_date' => 'int64',
        'period_end_date' => 'int64',
        'period_interest_rate' => null,
        'period_deposit_amount' => null,
        'period_interest_amount' => null,
        'interest_ytd_amount' => null,
        'interest_prior_ytd_amount' => null,
        'maturity_date' => 'int64',
        'interest_rate' => null,
        'credit_available_amount' => null,
        'credit_max_amount' => null,
        'cash_advance_available_amount' => null,
        'cash_advance_max_amount' => null,
        'cash_advance_balance' => null,
        'cash_advance_interest_rate' => null,
        'current_balance' => null,
        'payment_min_amount' => null,
        'payment_due_date' => 'int64',
        'previous_balance' => null,
        'statement_start_date' => 'int64',
        'statement_end_date' => 'int64',
        'statement_purchase_amount' => null,
        'statement_finance_amount' => null,
        'statement_credit_amount' => null,
        'reward_earned_balance' => 'int32',
        'past_due_amount' => null,
        'last_payment_amount' => null,
        'last_payment_date' => 'int64',
        'statement_close_balance' => null,
        'term_of_ml' => null,
        'ml_holder_name' => null,
        'description' => null,
        'late_fee_amount' => null,
        'payoff_amount' => null,
        'payoff_amount_date' => 'int64',
        'original_maturity_date' => 'int64',
        'principal_balance' => null,
        'escrow_balance' => null,
        'interest_period' => null,
        'initial_ml_amount' => null,
        'initial_ml_date' => 'int64',
        'next_payment_principal_amount' => null,
        'next_payment_interest_amount' => null,
        'next_payment' => null,
        'next_payment_date' => 'int64',
        'last_payment_due_date' => 'int64',
        'last_payment_receive_date' => 'int64',
        'last_payment_principal_amount' => null,
        'last_payment_interest_amount' => null,
        'last_payment_escrow_amount' => null,
        'last_payment_last_fee_amount' => null,
        'last_payment_late_charge' => null,
        'ytd_principal_paid' => null,
        'ytd_interest_paid' => null,
        'ytd_insurance_paid' => null,
        'ytd_tax_paid' => null,
        'auto_pay_enrolled' => null,
        'margin_allowed' => null,
        'cash_account_allowed' => null,
        'collateral' => null,
        'current_school' => null,
        'first_payment_date' => 'int64',
        'first_mortgage' => null,
        'loan_payment_freq' => null,
        'original_school' => null,
        'recurring_payment_amount' => null,
        'lender' => null,
        'ending_balance_amount' => null,
        'loan_term_type' => null,
        'payments_made' => 'int32',
        'balloon_amount' => null,
        'projected_interest' => null,
        'interest_paid_ltd' => null,
        'interest_rate_type' => null,
        'loan_payment_type' => null,
        'repayment_plan' => null,
        'payments_remaining' => 'int32',
        'margin_balance' => null,
        'short_balance' => null,
        'available_cash_balance' => null,
        'maturity_value_amount' => null,
        'vested_balance' => null,
        'emp_match_amount' => null,
        'emp_pretax_contrib_amount' => null,
        'emp_pretax_contrib_amount_ytd' => null,
        'contrib_total_ytd' => null,
        'cash_balance_amount' => null,
        'pre_tax_amount' => null,
        'after_tax_amount' => null,
        'match_amount' => null,
        'profit_sharing_amount' => null,
        'rollover_amount' => null,
        'other_vest_amount' => null,
        'other_nonvest_amount' => null,
        'current_loan_balance' => null,
        'loan_rate' => null,
        'buy_power' => null,
        'rollover_ltd' => null,
        'loan_award_id' => null,
        'original_interest_rate' => null,
        'guarantor' => null,
        'owner' => null,
        'interest_subsidy_type' => null,
        'interest_balance' => null,
        'remaining_term_of_ml' => null,
        'initial_interest_rate' => null,
        'fees_balance' => null,
        'loan_ytd_interest_paid' => null,
        'loan_ytd_fees_paid' => null,
        'loan_ytd_principal_paid' => null,
        'loan_status' => null,
        'loan_status_start_date' => 'int64',
        'loan_status_end_date' => 'int64',
        'weighted_interest_rate' => null,
        'repayment_plan_start_date' => 'int64',
        'repayment_plan_end_date' => 'int64',
        'expected_payoff_date' => 'int64',
        'out_of_school_date' => 'int64',
        'convert_to_repayment' => 'int64',
        'days_delinquent' => 'int32',
        'total_principal_paid' => null,
        'total_interest_paid' => null,
        'total_amount_paid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_as_of' => false,
        'available_balance_amount' => false,
        'open_date' => false,
        'period_start_date' => false,
        'period_end_date' => false,
        'period_interest_rate' => false,
        'period_deposit_amount' => false,
        'period_interest_amount' => false,
        'interest_ytd_amount' => false,
        'interest_prior_ytd_amount' => false,
        'maturity_date' => false,
        'interest_rate' => false,
        'credit_available_amount' => false,
        'credit_max_amount' => false,
        'cash_advance_available_amount' => false,
        'cash_advance_max_amount' => false,
        'cash_advance_balance' => false,
        'cash_advance_interest_rate' => false,
        'current_balance' => false,
        'payment_min_amount' => false,
        'payment_due_date' => false,
        'previous_balance' => false,
        'statement_start_date' => false,
        'statement_end_date' => false,
        'statement_purchase_amount' => false,
        'statement_finance_amount' => false,
        'statement_credit_amount' => false,
        'reward_earned_balance' => false,
        'past_due_amount' => false,
        'last_payment_amount' => false,
        'last_payment_date' => false,
        'statement_close_balance' => false,
        'term_of_ml' => false,
        'ml_holder_name' => false,
        'description' => false,
        'late_fee_amount' => false,
        'payoff_amount' => false,
        'payoff_amount_date' => false,
        'original_maturity_date' => false,
        'principal_balance' => false,
        'escrow_balance' => false,
        'interest_period' => false,
        'initial_ml_amount' => false,
        'initial_ml_date' => false,
        'next_payment_principal_amount' => false,
        'next_payment_interest_amount' => false,
        'next_payment' => false,
        'next_payment_date' => false,
        'last_payment_due_date' => false,
        'last_payment_receive_date' => false,
        'last_payment_principal_amount' => false,
        'last_payment_interest_amount' => false,
        'last_payment_escrow_amount' => false,
        'last_payment_last_fee_amount' => false,
        'last_payment_late_charge' => false,
        'ytd_principal_paid' => false,
        'ytd_interest_paid' => false,
        'ytd_insurance_paid' => false,
        'ytd_tax_paid' => false,
        'auto_pay_enrolled' => false,
        'margin_allowed' => false,
        'cash_account_allowed' => false,
        'collateral' => false,
        'current_school' => false,
        'first_payment_date' => false,
        'first_mortgage' => false,
        'loan_payment_freq' => false,
        'original_school' => false,
        'recurring_payment_amount' => false,
        'lender' => false,
        'ending_balance_amount' => false,
        'loan_term_type' => false,
        'payments_made' => false,
        'balloon_amount' => false,
        'projected_interest' => false,
        'interest_paid_ltd' => false,
        'interest_rate_type' => false,
        'loan_payment_type' => false,
        'repayment_plan' => false,
        'payments_remaining' => false,
        'margin_balance' => false,
        'short_balance' => false,
        'available_cash_balance' => false,
        'maturity_value_amount' => false,
        'vested_balance' => false,
        'emp_match_amount' => false,
        'emp_pretax_contrib_amount' => false,
        'emp_pretax_contrib_amount_ytd' => false,
        'contrib_total_ytd' => false,
        'cash_balance_amount' => false,
        'pre_tax_amount' => false,
        'after_tax_amount' => false,
        'match_amount' => false,
        'profit_sharing_amount' => false,
        'rollover_amount' => false,
        'other_vest_amount' => false,
        'other_nonvest_amount' => false,
        'current_loan_balance' => false,
        'loan_rate' => false,
        'buy_power' => false,
        'rollover_ltd' => false,
        'loan_award_id' => false,
        'original_interest_rate' => false,
        'guarantor' => false,
        'owner' => false,
        'interest_subsidy_type' => false,
        'interest_balance' => false,
        'remaining_term_of_ml' => false,
        'initial_interest_rate' => false,
        'fees_balance' => false,
        'loan_ytd_interest_paid' => false,
        'loan_ytd_fees_paid' => false,
        'loan_ytd_principal_paid' => false,
        'loan_status' => false,
        'loan_status_start_date' => false,
        'loan_status_end_date' => false,
        'weighted_interest_rate' => false,
        'repayment_plan_start_date' => false,
        'repayment_plan_end_date' => false,
        'expected_payoff_date' => false,
        'out_of_school_date' => false,
        'convert_to_repayment' => false,
        'days_delinquent' => false,
        'total_principal_paid' => false,
        'total_interest_paid' => false,
        'total_amount_paid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_as_of' => 'dateAsOf',
        'available_balance_amount' => 'availableBalanceAmount',
        'open_date' => 'openDate',
        'period_start_date' => 'periodStartDate',
        'period_end_date' => 'periodEndDate',
        'period_interest_rate' => 'periodInterestRate',
        'period_deposit_amount' => 'periodDepositAmount',
        'period_interest_amount' => 'periodInterestAmount',
        'interest_ytd_amount' => 'interestYtdAmount',
        'interest_prior_ytd_amount' => 'interestPriorYtdAmount',
        'maturity_date' => 'maturityDate',
        'interest_rate' => 'interestRate',
        'credit_available_amount' => 'creditAvailableAmount',
        'credit_max_amount' => 'creditMaxAmount',
        'cash_advance_available_amount' => 'cashAdvanceAvailableAmount',
        'cash_advance_max_amount' => 'cashAdvanceMaxAmount',
        'cash_advance_balance' => 'cashAdvanceBalance',
        'cash_advance_interest_rate' => 'cashAdvanceInterestRate',
        'current_balance' => 'currentBalance',
        'payment_min_amount' => 'paymentMinAmount',
        'payment_due_date' => 'paymentDueDate',
        'previous_balance' => 'previousBalance',
        'statement_start_date' => 'statementStartDate',
        'statement_end_date' => 'statementEndDate',
        'statement_purchase_amount' => 'statementPurchaseAmount',
        'statement_finance_amount' => 'statementFinanceAmount',
        'statement_credit_amount' => 'statementCreditAmount',
        'reward_earned_balance' => 'rewardEarnedBalance',
        'past_due_amount' => 'pastDueAmount',
        'last_payment_amount' => 'lastPaymentAmount',
        'last_payment_date' => 'lastPaymentDate',
        'statement_close_balance' => 'statementCloseBalance',
        'term_of_ml' => 'termOfMl',
        'ml_holder_name' => 'mlHolderName',
        'description' => 'description',
        'late_fee_amount' => 'lateFeeAmount',
        'payoff_amount' => 'payoffAmount',
        'payoff_amount_date' => 'payoffAmountDate',
        'original_maturity_date' => 'originalMaturityDate',
        'principal_balance' => 'principalBalance',
        'escrow_balance' => 'escrowBalance',
        'interest_period' => 'interestPeriod',
        'initial_ml_amount' => 'initialMlAmount',
        'initial_ml_date' => 'initialMlDate',
        'next_payment_principal_amount' => 'nextPaymentPrincipalAmount',
        'next_payment_interest_amount' => 'nextPaymentInterestAmount',
        'next_payment' => 'nextPayment',
        'next_payment_date' => 'nextPaymentDate',
        'last_payment_due_date' => 'lastPaymentDueDate',
        'last_payment_receive_date' => 'lastPaymentReceiveDate',
        'last_payment_principal_amount' => 'lastPaymentPrincipalAmount',
        'last_payment_interest_amount' => 'lastPaymentInterestAmount',
        'last_payment_escrow_amount' => 'lastPaymentEscrowAmount',
        'last_payment_last_fee_amount' => 'lastPaymentLastFeeAmount',
        'last_payment_late_charge' => 'lastPaymentLateCharge',
        'ytd_principal_paid' => 'ytdPrincipalPaid',
        'ytd_interest_paid' => 'ytdInterestPaid',
        'ytd_insurance_paid' => 'ytdInsurancePaid',
        'ytd_tax_paid' => 'ytdTaxPaid',
        'auto_pay_enrolled' => 'autoPayEnrolled',
        'margin_allowed' => 'marginAllowed',
        'cash_account_allowed' => 'cashAccountAllowed',
        'collateral' => 'collateral',
        'current_school' => 'currentSchool',
        'first_payment_date' => 'firstPaymentDate',
        'first_mortgage' => 'firstMortgage',
        'loan_payment_freq' => 'loanPaymentFreq',
        'original_school' => 'originalSchool',
        'recurring_payment_amount' => 'recurringPaymentAmount',
        'lender' => 'lender',
        'ending_balance_amount' => 'endingBalanceAmount',
        'loan_term_type' => 'loanTermType',
        'payments_made' => 'paymentsMade',
        'balloon_amount' => 'balloonAmount',
        'projected_interest' => 'projectedInterest',
        'interest_paid_ltd' => 'interestPaidLtd',
        'interest_rate_type' => 'interestRateType',
        'loan_payment_type' => 'loanPaymentType',
        'repayment_plan' => 'repaymentPlan',
        'payments_remaining' => 'paymentsRemaining',
        'margin_balance' => 'marginBalance',
        'short_balance' => 'shortBalance',
        'available_cash_balance' => 'availableCashBalance',
        'maturity_value_amount' => 'maturityValueAmount',
        'vested_balance' => 'vestedBalance',
        'emp_match_amount' => 'empMatchAmount',
        'emp_pretax_contrib_amount' => 'empPretaxContribAmount',
        'emp_pretax_contrib_amount_ytd' => 'empPretaxContribAmountYtd',
        'contrib_total_ytd' => 'contribTotalYtd',
        'cash_balance_amount' => 'cashBalanceAmount',
        'pre_tax_amount' => 'preTaxAmount',
        'after_tax_amount' => 'afterTaxAmount',
        'match_amount' => 'matchAmount',
        'profit_sharing_amount' => 'profitSharingAmount',
        'rollover_amount' => 'rolloverAmount',
        'other_vest_amount' => 'otherVestAmount',
        'other_nonvest_amount' => 'otherNonvestAmount',
        'current_loan_balance' => 'currentLoanBalance',
        'loan_rate' => 'loanRate',
        'buy_power' => 'buyPower',
        'rollover_ltd' => 'rolloverLtd',
        'loan_award_id' => 'loanAwardId',
        'original_interest_rate' => 'originalInterestRate',
        'guarantor' => 'guarantor',
        'owner' => 'owner',
        'interest_subsidy_type' => 'interestSubsidyType',
        'interest_balance' => 'interestBalance',
        'remaining_term_of_ml' => 'remainingTermOfMl',
        'initial_interest_rate' => 'initialInterestRate',
        'fees_balance' => 'feesBalance',
        'loan_ytd_interest_paid' => 'loanYtdInterestPaid',
        'loan_ytd_fees_paid' => 'loanYtdFeesPaid',
        'loan_ytd_principal_paid' => 'loanYtdPrincipalPaid',
        'loan_status' => 'loanStatus',
        'loan_status_start_date' => 'loanStatusStartDate',
        'loan_status_end_date' => 'loanStatusEndDate',
        'weighted_interest_rate' => 'weightedInterestRate',
        'repayment_plan_start_date' => 'repaymentPlanStartDate',
        'repayment_plan_end_date' => 'repaymentPlanEndDate',
        'expected_payoff_date' => 'expectedPayoffDate',
        'out_of_school_date' => 'outOfSchoolDate',
        'convert_to_repayment' => 'convertToRepayment',
        'days_delinquent' => 'daysDelinquent',
        'total_principal_paid' => 'totalPrincipalPaid',
        'total_interest_paid' => 'totalInterestPaid',
        'total_amount_paid' => 'totalAmountPaid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_as_of' => 'setDateAsOf',
        'available_balance_amount' => 'setAvailableBalanceAmount',
        'open_date' => 'setOpenDate',
        'period_start_date' => 'setPeriodStartDate',
        'period_end_date' => 'setPeriodEndDate',
        'period_interest_rate' => 'setPeriodInterestRate',
        'period_deposit_amount' => 'setPeriodDepositAmount',
        'period_interest_amount' => 'setPeriodInterestAmount',
        'interest_ytd_amount' => 'setInterestYtdAmount',
        'interest_prior_ytd_amount' => 'setInterestPriorYtdAmount',
        'maturity_date' => 'setMaturityDate',
        'interest_rate' => 'setInterestRate',
        'credit_available_amount' => 'setCreditAvailableAmount',
        'credit_max_amount' => 'setCreditMaxAmount',
        'cash_advance_available_amount' => 'setCashAdvanceAvailableAmount',
        'cash_advance_max_amount' => 'setCashAdvanceMaxAmount',
        'cash_advance_balance' => 'setCashAdvanceBalance',
        'cash_advance_interest_rate' => 'setCashAdvanceInterestRate',
        'current_balance' => 'setCurrentBalance',
        'payment_min_amount' => 'setPaymentMinAmount',
        'payment_due_date' => 'setPaymentDueDate',
        'previous_balance' => 'setPreviousBalance',
        'statement_start_date' => 'setStatementStartDate',
        'statement_end_date' => 'setStatementEndDate',
        'statement_purchase_amount' => 'setStatementPurchaseAmount',
        'statement_finance_amount' => 'setStatementFinanceAmount',
        'statement_credit_amount' => 'setStatementCreditAmount',
        'reward_earned_balance' => 'setRewardEarnedBalance',
        'past_due_amount' => 'setPastDueAmount',
        'last_payment_amount' => 'setLastPaymentAmount',
        'last_payment_date' => 'setLastPaymentDate',
        'statement_close_balance' => 'setStatementCloseBalance',
        'term_of_ml' => 'setTermOfMl',
        'ml_holder_name' => 'setMlHolderName',
        'description' => 'setDescription',
        'late_fee_amount' => 'setLateFeeAmount',
        'payoff_amount' => 'setPayoffAmount',
        'payoff_amount_date' => 'setPayoffAmountDate',
        'original_maturity_date' => 'setOriginalMaturityDate',
        'principal_balance' => 'setPrincipalBalance',
        'escrow_balance' => 'setEscrowBalance',
        'interest_period' => 'setInterestPeriod',
        'initial_ml_amount' => 'setInitialMlAmount',
        'initial_ml_date' => 'setInitialMlDate',
        'next_payment_principal_amount' => 'setNextPaymentPrincipalAmount',
        'next_payment_interest_amount' => 'setNextPaymentInterestAmount',
        'next_payment' => 'setNextPayment',
        'next_payment_date' => 'setNextPaymentDate',
        'last_payment_due_date' => 'setLastPaymentDueDate',
        'last_payment_receive_date' => 'setLastPaymentReceiveDate',
        'last_payment_principal_amount' => 'setLastPaymentPrincipalAmount',
        'last_payment_interest_amount' => 'setLastPaymentInterestAmount',
        'last_payment_escrow_amount' => 'setLastPaymentEscrowAmount',
        'last_payment_last_fee_amount' => 'setLastPaymentLastFeeAmount',
        'last_payment_late_charge' => 'setLastPaymentLateCharge',
        'ytd_principal_paid' => 'setYtdPrincipalPaid',
        'ytd_interest_paid' => 'setYtdInterestPaid',
        'ytd_insurance_paid' => 'setYtdInsurancePaid',
        'ytd_tax_paid' => 'setYtdTaxPaid',
        'auto_pay_enrolled' => 'setAutoPayEnrolled',
        'margin_allowed' => 'setMarginAllowed',
        'cash_account_allowed' => 'setCashAccountAllowed',
        'collateral' => 'setCollateral',
        'current_school' => 'setCurrentSchool',
        'first_payment_date' => 'setFirstPaymentDate',
        'first_mortgage' => 'setFirstMortgage',
        'loan_payment_freq' => 'setLoanPaymentFreq',
        'original_school' => 'setOriginalSchool',
        'recurring_payment_amount' => 'setRecurringPaymentAmount',
        'lender' => 'setLender',
        'ending_balance_amount' => 'setEndingBalanceAmount',
        'loan_term_type' => 'setLoanTermType',
        'payments_made' => 'setPaymentsMade',
        'balloon_amount' => 'setBalloonAmount',
        'projected_interest' => 'setProjectedInterest',
        'interest_paid_ltd' => 'setInterestPaidLtd',
        'interest_rate_type' => 'setInterestRateType',
        'loan_payment_type' => 'setLoanPaymentType',
        'repayment_plan' => 'setRepaymentPlan',
        'payments_remaining' => 'setPaymentsRemaining',
        'margin_balance' => 'setMarginBalance',
        'short_balance' => 'setShortBalance',
        'available_cash_balance' => 'setAvailableCashBalance',
        'maturity_value_amount' => 'setMaturityValueAmount',
        'vested_balance' => 'setVestedBalance',
        'emp_match_amount' => 'setEmpMatchAmount',
        'emp_pretax_contrib_amount' => 'setEmpPretaxContribAmount',
        'emp_pretax_contrib_amount_ytd' => 'setEmpPretaxContribAmountYtd',
        'contrib_total_ytd' => 'setContribTotalYtd',
        'cash_balance_amount' => 'setCashBalanceAmount',
        'pre_tax_amount' => 'setPreTaxAmount',
        'after_tax_amount' => 'setAfterTaxAmount',
        'match_amount' => 'setMatchAmount',
        'profit_sharing_amount' => 'setProfitSharingAmount',
        'rollover_amount' => 'setRolloverAmount',
        'other_vest_amount' => 'setOtherVestAmount',
        'other_nonvest_amount' => 'setOtherNonvestAmount',
        'current_loan_balance' => 'setCurrentLoanBalance',
        'loan_rate' => 'setLoanRate',
        'buy_power' => 'setBuyPower',
        'rollover_ltd' => 'setRolloverLtd',
        'loan_award_id' => 'setLoanAwardId',
        'original_interest_rate' => 'setOriginalInterestRate',
        'guarantor' => 'setGuarantor',
        'owner' => 'setOwner',
        'interest_subsidy_type' => 'setInterestSubsidyType',
        'interest_balance' => 'setInterestBalance',
        'remaining_term_of_ml' => 'setRemainingTermOfMl',
        'initial_interest_rate' => 'setInitialInterestRate',
        'fees_balance' => 'setFeesBalance',
        'loan_ytd_interest_paid' => 'setLoanYtdInterestPaid',
        'loan_ytd_fees_paid' => 'setLoanYtdFeesPaid',
        'loan_ytd_principal_paid' => 'setLoanYtdPrincipalPaid',
        'loan_status' => 'setLoanStatus',
        'loan_status_start_date' => 'setLoanStatusStartDate',
        'loan_status_end_date' => 'setLoanStatusEndDate',
        'weighted_interest_rate' => 'setWeightedInterestRate',
        'repayment_plan_start_date' => 'setRepaymentPlanStartDate',
        'repayment_plan_end_date' => 'setRepaymentPlanEndDate',
        'expected_payoff_date' => 'setExpectedPayoffDate',
        'out_of_school_date' => 'setOutOfSchoolDate',
        'convert_to_repayment' => 'setConvertToRepayment',
        'days_delinquent' => 'setDaysDelinquent',
        'total_principal_paid' => 'setTotalPrincipalPaid',
        'total_interest_paid' => 'setTotalInterestPaid',
        'total_amount_paid' => 'setTotalAmountPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_as_of' => 'getDateAsOf',
        'available_balance_amount' => 'getAvailableBalanceAmount',
        'open_date' => 'getOpenDate',
        'period_start_date' => 'getPeriodStartDate',
        'period_end_date' => 'getPeriodEndDate',
        'period_interest_rate' => 'getPeriodInterestRate',
        'period_deposit_amount' => 'getPeriodDepositAmount',
        'period_interest_amount' => 'getPeriodInterestAmount',
        'interest_ytd_amount' => 'getInterestYtdAmount',
        'interest_prior_ytd_amount' => 'getInterestPriorYtdAmount',
        'maturity_date' => 'getMaturityDate',
        'interest_rate' => 'getInterestRate',
        'credit_available_amount' => 'getCreditAvailableAmount',
        'credit_max_amount' => 'getCreditMaxAmount',
        'cash_advance_available_amount' => 'getCashAdvanceAvailableAmount',
        'cash_advance_max_amount' => 'getCashAdvanceMaxAmount',
        'cash_advance_balance' => 'getCashAdvanceBalance',
        'cash_advance_interest_rate' => 'getCashAdvanceInterestRate',
        'current_balance' => 'getCurrentBalance',
        'payment_min_amount' => 'getPaymentMinAmount',
        'payment_due_date' => 'getPaymentDueDate',
        'previous_balance' => 'getPreviousBalance',
        'statement_start_date' => 'getStatementStartDate',
        'statement_end_date' => 'getStatementEndDate',
        'statement_purchase_amount' => 'getStatementPurchaseAmount',
        'statement_finance_amount' => 'getStatementFinanceAmount',
        'statement_credit_amount' => 'getStatementCreditAmount',
        'reward_earned_balance' => 'getRewardEarnedBalance',
        'past_due_amount' => 'getPastDueAmount',
        'last_payment_amount' => 'getLastPaymentAmount',
        'last_payment_date' => 'getLastPaymentDate',
        'statement_close_balance' => 'getStatementCloseBalance',
        'term_of_ml' => 'getTermOfMl',
        'ml_holder_name' => 'getMlHolderName',
        'description' => 'getDescription',
        'late_fee_amount' => 'getLateFeeAmount',
        'payoff_amount' => 'getPayoffAmount',
        'payoff_amount_date' => 'getPayoffAmountDate',
        'original_maturity_date' => 'getOriginalMaturityDate',
        'principal_balance' => 'getPrincipalBalance',
        'escrow_balance' => 'getEscrowBalance',
        'interest_period' => 'getInterestPeriod',
        'initial_ml_amount' => 'getInitialMlAmount',
        'initial_ml_date' => 'getInitialMlDate',
        'next_payment_principal_amount' => 'getNextPaymentPrincipalAmount',
        'next_payment_interest_amount' => 'getNextPaymentInterestAmount',
        'next_payment' => 'getNextPayment',
        'next_payment_date' => 'getNextPaymentDate',
        'last_payment_due_date' => 'getLastPaymentDueDate',
        'last_payment_receive_date' => 'getLastPaymentReceiveDate',
        'last_payment_principal_amount' => 'getLastPaymentPrincipalAmount',
        'last_payment_interest_amount' => 'getLastPaymentInterestAmount',
        'last_payment_escrow_amount' => 'getLastPaymentEscrowAmount',
        'last_payment_last_fee_amount' => 'getLastPaymentLastFeeAmount',
        'last_payment_late_charge' => 'getLastPaymentLateCharge',
        'ytd_principal_paid' => 'getYtdPrincipalPaid',
        'ytd_interest_paid' => 'getYtdInterestPaid',
        'ytd_insurance_paid' => 'getYtdInsurancePaid',
        'ytd_tax_paid' => 'getYtdTaxPaid',
        'auto_pay_enrolled' => 'getAutoPayEnrolled',
        'margin_allowed' => 'getMarginAllowed',
        'cash_account_allowed' => 'getCashAccountAllowed',
        'collateral' => 'getCollateral',
        'current_school' => 'getCurrentSchool',
        'first_payment_date' => 'getFirstPaymentDate',
        'first_mortgage' => 'getFirstMortgage',
        'loan_payment_freq' => 'getLoanPaymentFreq',
        'original_school' => 'getOriginalSchool',
        'recurring_payment_amount' => 'getRecurringPaymentAmount',
        'lender' => 'getLender',
        'ending_balance_amount' => 'getEndingBalanceAmount',
        'loan_term_type' => 'getLoanTermType',
        'payments_made' => 'getPaymentsMade',
        'balloon_amount' => 'getBalloonAmount',
        'projected_interest' => 'getProjectedInterest',
        'interest_paid_ltd' => 'getInterestPaidLtd',
        'interest_rate_type' => 'getInterestRateType',
        'loan_payment_type' => 'getLoanPaymentType',
        'repayment_plan' => 'getRepaymentPlan',
        'payments_remaining' => 'getPaymentsRemaining',
        'margin_balance' => 'getMarginBalance',
        'short_balance' => 'getShortBalance',
        'available_cash_balance' => 'getAvailableCashBalance',
        'maturity_value_amount' => 'getMaturityValueAmount',
        'vested_balance' => 'getVestedBalance',
        'emp_match_amount' => 'getEmpMatchAmount',
        'emp_pretax_contrib_amount' => 'getEmpPretaxContribAmount',
        'emp_pretax_contrib_amount_ytd' => 'getEmpPretaxContribAmountYtd',
        'contrib_total_ytd' => 'getContribTotalYtd',
        'cash_balance_amount' => 'getCashBalanceAmount',
        'pre_tax_amount' => 'getPreTaxAmount',
        'after_tax_amount' => 'getAfterTaxAmount',
        'match_amount' => 'getMatchAmount',
        'profit_sharing_amount' => 'getProfitSharingAmount',
        'rollover_amount' => 'getRolloverAmount',
        'other_vest_amount' => 'getOtherVestAmount',
        'other_nonvest_amount' => 'getOtherNonvestAmount',
        'current_loan_balance' => 'getCurrentLoanBalance',
        'loan_rate' => 'getLoanRate',
        'buy_power' => 'getBuyPower',
        'rollover_ltd' => 'getRolloverLtd',
        'loan_award_id' => 'getLoanAwardId',
        'original_interest_rate' => 'getOriginalInterestRate',
        'guarantor' => 'getGuarantor',
        'owner' => 'getOwner',
        'interest_subsidy_type' => 'getInterestSubsidyType',
        'interest_balance' => 'getInterestBalance',
        'remaining_term_of_ml' => 'getRemainingTermOfMl',
        'initial_interest_rate' => 'getInitialInterestRate',
        'fees_balance' => 'getFeesBalance',
        'loan_ytd_interest_paid' => 'getLoanYtdInterestPaid',
        'loan_ytd_fees_paid' => 'getLoanYtdFeesPaid',
        'loan_ytd_principal_paid' => 'getLoanYtdPrincipalPaid',
        'loan_status' => 'getLoanStatus',
        'loan_status_start_date' => 'getLoanStatusStartDate',
        'loan_status_end_date' => 'getLoanStatusEndDate',
        'weighted_interest_rate' => 'getWeightedInterestRate',
        'repayment_plan_start_date' => 'getRepaymentPlanStartDate',
        'repayment_plan_end_date' => 'getRepaymentPlanEndDate',
        'expected_payoff_date' => 'getExpectedPayoffDate',
        'out_of_school_date' => 'getOutOfSchoolDate',
        'convert_to_repayment' => 'getConvertToRepayment',
        'days_delinquent' => 'getDaysDelinquent',
        'total_principal_paid' => 'getTotalPrincipalPaid',
        'total_interest_paid' => 'getTotalInterestPaid',
        'total_amount_paid' => 'getTotalAmountPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date_as_of', $data ?? [], null);
        $this->setIfExists('available_balance_amount', $data ?? [], null);
        $this->setIfExists('open_date', $data ?? [], null);
        $this->setIfExists('period_start_date', $data ?? [], null);
        $this->setIfExists('period_end_date', $data ?? [], null);
        $this->setIfExists('period_interest_rate', $data ?? [], null);
        $this->setIfExists('period_deposit_amount', $data ?? [], null);
        $this->setIfExists('period_interest_amount', $data ?? [], null);
        $this->setIfExists('interest_ytd_amount', $data ?? [], null);
        $this->setIfExists('interest_prior_ytd_amount', $data ?? [], null);
        $this->setIfExists('maturity_date', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('credit_available_amount', $data ?? [], null);
        $this->setIfExists('credit_max_amount', $data ?? [], null);
        $this->setIfExists('cash_advance_available_amount', $data ?? [], null);
        $this->setIfExists('cash_advance_max_amount', $data ?? [], null);
        $this->setIfExists('cash_advance_balance', $data ?? [], null);
        $this->setIfExists('cash_advance_interest_rate', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('payment_min_amount', $data ?? [], null);
        $this->setIfExists('payment_due_date', $data ?? [], null);
        $this->setIfExists('previous_balance', $data ?? [], null);
        $this->setIfExists('statement_start_date', $data ?? [], null);
        $this->setIfExists('statement_end_date', $data ?? [], null);
        $this->setIfExists('statement_purchase_amount', $data ?? [], null);
        $this->setIfExists('statement_finance_amount', $data ?? [], null);
        $this->setIfExists('statement_credit_amount', $data ?? [], null);
        $this->setIfExists('reward_earned_balance', $data ?? [], null);
        $this->setIfExists('past_due_amount', $data ?? [], null);
        $this->setIfExists('last_payment_amount', $data ?? [], null);
        $this->setIfExists('last_payment_date', $data ?? [], null);
        $this->setIfExists('statement_close_balance', $data ?? [], null);
        $this->setIfExists('term_of_ml', $data ?? [], null);
        $this->setIfExists('ml_holder_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('late_fee_amount', $data ?? [], null);
        $this->setIfExists('payoff_amount', $data ?? [], null);
        $this->setIfExists('payoff_amount_date', $data ?? [], null);
        $this->setIfExists('original_maturity_date', $data ?? [], null);
        $this->setIfExists('principal_balance', $data ?? [], null);
        $this->setIfExists('escrow_balance', $data ?? [], null);
        $this->setIfExists('interest_period', $data ?? [], null);
        $this->setIfExists('initial_ml_amount', $data ?? [], null);
        $this->setIfExists('initial_ml_date', $data ?? [], null);
        $this->setIfExists('next_payment_principal_amount', $data ?? [], null);
        $this->setIfExists('next_payment_interest_amount', $data ?? [], null);
        $this->setIfExists('next_payment', $data ?? [], null);
        $this->setIfExists('next_payment_date', $data ?? [], null);
        $this->setIfExists('last_payment_due_date', $data ?? [], null);
        $this->setIfExists('last_payment_receive_date', $data ?? [], null);
        $this->setIfExists('last_payment_principal_amount', $data ?? [], null);
        $this->setIfExists('last_payment_interest_amount', $data ?? [], null);
        $this->setIfExists('last_payment_escrow_amount', $data ?? [], null);
        $this->setIfExists('last_payment_last_fee_amount', $data ?? [], null);
        $this->setIfExists('last_payment_late_charge', $data ?? [], null);
        $this->setIfExists('ytd_principal_paid', $data ?? [], null);
        $this->setIfExists('ytd_interest_paid', $data ?? [], null);
        $this->setIfExists('ytd_insurance_paid', $data ?? [], null);
        $this->setIfExists('ytd_tax_paid', $data ?? [], null);
        $this->setIfExists('auto_pay_enrolled', $data ?? [], null);
        $this->setIfExists('margin_allowed', $data ?? [], null);
        $this->setIfExists('cash_account_allowed', $data ?? [], null);
        $this->setIfExists('collateral', $data ?? [], null);
        $this->setIfExists('current_school', $data ?? [], null);
        $this->setIfExists('first_payment_date', $data ?? [], null);
        $this->setIfExists('first_mortgage', $data ?? [], null);
        $this->setIfExists('loan_payment_freq', $data ?? [], null);
        $this->setIfExists('original_school', $data ?? [], null);
        $this->setIfExists('recurring_payment_amount', $data ?? [], null);
        $this->setIfExists('lender', $data ?? [], null);
        $this->setIfExists('ending_balance_amount', $data ?? [], null);
        $this->setIfExists('loan_term_type', $data ?? [], null);
        $this->setIfExists('payments_made', $data ?? [], null);
        $this->setIfExists('balloon_amount', $data ?? [], null);
        $this->setIfExists('projected_interest', $data ?? [], null);
        $this->setIfExists('interest_paid_ltd', $data ?? [], null);
        $this->setIfExists('interest_rate_type', $data ?? [], null);
        $this->setIfExists('loan_payment_type', $data ?? [], null);
        $this->setIfExists('repayment_plan', $data ?? [], null);
        $this->setIfExists('payments_remaining', $data ?? [], null);
        $this->setIfExists('margin_balance', $data ?? [], null);
        $this->setIfExists('short_balance', $data ?? [], null);
        $this->setIfExists('available_cash_balance', $data ?? [], null);
        $this->setIfExists('maturity_value_amount', $data ?? [], null);
        $this->setIfExists('vested_balance', $data ?? [], null);
        $this->setIfExists('emp_match_amount', $data ?? [], null);
        $this->setIfExists('emp_pretax_contrib_amount', $data ?? [], null);
        $this->setIfExists('emp_pretax_contrib_amount_ytd', $data ?? [], null);
        $this->setIfExists('contrib_total_ytd', $data ?? [], null);
        $this->setIfExists('cash_balance_amount', $data ?? [], null);
        $this->setIfExists('pre_tax_amount', $data ?? [], null);
        $this->setIfExists('after_tax_amount', $data ?? [], null);
        $this->setIfExists('match_amount', $data ?? [], null);
        $this->setIfExists('profit_sharing_amount', $data ?? [], null);
        $this->setIfExists('rollover_amount', $data ?? [], null);
        $this->setIfExists('other_vest_amount', $data ?? [], null);
        $this->setIfExists('other_nonvest_amount', $data ?? [], null);
        $this->setIfExists('current_loan_balance', $data ?? [], null);
        $this->setIfExists('loan_rate', $data ?? [], null);
        $this->setIfExists('buy_power', $data ?? [], null);
        $this->setIfExists('rollover_ltd', $data ?? [], null);
        $this->setIfExists('loan_award_id', $data ?? [], null);
        $this->setIfExists('original_interest_rate', $data ?? [], null);
        $this->setIfExists('guarantor', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('interest_subsidy_type', $data ?? [], null);
        $this->setIfExists('interest_balance', $data ?? [], null);
        $this->setIfExists('remaining_term_of_ml', $data ?? [], null);
        $this->setIfExists('initial_interest_rate', $data ?? [], null);
        $this->setIfExists('fees_balance', $data ?? [], null);
        $this->setIfExists('loan_ytd_interest_paid', $data ?? [], null);
        $this->setIfExists('loan_ytd_fees_paid', $data ?? [], null);
        $this->setIfExists('loan_ytd_principal_paid', $data ?? [], null);
        $this->setIfExists('loan_status', $data ?? [], null);
        $this->setIfExists('loan_status_start_date', $data ?? [], null);
        $this->setIfExists('loan_status_end_date', $data ?? [], null);
        $this->setIfExists('weighted_interest_rate', $data ?? [], null);
        $this->setIfExists('repayment_plan_start_date', $data ?? [], null);
        $this->setIfExists('repayment_plan_end_date', $data ?? [], null);
        $this->setIfExists('expected_payoff_date', $data ?? [], null);
        $this->setIfExists('out_of_school_date', $data ?? [], null);
        $this->setIfExists('convert_to_repayment', $data ?? [], null);
        $this->setIfExists('days_delinquent', $data ?? [], null);
        $this->setIfExists('total_principal_paid', $data ?? [], null);
        $this->setIfExists('total_interest_paid', $data ?? [], null);
        $this->setIfExists('total_amount_paid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_as_of
     *
     * @return int|null
     */
    public function getDateAsOf()
    {
        return $this->container['date_as_of'];
    }

    /**
     * Sets date_as_of
     *
     * @param int|null $date_as_of (All Account Types) Most recent date of the following information. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setDateAsOf($date_as_of)
    {
        if (is_null($date_as_of)) {
            throw new \InvalidArgumentException('non-nullable date_as_of cannot be null');
        }
        $this->container['date_as_of'] = $date_as_of;

        return $this;
    }

    /**
     * Gets available_balance_amount
     *
     * @return float|null
     */
    public function getAvailableBalanceAmount()
    {
        return $this->container['available_balance_amount'];
    }

    /**
     * Sets available_balance_amount
     *
     * @param float|null $available_balance_amount (Checking/Savings/CD/MoneyMarket) and (Mortgage/Loan) The available balance (typically the current balance with adjustments for any pending transactions)
     *
     * @return self
     */
    public function setAvailableBalanceAmount($available_balance_amount)
    {
        if (is_null($available_balance_amount)) {
            throw new \InvalidArgumentException('non-nullable available_balance_amount cannot be null');
        }
        $this->container['available_balance_amount'] = $available_balance_amount;

        return $this;
    }

    /**
     * Gets open_date
     *
     * @return int|null
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     *
     * @param int|null $open_date (Checking/Savings/CD/MoneyMarket) Date when account was opened. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setOpenDate($open_date)
    {
        if (is_null($open_date)) {
            throw new \InvalidArgumentException('non-nullable open_date cannot be null');
        }
        $this->container['open_date'] = $open_date;

        return $this;
    }

    /**
     * Gets period_start_date
     *
     * @return int|null
     */
    public function getPeriodStartDate()
    {
        return $this->container['period_start_date'];
    }

    /**
     * Sets period_start_date
     *
     * @param int|null $period_start_date (Checking/Savings/CD/MoneyMarket) Start date of period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setPeriodStartDate($period_start_date)
    {
        if (is_null($period_start_date)) {
            throw new \InvalidArgumentException('non-nullable period_start_date cannot be null');
        }
        $this->container['period_start_date'] = $period_start_date;

        return $this;
    }

    /**
     * Gets period_end_date
     *
     * @return int|null
     */
    public function getPeriodEndDate()
    {
        return $this->container['period_end_date'];
    }

    /**
     * Sets period_end_date
     *
     * @param int|null $period_end_date End date of period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setPeriodEndDate($period_end_date)
    {
        if (is_null($period_end_date)) {
            throw new \InvalidArgumentException('non-nullable period_end_date cannot be null');
        }
        $this->container['period_end_date'] = $period_end_date;

        return $this;
    }

    /**
     * Gets period_interest_rate
     *
     * @return float|null
     */
    public function getPeriodInterestRate()
    {
        return $this->container['period_interest_rate'];
    }

    /**
     * Sets period_interest_rate
     *
     * @param float|null $period_interest_rate (Checking/Savings/CD/MoneyMarket) The APY for the current period interest rate
     *
     * @return self
     */
    public function setPeriodInterestRate($period_interest_rate)
    {
        if (is_null($period_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable period_interest_rate cannot be null');
        }
        $this->container['period_interest_rate'] = $period_interest_rate;

        return $this;
    }

    /**
     * Gets period_deposit_amount
     *
     * @return float|null
     */
    public function getPeriodDepositAmount()
    {
        return $this->container['period_deposit_amount'];
    }

    /**
     * Sets period_deposit_amount
     *
     * @param float|null $period_deposit_amount (Checking/Savings/CD/MoneyMarket) Amount deposited in period
     *
     * @return self
     */
    public function setPeriodDepositAmount($period_deposit_amount)
    {
        if (is_null($period_deposit_amount)) {
            throw new \InvalidArgumentException('non-nullable period_deposit_amount cannot be null');
        }
        $this->container['period_deposit_amount'] = $period_deposit_amount;

        return $this;
    }

    /**
     * Gets period_interest_amount
     *
     * @return float|null
     */
    public function getPeriodInterestAmount()
    {
        return $this->container['period_interest_amount'];
    }

    /**
     * Sets period_interest_amount
     *
     * @param float|null $period_interest_amount (Checking/Savings/CD/MoneyMarket) Interest accrued during the current period
     *
     * @return self
     */
    public function setPeriodInterestAmount($period_interest_amount)
    {
        if (is_null($period_interest_amount)) {
            throw new \InvalidArgumentException('non-nullable period_interest_amount cannot be null');
        }
        $this->container['period_interest_amount'] = $period_interest_amount;

        return $this;
    }

    /**
     * Gets interest_ytd_amount
     *
     * @return float|null
     */
    public function getInterestYtdAmount()
    {
        return $this->container['interest_ytd_amount'];
    }

    /**
     * Sets interest_ytd_amount
     *
     * @param float|null $interest_ytd_amount (Checking/Savings/CD/MoneyMarket) Interest accrued year-to-date
     *
     * @return self
     */
    public function setInterestYtdAmount($interest_ytd_amount)
    {
        if (is_null($interest_ytd_amount)) {
            throw new \InvalidArgumentException('non-nullable interest_ytd_amount cannot be null');
        }
        $this->container['interest_ytd_amount'] = $interest_ytd_amount;

        return $this;
    }

    /**
     * Gets interest_prior_ytd_amount
     *
     * @return float|null
     */
    public function getInterestPriorYtdAmount()
    {
        return $this->container['interest_prior_ytd_amount'];
    }

    /**
     * Sets interest_prior_ytd_amount
     *
     * @param float|null $interest_prior_ytd_amount (Checking/Savings/CD/MoneyMarket) Interest earned in prior year
     *
     * @return self
     */
    public function setInterestPriorYtdAmount($interest_prior_ytd_amount)
    {
        if (is_null($interest_prior_ytd_amount)) {
            throw new \InvalidArgumentException('non-nullable interest_prior_ytd_amount cannot be null');
        }
        $this->container['interest_prior_ytd_amount'] = $interest_prior_ytd_amount;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return int|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param int|null $maturity_date (Checking/Savings/CD/MoneyMarket) Maturity date of account type. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setMaturityDate($maturity_date)
    {
        if (is_null($maturity_date)) {
            throw new \InvalidArgumentException('non-nullable maturity_date cannot be null');
        }
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return string|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param string|null $interest_rate (Credit Card/Line Of Credit) and (Mortgage/Loan) The account's current interest rate
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets credit_available_amount
     *
     * @return float|null
     */
    public function getCreditAvailableAmount()
    {
        return $this->container['credit_available_amount'];
    }

    /**
     * Sets credit_available_amount
     *
     * @param float|null $credit_available_amount (Credit Card/Line Of Credit) The available credit (typically the credit limit minus the current balance)
     *
     * @return self
     */
    public function setCreditAvailableAmount($credit_available_amount)
    {
        if (is_null($credit_available_amount)) {
            throw new \InvalidArgumentException('non-nullable credit_available_amount cannot be null');
        }
        $this->container['credit_available_amount'] = $credit_available_amount;

        return $this;
    }

    /**
     * Gets credit_max_amount
     *
     * @return float|null
     */
    public function getCreditMaxAmount()
    {
        return $this->container['credit_max_amount'];
    }

    /**
     * Sets credit_max_amount
     *
     * @param float|null $credit_max_amount (Credit Card/Line Of Credit) The account's credit limit
     *
     * @return self
     */
    public function setCreditMaxAmount($credit_max_amount)
    {
        if (is_null($credit_max_amount)) {
            throw new \InvalidArgumentException('non-nullable credit_max_amount cannot be null');
        }
        $this->container['credit_max_amount'] = $credit_max_amount;

        return $this;
    }

    /**
     * Gets cash_advance_available_amount
     *
     * @return float|null
     */
    public function getCashAdvanceAvailableAmount()
    {
        return $this->container['cash_advance_available_amount'];
    }

    /**
     * Sets cash_advance_available_amount
     *
     * @param float|null $cash_advance_available_amount (Credit Card/Line Of Credit) Currently available cash advance
     *
     * @return self
     */
    public function setCashAdvanceAvailableAmount($cash_advance_available_amount)
    {
        if (is_null($cash_advance_available_amount)) {
            throw new \InvalidArgumentException('non-nullable cash_advance_available_amount cannot be null');
        }
        $this->container['cash_advance_available_amount'] = $cash_advance_available_amount;

        return $this;
    }

    /**
     * Gets cash_advance_max_amount
     *
     * @return float|null
     */
    public function getCashAdvanceMaxAmount()
    {
        return $this->container['cash_advance_max_amount'];
    }

    /**
     * Sets cash_advance_max_amount
     *
     * @param float|null $cash_advance_max_amount (Credit Card/Line Of Credit) Maximum cash advance amount
     *
     * @return self
     */
    public function setCashAdvanceMaxAmount($cash_advance_max_amount)
    {
        if (is_null($cash_advance_max_amount)) {
            throw new \InvalidArgumentException('non-nullable cash_advance_max_amount cannot be null');
        }
        $this->container['cash_advance_max_amount'] = $cash_advance_max_amount;

        return $this;
    }

    /**
     * Gets cash_advance_balance
     *
     * @return float|null
     */
    public function getCashAdvanceBalance()
    {
        return $this->container['cash_advance_balance'];
    }

    /**
     * Sets cash_advance_balance
     *
     * @param float|null $cash_advance_balance (Credit Card/Line Of Credit) Balance of current cash advance
     *
     * @return self
     */
    public function setCashAdvanceBalance($cash_advance_balance)
    {
        if (is_null($cash_advance_balance)) {
            throw new \InvalidArgumentException('non-nullable cash_advance_balance cannot be null');
        }
        $this->container['cash_advance_balance'] = $cash_advance_balance;

        return $this;
    }

    /**
     * Gets cash_advance_interest_rate
     *
     * @return float|null
     */
    public function getCashAdvanceInterestRate()
    {
        return $this->container['cash_advance_interest_rate'];
    }

    /**
     * Sets cash_advance_interest_rate
     *
     * @param float|null $cash_advance_interest_rate (Credit Card/Line Of Credit) Interest rate for cash advances
     *
     * @return self
     */
    public function setCashAdvanceInterestRate($cash_advance_interest_rate)
    {
        if (is_null($cash_advance_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable cash_advance_interest_rate cannot be null');
        }
        $this->container['cash_advance_interest_rate'] = $cash_advance_interest_rate;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return float|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param float|null $current_balance (Credit Card/Line Of Credit) and (Investment) Current balance
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets payment_min_amount
     *
     * @return float|null
     */
    public function getPaymentMinAmount()
    {
        return $this->container['payment_min_amount'];
    }

    /**
     * Sets payment_min_amount
     *
     * @param float|null $payment_min_amount (Credit Card/Line Of Credit) and (Mortgage/Loan) Minimum payment due
     *
     * @return self
     */
    public function setPaymentMinAmount($payment_min_amount)
    {
        if (is_null($payment_min_amount)) {
            throw new \InvalidArgumentException('non-nullable payment_min_amount cannot be null');
        }
        $this->container['payment_min_amount'] = $payment_min_amount;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return int|null
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param int|null $payment_due_date (Credit Card/Line Of Credit) Due date for the next payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setPaymentDueDate($payment_due_date)
    {
        if (is_null($payment_due_date)) {
            throw new \InvalidArgumentException('non-nullable payment_due_date cannot be null');
        }
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets previous_balance
     *
     * @return float|null
     */
    public function getPreviousBalance()
    {
        return $this->container['previous_balance'];
    }

    /**
     * Sets previous_balance
     *
     * @param float|null $previous_balance (Credit Card/Line Of Credit) Prior balance in last statement
     *
     * @return self
     */
    public function setPreviousBalance($previous_balance)
    {
        if (is_null($previous_balance)) {
            throw new \InvalidArgumentException('non-nullable previous_balance cannot be null');
        }
        $this->container['previous_balance'] = $previous_balance;

        return $this;
    }

    /**
     * Gets statement_start_date
     *
     * @return int|null
     */
    public function getStatementStartDate()
    {
        return $this->container['statement_start_date'];
    }

    /**
     * Sets statement_start_date
     *
     * @param int|null $statement_start_date (Credit Card/Line Of Credit) Start date of statement period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setStatementStartDate($statement_start_date)
    {
        if (is_null($statement_start_date)) {
            throw new \InvalidArgumentException('non-nullable statement_start_date cannot be null');
        }
        $this->container['statement_start_date'] = $statement_start_date;

        return $this;
    }

    /**
     * Gets statement_end_date
     *
     * @return int|null
     */
    public function getStatementEndDate()
    {
        return $this->container['statement_end_date'];
    }

    /**
     * Sets statement_end_date
     *
     * @param int|null $statement_end_date (Credit Card/Line Of Credit) End date of statement period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setStatementEndDate($statement_end_date)
    {
        if (is_null($statement_end_date)) {
            throw new \InvalidArgumentException('non-nullable statement_end_date cannot be null');
        }
        $this->container['statement_end_date'] = $statement_end_date;

        return $this;
    }

    /**
     * Gets statement_purchase_amount
     *
     * @return float|null
     */
    public function getStatementPurchaseAmount()
    {
        return $this->container['statement_purchase_amount'];
    }

    /**
     * Sets statement_purchase_amount
     *
     * @param float|null $statement_purchase_amount (Credit Card/Line Of Credit) Purchase amount of statement period
     *
     * @return self
     */
    public function setStatementPurchaseAmount($statement_purchase_amount)
    {
        if (is_null($statement_purchase_amount)) {
            throw new \InvalidArgumentException('non-nullable statement_purchase_amount cannot be null');
        }
        $this->container['statement_purchase_amount'] = $statement_purchase_amount;

        return $this;
    }

    /**
     * Gets statement_finance_amount
     *
     * @return float|null
     */
    public function getStatementFinanceAmount()
    {
        return $this->container['statement_finance_amount'];
    }

    /**
     * Sets statement_finance_amount
     *
     * @param float|null $statement_finance_amount (Credit Card/Line Of Credit) Finance amount of statement period
     *
     * @return self
     */
    public function setStatementFinanceAmount($statement_finance_amount)
    {
        if (is_null($statement_finance_amount)) {
            throw new \InvalidArgumentException('non-nullable statement_finance_amount cannot be null');
        }
        $this->container['statement_finance_amount'] = $statement_finance_amount;

        return $this;
    }

    /**
     * Gets statement_credit_amount
     *
     * @return float|null
     */
    public function getStatementCreditAmount()
    {
        return $this->container['statement_credit_amount'];
    }

    /**
     * Sets statement_credit_amount
     *
     * @param float|null $statement_credit_amount (Credit Card/Line Of Credit) Credit amount applied in statement period
     *
     * @return self
     */
    public function setStatementCreditAmount($statement_credit_amount)
    {
        if (is_null($statement_credit_amount)) {
            throw new \InvalidArgumentException('non-nullable statement_credit_amount cannot be null');
        }
        $this->container['statement_credit_amount'] = $statement_credit_amount;

        return $this;
    }

    /**
     * Gets reward_earned_balance
     *
     * @return int|null
     */
    public function getRewardEarnedBalance()
    {
        return $this->container['reward_earned_balance'];
    }

    /**
     * Sets reward_earned_balance
     *
     * @param int|null $reward_earned_balance (Credit Card/Line Of Credit) Earned reward balance
     *
     * @return self
     */
    public function setRewardEarnedBalance($reward_earned_balance)
    {
        if (is_null($reward_earned_balance)) {
            throw new \InvalidArgumentException('non-nullable reward_earned_balance cannot be null');
        }
        $this->container['reward_earned_balance'] = $reward_earned_balance;

        return $this;
    }

    /**
     * Gets past_due_amount
     *
     * @return float|null
     */
    public function getPastDueAmount()
    {
        return $this->container['past_due_amount'];
    }

    /**
     * Sets past_due_amount
     *
     * @param float|null $past_due_amount (Credit Card/Line Of Credit) Balance past due
     *
     * @return self
     */
    public function setPastDueAmount($past_due_amount)
    {
        if (is_null($past_due_amount)) {
            throw new \InvalidArgumentException('non-nullable past_due_amount cannot be null');
        }
        $this->container['past_due_amount'] = $past_due_amount;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return float|null
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param float|null $last_payment_amount (Credit Card/Line Of Credit) and (Mortgage/Loan) The amount received in the last payment
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        if (is_null($last_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_amount cannot be null');
        }
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return int|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param int|null $last_payment_date (Credit Card/Line Of Credit) The date of the last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        if (is_null($last_payment_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_date cannot be null');
        }
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets statement_close_balance
     *
     * @return float|null
     */
    public function getStatementCloseBalance()
    {
        return $this->container['statement_close_balance'];
    }

    /**
     * Sets statement_close_balance
     *
     * @param float|null $statement_close_balance (Credit Card/Line Of Credit) Balance of statement at close
     *
     * @return self
     */
    public function setStatementCloseBalance($statement_close_balance)
    {
        if (is_null($statement_close_balance)) {
            throw new \InvalidArgumentException('non-nullable statement_close_balance cannot be null');
        }
        $this->container['statement_close_balance'] = $statement_close_balance;

        return $this;
    }

    /**
     * Gets term_of_ml
     *
     * @return string|null
     */
    public function getTermOfMl()
    {
        return $this->container['term_of_ml'];
    }

    /**
     * Sets term_of_ml
     *
     * @param string|null $term_of_ml (Mortgage/Loan) Length of loan in months
     *
     * @return self
     */
    public function setTermOfMl($term_of_ml)
    {
        if (is_null($term_of_ml)) {
            throw new \InvalidArgumentException('non-nullable term_of_ml cannot be null');
        }
        $this->container['term_of_ml'] = $term_of_ml;

        return $this;
    }

    /**
     * Gets ml_holder_name
     *
     * @return string|null
     */
    public function getMlHolderName()
    {
        return $this->container['ml_holder_name'];
    }

    /**
     * Sets ml_holder_name
     *
     * @param string|null $ml_holder_name (Mortgage/Loan) Holder of the mortgage or loan
     *
     * @return self
     */
    public function setMlHolderName($ml_holder_name)
    {
        if (is_null($ml_holder_name)) {
            throw new \InvalidArgumentException('non-nullable ml_holder_name cannot be null');
        }
        $this->container['ml_holder_name'] = $ml_holder_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description (Mortgage/Loan) Description of loan
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets late_fee_amount
     *
     * @return float|null
     */
    public function getLateFeeAmount()
    {
        return $this->container['late_fee_amount'];
    }

    /**
     * Sets late_fee_amount
     *
     * @param float|null $late_fee_amount (Mortgage/Loan) Late fee charged
     *
     * @return self
     */
    public function setLateFeeAmount($late_fee_amount)
    {
        if (is_null($late_fee_amount)) {
            throw new \InvalidArgumentException('non-nullable late_fee_amount cannot be null');
        }
        $this->container['late_fee_amount'] = $late_fee_amount;

        return $this;
    }

    /**
     * Gets payoff_amount
     *
     * @return float|null
     */
    public function getPayoffAmount()
    {
        return $this->container['payoff_amount'];
    }

    /**
     * Sets payoff_amount
     *
     * @param float|null $payoff_amount (Mortgage/Loan) The amount required to payoff the loan
     *
     * @return self
     */
    public function setPayoffAmount($payoff_amount)
    {
        if (is_null($payoff_amount)) {
            throw new \InvalidArgumentException('non-nullable payoff_amount cannot be null');
        }
        $this->container['payoff_amount'] = $payoff_amount;

        return $this;
    }

    /**
     * Gets payoff_amount_date
     *
     * @return int|null
     */
    public function getPayoffAmountDate()
    {
        return $this->container['payoff_amount_date'];
    }

    /**
     * Sets payoff_amount_date
     *
     * @param int|null $payoff_amount_date (Mortgage/Loan) Date of final payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setPayoffAmountDate($payoff_amount_date)
    {
        if (is_null($payoff_amount_date)) {
            throw new \InvalidArgumentException('non-nullable payoff_amount_date cannot be null');
        }
        $this->container['payoff_amount_date'] = $payoff_amount_date;

        return $this;
    }

    /**
     * Gets original_maturity_date
     *
     * @return int|null
     */
    public function getOriginalMaturityDate()
    {
        return $this->container['original_maturity_date'];
    }

    /**
     * Sets original_maturity_date
     *
     * @param int|null $original_maturity_date (Mortgage/Loan) Original date of loan maturity. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setOriginalMaturityDate($original_maturity_date)
    {
        if (is_null($original_maturity_date)) {
            throw new \InvalidArgumentException('non-nullable original_maturity_date cannot be null');
        }
        $this->container['original_maturity_date'] = $original_maturity_date;

        return $this;
    }

    /**
     * Gets principal_balance
     *
     * @return float|null
     */
    public function getPrincipalBalance()
    {
        return $this->container['principal_balance'];
    }

    /**
     * Sets principal_balance
     *
     * @param float|null $principal_balance (Mortgage/Loan) The principal balance
     *
     * @return self
     */
    public function setPrincipalBalance($principal_balance)
    {
        if (is_null($principal_balance)) {
            throw new \InvalidArgumentException('non-nullable principal_balance cannot be null');
        }
        $this->container['principal_balance'] = $principal_balance;

        return $this;
    }

    /**
     * Gets escrow_balance
     *
     * @return float|null
     */
    public function getEscrowBalance()
    {
        return $this->container['escrow_balance'];
    }

    /**
     * Sets escrow_balance
     *
     * @param float|null $escrow_balance (Mortgage/Loan) The escrow balance
     *
     * @return self
     */
    public function setEscrowBalance($escrow_balance)
    {
        if (is_null($escrow_balance)) {
            throw new \InvalidArgumentException('non-nullable escrow_balance cannot be null');
        }
        $this->container['escrow_balance'] = $escrow_balance;

        return $this;
    }

    /**
     * Gets interest_period
     *
     * @return string|null
     */
    public function getInterestPeriod()
    {
        return $this->container['interest_period'];
    }

    /**
     * Sets interest_period
     *
     * @param string|null $interest_period (Mortgage/Loan) Period of interest
     *
     * @return self
     */
    public function setInterestPeriod($interest_period)
    {
        if (is_null($interest_period)) {
            throw new \InvalidArgumentException('non-nullable interest_period cannot be null');
        }
        $this->container['interest_period'] = $interest_period;

        return $this;
    }

    /**
     * Gets initial_ml_amount
     *
     * @return float|null
     */
    public function getInitialMlAmount()
    {
        return $this->container['initial_ml_amount'];
    }

    /**
     * Sets initial_ml_amount
     *
     * @param float|null $initial_ml_amount (Mortgage/Loan) Original loan amount
     *
     * @return self
     */
    public function setInitialMlAmount($initial_ml_amount)
    {
        if (is_null($initial_ml_amount)) {
            throw new \InvalidArgumentException('non-nullable initial_ml_amount cannot be null');
        }
        $this->container['initial_ml_amount'] = $initial_ml_amount;

        return $this;
    }

    /**
     * Gets initial_ml_date
     *
     * @return int|null
     */
    public function getInitialMlDate()
    {
        return $this->container['initial_ml_date'];
    }

    /**
     * Sets initial_ml_date
     *
     * @param int|null $initial_ml_date (Mortgage/Loan) Original date of loan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setInitialMlDate($initial_ml_date)
    {
        if (is_null($initial_ml_date)) {
            throw new \InvalidArgumentException('non-nullable initial_ml_date cannot be null');
        }
        $this->container['initial_ml_date'] = $initial_ml_date;

        return $this;
    }

    /**
     * Gets next_payment_principal_amount
     *
     * @return float|null
     */
    public function getNextPaymentPrincipalAmount()
    {
        return $this->container['next_payment_principal_amount'];
    }

    /**
     * Sets next_payment_principal_amount
     *
     * @param float|null $next_payment_principal_amount (Mortgage/Loan) Amount towards principal in next payment
     *
     * @return self
     */
    public function setNextPaymentPrincipalAmount($next_payment_principal_amount)
    {
        if (is_null($next_payment_principal_amount)) {
            throw new \InvalidArgumentException('non-nullable next_payment_principal_amount cannot be null');
        }
        $this->container['next_payment_principal_amount'] = $next_payment_principal_amount;

        return $this;
    }

    /**
     * Gets next_payment_interest_amount
     *
     * @return float|null
     */
    public function getNextPaymentInterestAmount()
    {
        return $this->container['next_payment_interest_amount'];
    }

    /**
     * Sets next_payment_interest_amount
     *
     * @param float|null $next_payment_interest_amount (Mortgage/Loan) Amount of interest in next payment
     *
     * @return self
     */
    public function setNextPaymentInterestAmount($next_payment_interest_amount)
    {
        if (is_null($next_payment_interest_amount)) {
            throw new \InvalidArgumentException('non-nullable next_payment_interest_amount cannot be null');
        }
        $this->container['next_payment_interest_amount'] = $next_payment_interest_amount;

        return $this;
    }

    /**
     * Gets next_payment
     *
     * @return float|null
     */
    public function getNextPayment()
    {
        return $this->container['next_payment'];
    }

    /**
     * Sets next_payment
     *
     * @param float|null $next_payment (Mortgage/Loan) Minimum payment due
     *
     * @return self
     */
    public function setNextPayment($next_payment)
    {
        if (is_null($next_payment)) {
            throw new \InvalidArgumentException('non-nullable next_payment cannot be null');
        }
        $this->container['next_payment'] = $next_payment;

        return $this;
    }

    /**
     * Gets next_payment_date
     *
     * @return int|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['next_payment_date'];
    }

    /**
     * Sets next_payment_date
     *
     * @param int|null $next_payment_date (Mortgage/Loan) Due date for the next payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setNextPaymentDate($next_payment_date)
    {
        if (is_null($next_payment_date)) {
            throw new \InvalidArgumentException('non-nullable next_payment_date cannot be null');
        }
        $this->container['next_payment_date'] = $next_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_due_date
     *
     * @return int|null
     */
    public function getLastPaymentDueDate()
    {
        return $this->container['last_payment_due_date'];
    }

    /**
     * Sets last_payment_due_date
     *
     * @param int|null $last_payment_due_date (Mortgage/Loan) Due date of last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setLastPaymentDueDate($last_payment_due_date)
    {
        if (is_null($last_payment_due_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_due_date cannot be null');
        }
        $this->container['last_payment_due_date'] = $last_payment_due_date;

        return $this;
    }

    /**
     * Gets last_payment_receive_date
     *
     * @return int|null
     */
    public function getLastPaymentReceiveDate()
    {
        return $this->container['last_payment_receive_date'];
    }

    /**
     * Sets last_payment_receive_date
     *
     * @param int|null $last_payment_receive_date (Mortgage/Loan) The date of the last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setLastPaymentReceiveDate($last_payment_receive_date)
    {
        if (is_null($last_payment_receive_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_receive_date cannot be null');
        }
        $this->container['last_payment_receive_date'] = $last_payment_receive_date;

        return $this;
    }

    /**
     * Gets last_payment_principal_amount
     *
     * @return float|null
     */
    public function getLastPaymentPrincipalAmount()
    {
        return $this->container['last_payment_principal_amount'];
    }

    /**
     * Sets last_payment_principal_amount
     *
     * @param float|null $last_payment_principal_amount (Mortgage/Loan) Amount towards principal in last payment
     *
     * @return self
     */
    public function setLastPaymentPrincipalAmount($last_payment_principal_amount)
    {
        if (is_null($last_payment_principal_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_principal_amount cannot be null');
        }
        $this->container['last_payment_principal_amount'] = $last_payment_principal_amount;

        return $this;
    }

    /**
     * Gets last_payment_interest_amount
     *
     * @return float|null
     */
    public function getLastPaymentInterestAmount()
    {
        return $this->container['last_payment_interest_amount'];
    }

    /**
     * Sets last_payment_interest_amount
     *
     * @param float|null $last_payment_interest_amount (Mortgage/Loan) Amount of interest in last payment
     *
     * @return self
     */
    public function setLastPaymentInterestAmount($last_payment_interest_amount)
    {
        if (is_null($last_payment_interest_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_interest_amount cannot be null');
        }
        $this->container['last_payment_interest_amount'] = $last_payment_interest_amount;

        return $this;
    }

    /**
     * Gets last_payment_escrow_amount
     *
     * @return float|null
     */
    public function getLastPaymentEscrowAmount()
    {
        return $this->container['last_payment_escrow_amount'];
    }

    /**
     * Sets last_payment_escrow_amount
     *
     * @param float|null $last_payment_escrow_amount (Mortgage/Loan) Amount towards escrow in last payment
     *
     * @return self
     */
    public function setLastPaymentEscrowAmount($last_payment_escrow_amount)
    {
        if (is_null($last_payment_escrow_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_escrow_amount cannot be null');
        }
        $this->container['last_payment_escrow_amount'] = $last_payment_escrow_amount;

        return $this;
    }

    /**
     * Gets last_payment_last_fee_amount
     *
     * @return float|null
     */
    public function getLastPaymentLastFeeAmount()
    {
        return $this->container['last_payment_last_fee_amount'];
    }

    /**
     * Sets last_payment_last_fee_amount
     *
     * @param float|null $last_payment_last_fee_amount (Mortgage/Loan) Amount of last fee in last payment
     *
     * @return self
     */
    public function setLastPaymentLastFeeAmount($last_payment_last_fee_amount)
    {
        if (is_null($last_payment_last_fee_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_last_fee_amount cannot be null');
        }
        $this->container['last_payment_last_fee_amount'] = $last_payment_last_fee_amount;

        return $this;
    }

    /**
     * Gets last_payment_late_charge
     *
     * @return float|null
     */
    public function getLastPaymentLateCharge()
    {
        return $this->container['last_payment_late_charge'];
    }

    /**
     * Sets last_payment_late_charge
     *
     * @param float|null $last_payment_late_charge (Mortgage/Loan) Amount of late charge in last payment
     *
     * @return self
     */
    public function setLastPaymentLateCharge($last_payment_late_charge)
    {
        if (is_null($last_payment_late_charge)) {
            throw new \InvalidArgumentException('non-nullable last_payment_late_charge cannot be null');
        }
        $this->container['last_payment_late_charge'] = $last_payment_late_charge;

        return $this;
    }

    /**
     * Gets ytd_principal_paid
     *
     * @return float|null
     */
    public function getYtdPrincipalPaid()
    {
        return $this->container['ytd_principal_paid'];
    }

    /**
     * Sets ytd_principal_paid
     *
     * @param float|null $ytd_principal_paid (Mortgage/Loan) Principal paid year-to-date
     *
     * @return self
     */
    public function setYtdPrincipalPaid($ytd_principal_paid)
    {
        if (is_null($ytd_principal_paid)) {
            throw new \InvalidArgumentException('non-nullable ytd_principal_paid cannot be null');
        }
        $this->container['ytd_principal_paid'] = $ytd_principal_paid;

        return $this;
    }

    /**
     * Gets ytd_interest_paid
     *
     * @return float|null
     */
    public function getYtdInterestPaid()
    {
        return $this->container['ytd_interest_paid'];
    }

    /**
     * Sets ytd_interest_paid
     *
     * @param float|null $ytd_interest_paid (Mortgage/Loan) Interest paid year-to-date
     *
     * @return self
     */
    public function setYtdInterestPaid($ytd_interest_paid)
    {
        if (is_null($ytd_interest_paid)) {
            throw new \InvalidArgumentException('non-nullable ytd_interest_paid cannot be null');
        }
        $this->container['ytd_interest_paid'] = $ytd_interest_paid;

        return $this;
    }

    /**
     * Gets ytd_insurance_paid
     *
     * @return float|null
     */
    public function getYtdInsurancePaid()
    {
        return $this->container['ytd_insurance_paid'];
    }

    /**
     * Sets ytd_insurance_paid
     *
     * @param float|null $ytd_insurance_paid (Mortgage/Loan) Insurance paid year-to-date
     *
     * @return self
     */
    public function setYtdInsurancePaid($ytd_insurance_paid)
    {
        if (is_null($ytd_insurance_paid)) {
            throw new \InvalidArgumentException('non-nullable ytd_insurance_paid cannot be null');
        }
        $this->container['ytd_insurance_paid'] = $ytd_insurance_paid;

        return $this;
    }

    /**
     * Gets ytd_tax_paid
     *
     * @return float|null
     */
    public function getYtdTaxPaid()
    {
        return $this->container['ytd_tax_paid'];
    }

    /**
     * Sets ytd_tax_paid
     *
     * @param float|null $ytd_tax_paid (Mortgage/Loan) Tax paid year-to-date
     *
     * @return self
     */
    public function setYtdTaxPaid($ytd_tax_paid)
    {
        if (is_null($ytd_tax_paid)) {
            throw new \InvalidArgumentException('non-nullable ytd_tax_paid cannot be null');
        }
        $this->container['ytd_tax_paid'] = $ytd_tax_paid;

        return $this;
    }

    /**
     * Gets auto_pay_enrolled
     *
     * @return bool|null
     */
    public function getAutoPayEnrolled()
    {
        return $this->container['auto_pay_enrolled'];
    }

    /**
     * Sets auto_pay_enrolled
     *
     * @param bool|null $auto_pay_enrolled (Mortgage/Loan) Enrolled in autopay (F/Y)
     *
     * @return self
     */
    public function setAutoPayEnrolled($auto_pay_enrolled)
    {
        if (is_null($auto_pay_enrolled)) {
            throw new \InvalidArgumentException('non-nullable auto_pay_enrolled cannot be null');
        }
        $this->container['auto_pay_enrolled'] = $auto_pay_enrolled;

        return $this;
    }

    /**
     * Gets margin_allowed
     *
     * @return bool|null
     */
    public function getMarginAllowed()
    {
        return $this->container['margin_allowed'];
    }

    /**
     * Sets margin_allowed
     *
     * @param bool|null $margin_allowed Margin trading indicator (true / false)
     *
     * @return self
     */
    public function setMarginAllowed($margin_allowed)
    {
        if (is_null($margin_allowed)) {
            throw new \InvalidArgumentException('non-nullable margin_allowed cannot be null');
        }
        $this->container['margin_allowed'] = $margin_allowed;

        return $this;
    }

    /**
     * Gets cash_account_allowed
     *
     * @return bool|null
     */
    public function getCashAccountAllowed()
    {
        return $this->container['cash_account_allowed'];
    }

    /**
     * Sets cash_account_allowed
     *
     * @param bool|null $cash_account_allowed Cash account allowed indicator (true / false)
     *
     * @return self
     */
    public function setCashAccountAllowed($cash_account_allowed)
    {
        if (is_null($cash_account_allowed)) {
            throw new \InvalidArgumentException('non-nullable cash_account_allowed cannot be null');
        }
        $this->container['cash_account_allowed'] = $cash_account_allowed;

        return $this;
    }

    /**
     * Gets collateral
     *
     * @return string|null
     */
    public function getCollateral()
    {
        return $this->container['collateral'];
    }

    /**
     * Sets collateral
     *
     * @param string|null $collateral (Mortgage/Loan) Collateral on loan
     *
     * @return self
     */
    public function setCollateral($collateral)
    {
        if (is_null($collateral)) {
            throw new \InvalidArgumentException('non-nullable collateral cannot be null');
        }
        $this->container['collateral'] = $collateral;

        return $this;
    }

    /**
     * Gets current_school
     *
     * @return string|null
     */
    public function getCurrentSchool()
    {
        return $this->container['current_school'];
    }

    /**
     * Sets current_school
     *
     * @param string|null $current_school (Mortgage/Loan) Current school
     *
     * @return self
     */
    public function setCurrentSchool($current_school)
    {
        if (is_null($current_school)) {
            throw new \InvalidArgumentException('non-nullable current_school cannot be null');
        }
        $this->container['current_school'] = $current_school;

        return $this;
    }

    /**
     * Gets first_payment_date
     *
     * @return int|null
     */
    public function getFirstPaymentDate()
    {
        return $this->container['first_payment_date'];
    }

    /**
     * Sets first_payment_date
     *
     * @param int|null $first_payment_date (Mortgage/Loan) First payment due date. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setFirstPaymentDate($first_payment_date)
    {
        if (is_null($first_payment_date)) {
            throw new \InvalidArgumentException('non-nullable first_payment_date cannot be null');
        }
        $this->container['first_payment_date'] = $first_payment_date;

        return $this;
    }

    /**
     * Gets first_mortgage
     *
     * @return bool|null
     */
    public function getFirstMortgage()
    {
        return $this->container['first_mortgage'];
    }

    /**
     * Sets first_mortgage
     *
     * @param bool|null $first_mortgage (Mortgage/Loan) First mortgage (F/Y)
     *
     * @return self
     */
    public function setFirstMortgage($first_mortgage)
    {
        if (is_null($first_mortgage)) {
            throw new \InvalidArgumentException('non-nullable first_mortgage cannot be null');
        }
        $this->container['first_mortgage'] = $first_mortgage;

        return $this;
    }

    /**
     * Gets loan_payment_freq
     *
     * @return string|null
     */
    public function getLoanPaymentFreq()
    {
        return $this->container['loan_payment_freq'];
    }

    /**
     * Sets loan_payment_freq
     *
     * @param string|null $loan_payment_freq (Mortgage/Loan) Frequency of payments (monthly, etc.)
     *
     * @return self
     */
    public function setLoanPaymentFreq($loan_payment_freq)
    {
        if (is_null($loan_payment_freq)) {
            throw new \InvalidArgumentException('non-nullable loan_payment_freq cannot be null');
        }
        $this->container['loan_payment_freq'] = $loan_payment_freq;

        return $this;
    }

    /**
     * Gets original_school
     *
     * @return string|null
     */
    public function getOriginalSchool()
    {
        return $this->container['original_school'];
    }

    /**
     * Sets original_school
     *
     * @param string|null $original_school (Mortgage/Loan) Original school
     *
     * @return self
     */
    public function setOriginalSchool($original_school)
    {
        if (is_null($original_school)) {
            throw new \InvalidArgumentException('non-nullable original_school cannot be null');
        }
        $this->container['original_school'] = $original_school;

        return $this;
    }

    /**
     * Gets recurring_payment_amount
     *
     * @return float|null
     */
    public function getRecurringPaymentAmount()
    {
        return $this->container['recurring_payment_amount'];
    }

    /**
     * Sets recurring_payment_amount
     *
     * @param float|null $recurring_payment_amount (Mortgage/Loan) Recurring payment amount
     *
     * @return self
     */
    public function setRecurringPaymentAmount($recurring_payment_amount)
    {
        if (is_null($recurring_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_amount cannot be null');
        }
        $this->container['recurring_payment_amount'] = $recurring_payment_amount;

        return $this;
    }

    /**
     * Gets lender
     *
     * @return string|null
     */
    public function getLender()
    {
        return $this->container['lender'];
    }

    /**
     * Sets lender
     *
     * @param string|null $lender (Mortgage/Loan) Owner of loan
     *
     * @return self
     */
    public function setLender($lender)
    {
        if (is_null($lender)) {
            throw new \InvalidArgumentException('non-nullable lender cannot be null');
        }
        $this->container['lender'] = $lender;

        return $this;
    }

    /**
     * Gets ending_balance_amount
     *
     * @return float|null
     */
    public function getEndingBalanceAmount()
    {
        return $this->container['ending_balance_amount'];
    }

    /**
     * Sets ending_balance_amount
     *
     * @param float|null $ending_balance_amount (Mortgage/Loan) Ending balance
     *
     * @return self
     */
    public function setEndingBalanceAmount($ending_balance_amount)
    {
        if (is_null($ending_balance_amount)) {
            throw new \InvalidArgumentException('non-nullable ending_balance_amount cannot be null');
        }
        $this->container['ending_balance_amount'] = $ending_balance_amount;

        return $this;
    }

    /**
     * Gets loan_term_type
     *
     * @return string|null
     */
    public function getLoanTermType()
    {
        return $this->container['loan_term_type'];
    }

    /**
     * Sets loan_term_type
     *
     * @param string|null $loan_term_type (Mortgage/Loan) Type of loan term
     *
     * @return self
     */
    public function setLoanTermType($loan_term_type)
    {
        if (is_null($loan_term_type)) {
            throw new \InvalidArgumentException('non-nullable loan_term_type cannot be null');
        }
        $this->container['loan_term_type'] = $loan_term_type;

        return $this;
    }

    /**
     * Gets payments_made
     *
     * @return int|null
     */
    public function getPaymentsMade()
    {
        return $this->container['payments_made'];
    }

    /**
     * Sets payments_made
     *
     * @param int|null $payments_made (Mortgage/Loan) Number of payments made
     *
     * @return self
     */
    public function setPaymentsMade($payments_made)
    {
        if (is_null($payments_made)) {
            throw new \InvalidArgumentException('non-nullable payments_made cannot be null');
        }
        $this->container['payments_made'] = $payments_made;

        return $this;
    }

    /**
     * Gets balloon_amount
     *
     * @return float|null
     */
    public function getBalloonAmount()
    {
        return $this->container['balloon_amount'];
    }

    /**
     * Sets balloon_amount
     *
     * @param float|null $balloon_amount (Mortgage/Loan) Balloon payment amount
     *
     * @return self
     */
    public function setBalloonAmount($balloon_amount)
    {
        if (is_null($balloon_amount)) {
            throw new \InvalidArgumentException('non-nullable balloon_amount cannot be null');
        }
        $this->container['balloon_amount'] = $balloon_amount;

        return $this;
    }

    /**
     * Gets projected_interest
     *
     * @return float|null
     */
    public function getProjectedInterest()
    {
        return $this->container['projected_interest'];
    }

    /**
     * Sets projected_interest
     *
     * @param float|null $projected_interest (Mortgage/Loan) Projected interest on the loan
     *
     * @return self
     */
    public function setProjectedInterest($projected_interest)
    {
        if (is_null($projected_interest)) {
            throw new \InvalidArgumentException('non-nullable projected_interest cannot be null');
        }
        $this->container['projected_interest'] = $projected_interest;

        return $this;
    }

    /**
     * Gets interest_paid_ltd
     *
     * @return float|null
     */
    public function getInterestPaidLtd()
    {
        return $this->container['interest_paid_ltd'];
    }

    /**
     * Sets interest_paid_ltd
     *
     * @param float|null $interest_paid_ltd (Mortgage/Loan) Interest paid since inception of loan (life to date)
     *
     * @return self
     */
    public function setInterestPaidLtd($interest_paid_ltd)
    {
        if (is_null($interest_paid_ltd)) {
            throw new \InvalidArgumentException('non-nullable interest_paid_ltd cannot be null');
        }
        $this->container['interest_paid_ltd'] = $interest_paid_ltd;

        return $this;
    }

    /**
     * Gets interest_rate_type
     *
     * @return string|null
     */
    public function getInterestRateType()
    {
        return $this->container['interest_rate_type'];
    }

    /**
     * Sets interest_rate_type
     *
     * @param string|null $interest_rate_type (Mortgage/Loan) Type of interest rate
     *
     * @return self
     */
    public function setInterestRateType($interest_rate_type)
    {
        if (is_null($interest_rate_type)) {
            throw new \InvalidArgumentException('non-nullable interest_rate_type cannot be null');
        }
        $this->container['interest_rate_type'] = $interest_rate_type;

        return $this;
    }

    /**
     * Gets loan_payment_type
     *
     * @return string|null
     */
    public function getLoanPaymentType()
    {
        return $this->container['loan_payment_type'];
    }

    /**
     * Sets loan_payment_type
     *
     * @param string|null $loan_payment_type (Mortgage/Loan) Type of loan payment
     *
     * @return self
     */
    public function setLoanPaymentType($loan_payment_type)
    {
        if (is_null($loan_payment_type)) {
            throw new \InvalidArgumentException('non-nullable loan_payment_type cannot be null');
        }
        $this->container['loan_payment_type'] = $loan_payment_type;

        return $this;
    }

    /**
     * Gets repayment_plan
     *
     * @return string|null
     */
    public function getRepaymentPlan()
    {
        return $this->container['repayment_plan'];
    }

    /**
     * Sets repayment_plan
     *
     * @param string|null $repayment_plan (Mortgage/Loan) Type of repayment plan for the student loan
     *
     * @return self
     */
    public function setRepaymentPlan($repayment_plan)
    {
        if (is_null($repayment_plan)) {
            throw new \InvalidArgumentException('non-nullable repayment_plan cannot be null');
        }
        $this->container['repayment_plan'] = $repayment_plan;

        return $this;
    }

    /**
     * Gets payments_remaining
     *
     * @return int|null
     */
    public function getPaymentsRemaining()
    {
        return $this->container['payments_remaining'];
    }

    /**
     * Sets payments_remaining
     *
     * @param int|null $payments_remaining (Mortgage/Loan) Number of payments remaining before loan is paid off
     *
     * @return self
     */
    public function setPaymentsRemaining($payments_remaining)
    {
        if (is_null($payments_remaining)) {
            throw new \InvalidArgumentException('non-nullable payments_remaining cannot be null');
        }
        $this->container['payments_remaining'] = $payments_remaining;

        return $this;
    }

    /**
     * Gets margin_balance
     *
     * @return float|null
     */
    public function getMarginBalance()
    {
        return $this->container['margin_balance'];
    }

    /**
     * Sets margin_balance
     *
     * @param float|null $margin_balance (Investment) Net interest earned after deducting interest paid out
     *
     * @return self
     */
    public function setMarginBalance($margin_balance)
    {
        if (is_null($margin_balance)) {
            throw new \InvalidArgumentException('non-nullable margin_balance cannot be null');
        }
        $this->container['margin_balance'] = $margin_balance;

        return $this;
    }

    /**
     * Gets short_balance
     *
     * @return float|null
     */
    public function getShortBalance()
    {
        return $this->container['short_balance'];
    }

    /**
     * Sets short_balance
     *
     * @param float|null $short_balance (Investment) Sum of short balance
     *
     * @return self
     */
    public function setShortBalance($short_balance)
    {
        if (is_null($short_balance)) {
            throw new \InvalidArgumentException('non-nullable short_balance cannot be null');
        }
        $this->container['short_balance'] = $short_balance;

        return $this;
    }

    /**
     * Gets available_cash_balance
     *
     * @return float|null
     */
    public function getAvailableCashBalance()
    {
        return $this->container['available_cash_balance'];
    }

    /**
     * Sets available_cash_balance
     *
     * @param float|null $available_cash_balance (Investment) Amount available for cash withdrawal
     *
     * @return self
     */
    public function setAvailableCashBalance($available_cash_balance)
    {
        if (is_null($available_cash_balance)) {
            throw new \InvalidArgumentException('non-nullable available_cash_balance cannot be null');
        }
        $this->container['available_cash_balance'] = $available_cash_balance;

        return $this;
    }

    /**
     * Gets maturity_value_amount
     *
     * @return float|null
     */
    public function getMaturityValueAmount()
    {
        return $this->container['maturity_value_amount'];
    }

    /**
     * Sets maturity_value_amount
     *
     * @param float|null $maturity_value_amount (Investment) amount payable to an investor at maturity
     *
     * @return self
     */
    public function setMaturityValueAmount($maturity_value_amount)
    {
        if (is_null($maturity_value_amount)) {
            throw new \InvalidArgumentException('non-nullable maturity_value_amount cannot be null');
        }
        $this->container['maturity_value_amount'] = $maturity_value_amount;

        return $this;
    }

    /**
     * Gets vested_balance
     *
     * @return float|null
     */
    public function getVestedBalance()
    {
        return $this->container['vested_balance'];
    }

    /**
     * Sets vested_balance
     *
     * @param float|null $vested_balance (Investment) Vested amount in account
     *
     * @return self
     */
    public function setVestedBalance($vested_balance)
    {
        if (is_null($vested_balance)) {
            throw new \InvalidArgumentException('non-nullable vested_balance cannot be null');
        }
        $this->container['vested_balance'] = $vested_balance;

        return $this;
    }

    /**
     * Gets emp_match_amount
     *
     * @return float|null
     */
    public function getEmpMatchAmount()
    {
        return $this->container['emp_match_amount'];
    }

    /**
     * Sets emp_match_amount
     *
     * @param float|null $emp_match_amount (Investment) Employer matched contributions
     *
     * @return self
     */
    public function setEmpMatchAmount($emp_match_amount)
    {
        if (is_null($emp_match_amount)) {
            throw new \InvalidArgumentException('non-nullable emp_match_amount cannot be null');
        }
        $this->container['emp_match_amount'] = $emp_match_amount;

        return $this;
    }

    /**
     * Gets emp_pretax_contrib_amount
     *
     * @return float|null
     */
    public function getEmpPretaxContribAmount()
    {
        return $this->container['emp_pretax_contrib_amount'];
    }

    /**
     * Sets emp_pretax_contrib_amount
     *
     * @param float|null $emp_pretax_contrib_amount (Investment) Employer pretax contribution amount
     *
     * @return self
     */
    public function setEmpPretaxContribAmount($emp_pretax_contrib_amount)
    {
        if (is_null($emp_pretax_contrib_amount)) {
            throw new \InvalidArgumentException('non-nullable emp_pretax_contrib_amount cannot be null');
        }
        $this->container['emp_pretax_contrib_amount'] = $emp_pretax_contrib_amount;

        return $this;
    }

    /**
     * Gets emp_pretax_contrib_amount_ytd
     *
     * @return float|null
     */
    public function getEmpPretaxContribAmountYtd()
    {
        return $this->container['emp_pretax_contrib_amount_ytd'];
    }

    /**
     * Sets emp_pretax_contrib_amount_ytd
     *
     * @param float|null $emp_pretax_contrib_amount_ytd (Investment) Employer pretax contribution amount year to date
     *
     * @return self
     */
    public function setEmpPretaxContribAmountYtd($emp_pretax_contrib_amount_ytd)
    {
        if (is_null($emp_pretax_contrib_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable emp_pretax_contrib_amount_ytd cannot be null');
        }
        $this->container['emp_pretax_contrib_amount_ytd'] = $emp_pretax_contrib_amount_ytd;

        return $this;
    }

    /**
     * Gets contrib_total_ytd
     *
     * @return float|null
     */
    public function getContribTotalYtd()
    {
        return $this->container['contrib_total_ytd'];
    }

    /**
     * Sets contrib_total_ytd
     *
     * @param float|null $contrib_total_ytd (Investment) Total year to date contributions
     *
     * @return self
     */
    public function setContribTotalYtd($contrib_total_ytd)
    {
        if (is_null($contrib_total_ytd)) {
            throw new \InvalidArgumentException('non-nullable contrib_total_ytd cannot be null');
        }
        $this->container['contrib_total_ytd'] = $contrib_total_ytd;

        return $this;
    }

    /**
     * Gets cash_balance_amount
     *
     * @return float|null
     */
    public function getCashBalanceAmount()
    {
        return $this->container['cash_balance_amount'];
    }

    /**
     * Sets cash_balance_amount
     *
     * @param float|null $cash_balance_amount (Investment) Cash balance of account
     *
     * @return self
     */
    public function setCashBalanceAmount($cash_balance_amount)
    {
        if (is_null($cash_balance_amount)) {
            throw new \InvalidArgumentException('non-nullable cash_balance_amount cannot be null');
        }
        $this->container['cash_balance_amount'] = $cash_balance_amount;

        return $this;
    }

    /**
     * Gets pre_tax_amount
     *
     * @return float|null
     */
    public function getPreTaxAmount()
    {
        return $this->container['pre_tax_amount'];
    }

    /**
     * Sets pre_tax_amount
     *
     * @param float|null $pre_tax_amount (Investment) Pre-tax amount of total balance
     *
     * @return self
     */
    public function setPreTaxAmount($pre_tax_amount)
    {
        if (is_null($pre_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_amount cannot be null');
        }
        $this->container['pre_tax_amount'] = $pre_tax_amount;

        return $this;
    }

    /**
     * Gets after_tax_amount
     *
     * @return float|null
     */
    public function getAfterTaxAmount()
    {
        return $this->container['after_tax_amount'];
    }

    /**
     * Sets after_tax_amount
     *
     * @param float|null $after_tax_amount (Investment) After-tax amount of total balance
     *
     * @return self
     */
    public function setAfterTaxAmount($after_tax_amount)
    {
        if (is_null($after_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable after_tax_amount cannot be null');
        }
        $this->container['after_tax_amount'] = $after_tax_amount;

        return $this;
    }

    /**
     * Gets match_amount
     *
     * @return float|null
     */
    public function getMatchAmount()
    {
        return $this->container['match_amount'];
    }

    /**
     * Sets match_amount
     *
     * @param float|null $match_amount (Investment) Amount matched
     *
     * @return self
     */
    public function setMatchAmount($match_amount)
    {
        if (is_null($match_amount)) {
            throw new \InvalidArgumentException('non-nullable match_amount cannot be null');
        }
        $this->container['match_amount'] = $match_amount;

        return $this;
    }

    /**
     * Gets profit_sharing_amount
     *
     * @return float|null
     */
    public function getProfitSharingAmount()
    {
        return $this->container['profit_sharing_amount'];
    }

    /**
     * Sets profit_sharing_amount
     *
     * @param float|null $profit_sharing_amount (Investment) Amount of balance for profit sharing
     *
     * @return self
     */
    public function setProfitSharingAmount($profit_sharing_amount)
    {
        if (is_null($profit_sharing_amount)) {
            throw new \InvalidArgumentException('non-nullable profit_sharing_amount cannot be null');
        }
        $this->container['profit_sharing_amount'] = $profit_sharing_amount;

        return $this;
    }

    /**
     * Gets rollover_amount
     *
     * @return float|null
     */
    public function getRolloverAmount()
    {
        return $this->container['rollover_amount'];
    }

    /**
     * Sets rollover_amount
     *
     * @param float|null $rollover_amount (Investment) Amount of balance rolled over from original account (401k, etc.)
     *
     * @return self
     */
    public function setRolloverAmount($rollover_amount)
    {
        if (is_null($rollover_amount)) {
            throw new \InvalidArgumentException('non-nullable rollover_amount cannot be null');
        }
        $this->container['rollover_amount'] = $rollover_amount;

        return $this;
    }

    /**
     * Gets other_vest_amount
     *
     * @return float|null
     */
    public function getOtherVestAmount()
    {
        return $this->container['other_vest_amount'];
    }

    /**
     * Sets other_vest_amount
     *
     * @param float|null $other_vest_amount (Investment) Other vested amount
     *
     * @return self
     */
    public function setOtherVestAmount($other_vest_amount)
    {
        if (is_null($other_vest_amount)) {
            throw new \InvalidArgumentException('non-nullable other_vest_amount cannot be null');
        }
        $this->container['other_vest_amount'] = $other_vest_amount;

        return $this;
    }

    /**
     * Gets other_nonvest_amount
     *
     * @return float|null
     */
    public function getOtherNonvestAmount()
    {
        return $this->container['other_nonvest_amount'];
    }

    /**
     * Sets other_nonvest_amount
     *
     * @param float|null $other_nonvest_amount (Investment) Other nonvested amount
     *
     * @return self
     */
    public function setOtherNonvestAmount($other_nonvest_amount)
    {
        if (is_null($other_nonvest_amount)) {
            throw new \InvalidArgumentException('non-nullable other_nonvest_amount cannot be null');
        }
        $this->container['other_nonvest_amount'] = $other_nonvest_amount;

        return $this;
    }

    /**
     * Gets current_loan_balance
     *
     * @return float|null
     */
    public function getCurrentLoanBalance()
    {
        return $this->container['current_loan_balance'];
    }

    /**
     * Sets current_loan_balance
     *
     * @param float|null $current_loan_balance (Investment) Current loan balance
     *
     * @return self
     */
    public function setCurrentLoanBalance($current_loan_balance)
    {
        if (is_null($current_loan_balance)) {
            throw new \InvalidArgumentException('non-nullable current_loan_balance cannot be null');
        }
        $this->container['current_loan_balance'] = $current_loan_balance;

        return $this;
    }

    /**
     * Gets loan_rate
     *
     * @return float|null
     */
    public function getLoanRate()
    {
        return $this->container['loan_rate'];
    }

    /**
     * Sets loan_rate
     *
     * @param float|null $loan_rate (Investment) Interest rate of loan
     *
     * @return self
     */
    public function setLoanRate($loan_rate)
    {
        if (is_null($loan_rate)) {
            throw new \InvalidArgumentException('non-nullable loan_rate cannot be null');
        }
        $this->container['loan_rate'] = $loan_rate;

        return $this;
    }

    /**
     * Gets buy_power
     *
     * @return float|null
     */
    public function getBuyPower()
    {
        return $this->container['buy_power'];
    }

    /**
     * Sets buy_power
     *
     * @param float|null $buy_power (Investment) Money available to buy securities
     *
     * @return self
     */
    public function setBuyPower($buy_power)
    {
        if (is_null($buy_power)) {
            throw new \InvalidArgumentException('non-nullable buy_power cannot be null');
        }
        $this->container['buy_power'] = $buy_power;

        return $this;
    }

    /**
     * Gets rollover_ltd
     *
     * @return float|null
     */
    public function getRolloverLtd()
    {
        return $this->container['rollover_ltd'];
    }

    /**
     * Sets rollover_ltd
     *
     * @param float|null $rollover_ltd (Investment) Life to date of money rolled over
     *
     * @return self
     */
    public function setRolloverLtd($rollover_ltd)
    {
        if (is_null($rollover_ltd)) {
            throw new \InvalidArgumentException('non-nullable rollover_ltd cannot be null');
        }
        $this->container['rollover_ltd'] = $rollover_ltd;

        return $this;
    }

    /**
     * Gets loan_award_id
     *
     * @return string|null
     */
    public function getLoanAwardId()
    {
        return $this->container['loan_award_id'];
    }

    /**
     * Sets loan_award_id
     *
     * @param string|null $loan_award_id (Student Loan) The federal unique loan identifying number
     *
     * @return self
     */
    public function setLoanAwardId($loan_award_id)
    {
        if (is_null($loan_award_id)) {
            throw new \InvalidArgumentException('non-nullable loan_award_id cannot be null');
        }
        $this->container['loan_award_id'] = $loan_award_id;

        return $this;
    }

    /**
     * Gets original_interest_rate
     *
     * @return float|null
     */
    public function getOriginalInterestRate()
    {
        return $this->container['original_interest_rate'];
    }

    /**
     * Sets original_interest_rate
     *
     * @param float|null $original_interest_rate (Student Loan) The original interest rate to which the loan was disbursed, in APY
     *
     * @return self
     */
    public function setOriginalInterestRate($original_interest_rate)
    {
        if (is_null($original_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable original_interest_rate cannot be null');
        }
        $this->container['original_interest_rate'] = $original_interest_rate;

        return $this;
    }

    /**
     * Gets guarantor
     *
     * @return string|null
     */
    public function getGuarantor()
    {
        return $this->container['guarantor'];
    }

    /**
     * Sets guarantor
     *
     * @param string|null $guarantor (Student Loan) The financial institution guarantor of the loan (who will pay the loan amount to the owner if the borrower defaults)
     *
     * @return self
     */
    public function setGuarantor($guarantor)
    {
        if (is_null($guarantor)) {
            throw new \InvalidArgumentException('non-nullable guarantor cannot be null');
        }
        $this->container['guarantor'] = $guarantor;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner (Student Loan) Owner of the loan
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets interest_subsidy_type
     *
     * @return string|null
     */
    public function getInterestSubsidyType()
    {
        return $this->container['interest_subsidy_type'];
    }

    /**
     * Sets interest_subsidy_type
     *
     * @param string|null $interest_subsidy_type (Student Loan) The indication of the presence of an interest subsidy (i.e. subsidized)
     *
     * @return self
     */
    public function setInterestSubsidyType($interest_subsidy_type)
    {
        if (is_null($interest_subsidy_type)) {
            throw new \InvalidArgumentException('non-nullable interest_subsidy_type cannot be null');
        }
        $this->container['interest_subsidy_type'] = $interest_subsidy_type;

        return $this;
    }

    /**
     * Gets interest_balance
     *
     * @return float|null
     */
    public function getInterestBalance()
    {
        return $this->container['interest_balance'];
    }

    /**
     * Sets interest_balance
     *
     * @param float|null $interest_balance (Student Loan) The total outstanding interest balance
     *
     * @return self
     */
    public function setInterestBalance($interest_balance)
    {
        if (is_null($interest_balance)) {
            throw new \InvalidArgumentException('non-nullable interest_balance cannot be null');
        }
        $this->container['interest_balance'] = $interest_balance;

        return $this;
    }

    /**
     * Gets remaining_term_of_ml
     *
     * @return float|null
     */
    public function getRemainingTermOfMl()
    {
        return $this->container['remaining_term_of_ml'];
    }

    /**
     * Sets remaining_term_of_ml
     *
     * @param float|null $remaining_term_of_ml (Student Loan) The number of months still outstanding on a loan
     *
     * @return self
     */
    public function setRemainingTermOfMl($remaining_term_of_ml)
    {
        if (is_null($remaining_term_of_ml)) {
            throw new \InvalidArgumentException('non-nullable remaining_term_of_ml cannot be null');
        }
        $this->container['remaining_term_of_ml'] = $remaining_term_of_ml;

        return $this;
    }

    /**
     * Gets initial_interest_rate
     *
     * @return float|null
     */
    public function getInitialInterestRate()
    {
        return $this->container['initial_interest_rate'];
    }

    /**
     * Sets initial_interest_rate
     *
     * @param float|null $initial_interest_rate (Student Loan) Initial interest rate of loan
     *
     * @return self
     */
    public function setInitialInterestRate($initial_interest_rate)
    {
        if (is_null($initial_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable initial_interest_rate cannot be null');
        }
        $this->container['initial_interest_rate'] = $initial_interest_rate;

        return $this;
    }

    /**
     * Gets fees_balance
     *
     * @return float|null
     */
    public function getFeesBalance()
    {
        return $this->container['fees_balance'];
    }

    /**
     * Sets fees_balance
     *
     * @param float|null $fees_balance (Student Loan) The total outstanding fees balance
     *
     * @return self
     */
    public function setFeesBalance($fees_balance)
    {
        if (is_null($fees_balance)) {
            throw new \InvalidArgumentException('non-nullable fees_balance cannot be null');
        }
        $this->container['fees_balance'] = $fees_balance;

        return $this;
    }

    /**
     * Gets loan_ytd_interest_paid
     *
     * @return float|null
     */
    public function getLoanYtdInterestPaid()
    {
        return $this->container['loan_ytd_interest_paid'];
    }

    /**
     * Sets loan_ytd_interest_paid
     *
     * @param float|null $loan_ytd_interest_paid (Student Loan) Loan interest paid year-to-date
     *
     * @return self
     */
    public function setLoanYtdInterestPaid($loan_ytd_interest_paid)
    {
        if (is_null($loan_ytd_interest_paid)) {
            throw new \InvalidArgumentException('non-nullable loan_ytd_interest_paid cannot be null');
        }
        $this->container['loan_ytd_interest_paid'] = $loan_ytd_interest_paid;

        return $this;
    }

    /**
     * Gets loan_ytd_fees_paid
     *
     * @return float|null
     */
    public function getLoanYtdFeesPaid()
    {
        return $this->container['loan_ytd_fees_paid'];
    }

    /**
     * Sets loan_ytd_fees_paid
     *
     * @param float|null $loan_ytd_fees_paid (Student Loan) Loan fees paid year-to-date
     *
     * @return self
     */
    public function setLoanYtdFeesPaid($loan_ytd_fees_paid)
    {
        if (is_null($loan_ytd_fees_paid)) {
            throw new \InvalidArgumentException('non-nullable loan_ytd_fees_paid cannot be null');
        }
        $this->container['loan_ytd_fees_paid'] = $loan_ytd_fees_paid;

        return $this;
    }

    /**
     * Gets loan_ytd_principal_paid
     *
     * @return float|null
     */
    public function getLoanYtdPrincipalPaid()
    {
        return $this->container['loan_ytd_principal_paid'];
    }

    /**
     * Sets loan_ytd_principal_paid
     *
     * @param float|null $loan_ytd_principal_paid (Student Loan) Loan principal paid year-to-date
     *
     * @return self
     */
    public function setLoanYtdPrincipalPaid($loan_ytd_principal_paid)
    {
        if (is_null($loan_ytd_principal_paid)) {
            throw new \InvalidArgumentException('non-nullable loan_ytd_principal_paid cannot be null');
        }
        $this->container['loan_ytd_principal_paid'] = $loan_ytd_principal_paid;

        return $this;
    }

    /**
     * Gets loan_status
     *
     * @return string|null
     */
    public function getLoanStatus()
    {
        return $this->container['loan_status'];
    }

    /**
     * Sets loan_status
     *
     * @param string|null $loan_status (Student Loan) The repayment status phase (i.e. In School, Grace, Repayment, Deferment, Forbearance)
     *
     * @return self
     */
    public function setLoanStatus($loan_status)
    {
        if (is_null($loan_status)) {
            throw new \InvalidArgumentException('non-nullable loan_status cannot be null');
        }
        $this->container['loan_status'] = $loan_status;

        return $this;
    }

    /**
     * Gets loan_status_start_date
     *
     * @return int|null
     */
    public function getLoanStatusStartDate()
    {
        return $this->container['loan_status_start_date'];
    }

    /**
     * Sets loan_status_start_date
     *
     * @param int|null $loan_status_start_date (Student Loan) The start date of the current status. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setLoanStatusStartDate($loan_status_start_date)
    {
        if (is_null($loan_status_start_date)) {
            throw new \InvalidArgumentException('non-nullable loan_status_start_date cannot be null');
        }
        $this->container['loan_status_start_date'] = $loan_status_start_date;

        return $this;
    }

    /**
     * Gets loan_status_end_date
     *
     * @return int|null
     */
    public function getLoanStatusEndDate()
    {
        return $this->container['loan_status_end_date'];
    }

    /**
     * Sets loan_status_end_date
     *
     * @param int|null $loan_status_end_date (Student Loan) The end date of the current status. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setLoanStatusEndDate($loan_status_end_date)
    {
        if (is_null($loan_status_end_date)) {
            throw new \InvalidArgumentException('non-nullable loan_status_end_date cannot be null');
        }
        $this->container['loan_status_end_date'] = $loan_status_end_date;

        return $this;
    }

    /**
     * Gets weighted_interest_rate
     *
     * @return float|null
     */
    public function getWeightedInterestRate()
    {
        return $this->container['weighted_interest_rate'];
    }

    /**
     * Sets weighted_interest_rate
     *
     * @param float|null $weighted_interest_rate (Student Loan) The interest rate of multiple interest rates and balances at the group level, in APY
     *
     * @return self
     */
    public function setWeightedInterestRate($weighted_interest_rate)
    {
        if (is_null($weighted_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable weighted_interest_rate cannot be null');
        }
        $this->container['weighted_interest_rate'] = $weighted_interest_rate;

        return $this;
    }

    /**
     * Gets repayment_plan_start_date
     *
     * @return int|null
     */
    public function getRepaymentPlanStartDate()
    {
        return $this->container['repayment_plan_start_date'];
    }

    /**
     * Sets repayment_plan_start_date
     *
     * @param int|null $repayment_plan_start_date (Student Loan) The start date of the current repayment plan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setRepaymentPlanStartDate($repayment_plan_start_date)
    {
        if (is_null($repayment_plan_start_date)) {
            throw new \InvalidArgumentException('non-nullable repayment_plan_start_date cannot be null');
        }
        $this->container['repayment_plan_start_date'] = $repayment_plan_start_date;

        return $this;
    }

    /**
     * Gets repayment_plan_end_date
     *
     * @return int|null
     */
    public function getRepaymentPlanEndDate()
    {
        return $this->container['repayment_plan_end_date'];
    }

    /**
     * Sets repayment_plan_end_date
     *
     * @param int|null $repayment_plan_end_date (Student Loan) The end date of the current repayment plan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setRepaymentPlanEndDate($repayment_plan_end_date)
    {
        if (is_null($repayment_plan_end_date)) {
            throw new \InvalidArgumentException('non-nullable repayment_plan_end_date cannot be null');
        }
        $this->container['repayment_plan_end_date'] = $repayment_plan_end_date;

        return $this;
    }

    /**
     * Gets expected_payoff_date
     *
     * @return int|null
     */
    public function getExpectedPayoffDate()
    {
        return $this->container['expected_payoff_date'];
    }

    /**
     * Sets expected_payoff_date
     *
     * @param int|null $expected_payoff_date (Student Loan) The expected date of the payoff date. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setExpectedPayoffDate($expected_payoff_date)
    {
        if (is_null($expected_payoff_date)) {
            throw new \InvalidArgumentException('non-nullable expected_payoff_date cannot be null');
        }
        $this->container['expected_payoff_date'] = $expected_payoff_date;

        return $this;
    }

    /**
     * Gets out_of_school_date
     *
     * @return int|null
     */
    public function getOutOfSchoolDate()
    {
        return $this->container['out_of_school_date'];
    }

    /**
     * Sets out_of_school_date
     *
     * @param int|null $out_of_school_date (Student Loan) The date the borrower graduated or dropped below half-time enrollment in school. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setOutOfSchoolDate($out_of_school_date)
    {
        if (is_null($out_of_school_date)) {
            throw new \InvalidArgumentException('non-nullable out_of_school_date cannot be null');
        }
        $this->container['out_of_school_date'] = $out_of_school_date;

        return $this;
    }

    /**
     * Gets convert_to_repayment
     *
     * @return int|null
     */
    public function getConvertToRepayment()
    {
        return $this->container['convert_to_repayment'];
    }

    /**
     * Sets convert_to_repayment
     *
     * @param int|null $convert_to_repayment (Student Loan) The date the loan enters into repayment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setConvertToRepayment($convert_to_repayment)
    {
        if (is_null($convert_to_repayment)) {
            throw new \InvalidArgumentException('non-nullable convert_to_repayment cannot be null');
        }
        $this->container['convert_to_repayment'] = $convert_to_repayment;

        return $this;
    }

    /**
     * Gets days_delinquent
     *
     * @return int|null
     */
    public function getDaysDelinquent()
    {
        return $this->container['days_delinquent'];
    }

    /**
     * Sets days_delinquent
     *
     * @param int|null $days_delinquent (Student Loan) The number of days past a due date that a payment should have been made
     *
     * @return self
     */
    public function setDaysDelinquent($days_delinquent)
    {
        if (is_null($days_delinquent)) {
            throw new \InvalidArgumentException('non-nullable days_delinquent cannot be null');
        }
        $this->container['days_delinquent'] = $days_delinquent;

        return $this;
    }

    /**
     * Gets total_principal_paid
     *
     * @return float|null
     */
    public function getTotalPrincipalPaid()
    {
        return $this->container['total_principal_paid'];
    }

    /**
     * Sets total_principal_paid
     *
     * @param float|null $total_principal_paid (Student Loan) The total amount paid towards the principal balance
     *
     * @return self
     */
    public function setTotalPrincipalPaid($total_principal_paid)
    {
        if (is_null($total_principal_paid)) {
            throw new \InvalidArgumentException('non-nullable total_principal_paid cannot be null');
        }
        $this->container['total_principal_paid'] = $total_principal_paid;

        return $this;
    }

    /**
     * Gets total_interest_paid
     *
     * @return float|null
     */
    public function getTotalInterestPaid()
    {
        return $this->container['total_interest_paid'];
    }

    /**
     * Sets total_interest_paid
     *
     * @param float|null $total_interest_paid (Student Loan) The total amount paid towards interest
     *
     * @return self
     */
    public function setTotalInterestPaid($total_interest_paid)
    {
        if (is_null($total_interest_paid)) {
            throw new \InvalidArgumentException('non-nullable total_interest_paid cannot be null');
        }
        $this->container['total_interest_paid'] = $total_interest_paid;

        return $this;
    }

    /**
     * Gets total_amount_paid
     *
     * @return float|null
     */
    public function getTotalAmountPaid()
    {
        return $this->container['total_amount_paid'];
    }

    /**
     * Sets total_amount_paid
     *
     * @param float|null $total_amount_paid (Student Loan) The total amount paid
     *
     * @return self
     */
    public function setTotalAmountPaid($total_amount_paid)
    {
        if (is_null($total_amount_paid)) {
            throw new \InvalidArgumentException('non-nullable total_amount_paid cannot be null');
        }
        $this->container['total_amount_paid'] = $total_amount_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


