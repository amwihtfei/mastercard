<?php
/**
 * AccountOwnerDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountOwnerDetails Class Doc Comment
 *
 * @category Class
 * @description Owner of a customer account
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountOwnerDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountOwnerDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'relationship' => 'string',
        'owner_name' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'suffix' => 'string',
        'name_classification' => 'string',
        'name_classificationconfidencescore' => 'float',
        'addresses' => '\OpenAPI\Client\Model\AccountOwnerAddress[]',
        'emails' => '\OpenAPI\Client\Model\AccountOwnerEmail[]',
        'phones' => '\OpenAPI\Client\Model\AccountOwnerPhone[]',
        'documentations' => '\OpenAPI\Client\Model\AccountOwnerDocumentation[]',
        'identity_insights' => '\OpenAPI\Client\Model\AccountOwnerIdentityInsights'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'relationship' => null,
        'owner_name' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'suffix' => null,
        'name_classification' => null,
        'name_classificationconfidencescore' => null,
        'addresses' => null,
        'emails' => null,
        'phones' => null,
        'documentations' => null,
        'identity_insights' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'relationship' => false,
        'owner_name' => false,
        'first_name' => false,
        'middle_name' => false,
        'last_name' => false,
        'suffix' => false,
        'name_classification' => false,
        'name_classificationconfidencescore' => false,
        'addresses' => false,
        'emails' => false,
        'phones' => false,
        'documentations' => false,
        'identity_insights' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relationship' => 'relationship',
        'owner_name' => 'ownerName',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_name' => 'lastName',
        'suffix' => 'suffix',
        'name_classification' => 'nameClassification',
        'name_classificationconfidencescore' => 'nameClassificationconfidencescore',
        'addresses' => 'addresses',
        'emails' => 'emails',
        'phones' => 'phones',
        'documentations' => 'documentations',
        'identity_insights' => 'identityInsights'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relationship' => 'setRelationship',
        'owner_name' => 'setOwnerName',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'suffix' => 'setSuffix',
        'name_classification' => 'setNameClassification',
        'name_classificationconfidencescore' => 'setNameClassificationconfidencescore',
        'addresses' => 'setAddresses',
        'emails' => 'setEmails',
        'phones' => 'setPhones',
        'documentations' => 'setDocumentations',
        'identity_insights' => 'setIdentityInsights'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relationship' => 'getRelationship',
        'owner_name' => 'getOwnerName',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'suffix' => 'getSuffix',
        'name_classification' => 'getNameClassification',
        'name_classificationconfidencescore' => 'getNameClassificationconfidencescore',
        'addresses' => 'getAddresses',
        'emails' => 'getEmails',
        'phones' => 'getPhones',
        'documentations' => 'getDocumentations',
        'identity_insights' => 'getIdentityInsights'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('owner_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('name_classification', $data ?? [], null);
        $this->setIfExists('name_classificationconfidencescore', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('documentations', $data ?? [], null);
        $this->setIfExists('identity_insights', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['owner_name'] === null) {
            $invalidProperties[] = "'owner_name' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relationship
     *
     * @return string|null
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string|null $relationship The type of relationship to the account:   * \"AUTHORIZED_USER\"    * \"BUSINESS\"     * \"FOR_BENEFIT_OF_PRIMARY\"    * \"FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED\"    * \"FOR_BENEFIT_OF_SECONDARY\"  * \"FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED\"  * \"FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED\"  * \"POWER_OF_ATTORNEY\"  * \"PRIMARY_JOINT_TENANTS\"  * \"PRIMARY\"  * \"PRIMARY_BORROWER\"  * \"PRIMARY_JOINT\"  * \"SECONDARY\"  * \"SECONDARY_JOINT_TENANTS\"  * \"SECONDARY_BORROWER\"  * \"SECONDARY_JOINT\"  * \"SOLE_OWNER\"  * \"TRUSTEE\"  * \"UNIFORM_TRANSFER_TO_MINOR\"
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        if (is_null($relationship)) {
            throw new \InvalidArgumentException('non-nullable relationship cannot be null');
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string $owner_name The full name of the account owner. Multiple account owners are returned in one string per the source data from the institution.
     *
     * @return self
     */
    public function setOwnerName($owner_name)
    {
        if (is_null($owner_name)) {
            throw new \InvalidArgumentException('non-nullable owner_name cannot be null');
        }
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the account holder
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name The middle name of the account holder
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the account holder
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix A generational or academic suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets name_classification
     *
     * @return string|null
     */
    public function getNameClassification()
    {
        return $this->container['name_classification'];
    }

    /**
     * Sets name_classification
     *
     * @param string|null $name_classification The classification of the account holder: * \"person / personal / home\" * \"business\" * \"other\"
     *
     * @return self
     */
    public function setNameClassification($name_classification)
    {
        if (is_null($name_classification)) {
            throw new \InvalidArgumentException('non-nullable name_classification cannot be null');
        }
        $this->container['name_classification'] = $name_classification;

        return $this;
    }

    /**
     * Gets name_classificationconfidencescore
     *
     * @return float|null
     */
    public function getNameClassificationconfidencescore()
    {
        return $this->container['name_classificationconfidencescore'];
    }

    /**
     * Sets name_classificationconfidencescore
     *
     * @param float|null $name_classificationconfidencescore The confidence score 0-100 of the name classification.
     *
     * @return self
     */
    public function setNameClassificationconfidencescore($name_classificationconfidencescore)
    {
        if (is_null($name_classificationconfidencescore)) {
            throw new \InvalidArgumentException('non-nullable name_classificationconfidencescore cannot be null');
        }
        $this->container['name_classificationconfidencescore'] = $name_classificationconfidencescore;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\AccountOwnerAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\AccountOwnerAddress[] $addresses List of addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \OpenAPI\Client\Model\AccountOwnerEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \OpenAPI\Client\Model\AccountOwnerEmail[]|null $emails List of emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \OpenAPI\Client\Model\AccountOwnerPhone[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \OpenAPI\Client\Model\AccountOwnerPhone[]|null $phones List of phones
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets documentations
     *
     * @return \OpenAPI\Client\Model\AccountOwnerDocumentation[]|null
     */
    public function getDocumentations()
    {
        return $this->container['documentations'];
    }

    /**
     * Sets documentations
     *
     * @param \OpenAPI\Client\Model\AccountOwnerDocumentation[]|null $documentations List of account owner documentation
     *
     * @return self
     */
    public function setDocumentations($documentations)
    {
        if (is_null($documentations)) {
            throw new \InvalidArgumentException('non-nullable documentations cannot be null');
        }
        $this->container['documentations'] = $documentations;

        return $this;
    }

    /**
     * Gets identity_insights
     *
     * @return \OpenAPI\Client\Model\AccountOwnerIdentityInsights|null
     */
    public function getIdentityInsights()
    {
        return $this->container['identity_insights'];
    }

    /**
     * Sets identity_insights
     *
     * @param \OpenAPI\Client\Model\AccountOwnerIdentityInsights|null $identity_insights identity_insights
     *
     * @return self
     */
    public function setIdentityInsights($identity_insights)
    {
        if (is_null($identity_insights)) {
            throw new \InvalidArgumentException('non-nullable identity_insights cannot be null');
        }
        $this->container['identity_insights'] = $identity_insights;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


