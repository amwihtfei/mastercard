<?php
/**
 * AnalyticsReportData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalyticsReportData Class Doc Comment
 *
 * @category Class
 * @description Parameters supplied by the client requesting the analytics.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnalyticsReportData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalyticsReportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'for_cra_purpose' => 'bool',
        'applicant_is_personal_guarantor' => 'bool',
        'time_interval_types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'for_cra_purpose' => null,
        'applicant_is_personal_guarantor' => null,
        'time_interval_types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'for_cra_purpose' => false,
        'applicant_is_personal_guarantor' => false,
        'time_interval_types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'for_cra_purpose' => 'forCraPurpose',
        'applicant_is_personal_guarantor' => 'applicantIsPersonalGuarantor',
        'time_interval_types' => 'timeIntervalTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'for_cra_purpose' => 'setForCraPurpose',
        'applicant_is_personal_guarantor' => 'setApplicantIsPersonalGuarantor',
        'time_interval_types' => 'setTimeIntervalTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'for_cra_purpose' => 'getForCraPurpose',
        'applicant_is_personal_guarantor' => 'getApplicantIsPersonalGuarantor',
        'time_interval_types' => 'getTimeIntervalTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('for_cra_purpose', $data ?? [], null);
        $this->setIfExists('applicant_is_personal_guarantor', $data ?? [], null);
        $this->setIfExists('time_interval_types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['for_cra_purpose'] === null) {
            $invalidProperties[] = "'for_cra_purpose' can't be null";
        }
        if (!is_null($this->container['time_interval_types']) && (count($this->container['time_interval_types']) > 2)) {
            $invalidProperties[] = "invalid value for 'time_interval_types', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets for_cra_purpose
     *
     * @return bool
     */
    public function getForCraPurpose()
    {
        return $this->container['for_cra_purpose'];
    }

    /**
     * Sets for_cra_purpose
     *
     * @param bool $for_cra_purpose Field to indicate if the requested report is for CRA or NONCRA. For small business lending or other similar business use cases, pass the value as “true” for purposes of this field.
     *
     * @return self
     */
    public function setForCraPurpose($for_cra_purpose)
    {
        if (is_null($for_cra_purpose)) {
            throw new \InvalidArgumentException('non-nullable for_cra_purpose cannot be null');
        }
        $this->container['for_cra_purpose'] = $for_cra_purpose;

        return $this;
    }

    /**
     * Gets applicant_is_personal_guarantor
     *
     * @return bool|null
     */
    public function getApplicantIsPersonalGuarantor()
    {
        return $this->container['applicant_is_personal_guarantor'];
    }

    /**
     * Sets applicant_is_personal_guarantor
     *
     * @param bool|null $applicant_is_personal_guarantor Field to indicate if the business owner will personally guarantee the loan. If true, a consumer record will be required.
     *
     * @return self
     */
    public function setApplicantIsPersonalGuarantor($applicant_is_personal_guarantor)
    {
        if (is_null($applicant_is_personal_guarantor)) {
            throw new \InvalidArgumentException('non-nullable applicant_is_personal_guarantor cannot be null');
        }
        $this->container['applicant_is_personal_guarantor'] = $applicant_is_personal_guarantor;

        return $this;
    }

    /**
     * Gets time_interval_types
     *
     * @return string[]|null
     */
    public function getTimeIntervalTypes()
    {
        return $this->container['time_interval_types'];
    }

    /**
     * Sets time_interval_types
     *
     * @param string[]|null $time_interval_types Requested time interval for attribute values.
     *
     * @return self
     */
    public function setTimeIntervalTypes($time_interval_types)
    {
        if (is_null($time_interval_types)) {
            throw new \InvalidArgumentException('non-nullable time_interval_types cannot be null');
        }

        if ((count($time_interval_types) > 2)) {
            throw new \InvalidArgumentException('invalid value for $time_interval_types when calling AnalyticsReportData., number of items must be less than or equal to 2.');
        }
        $this->container['time_interval_types'] = $time_interval_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


