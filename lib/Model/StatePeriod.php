<?php
/**
 * StatePeriod
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatePeriod Class Doc Comment
 *
 * @category Class
 * @description Statistics for one period in the report of a StateAttribute.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatePeriod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatePeriod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beginning_value' => 'float',
        'count' => 'int',
        'end_date' => '\DateTime',
        'ending_value' => 'float',
        'max' => 'float',
        'mean' => 'float',
        'median' => 'float',
        'min' => 'float',
        'standard_deviation' => 'float',
        'start_date' => '\DateTime',
        'sum' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beginning_value' => null,
        'count' => null,
        'end_date' => 'date',
        'ending_value' => null,
        'max' => null,
        'mean' => null,
        'median' => null,
        'min' => null,
        'standard_deviation' => null,
        'start_date' => 'date',
        'sum' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beginning_value' => false,
        'count' => false,
        'end_date' => false,
        'ending_value' => false,
        'max' => false,
        'mean' => false,
        'median' => false,
        'min' => false,
        'standard_deviation' => false,
        'start_date' => false,
        'sum' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beginning_value' => 'beginningValue',
        'count' => 'count',
        'end_date' => 'endDate',
        'ending_value' => 'endingValue',
        'max' => 'max',
        'mean' => 'mean',
        'median' => 'median',
        'min' => 'min',
        'standard_deviation' => 'standardDeviation',
        'start_date' => 'startDate',
        'sum' => 'sum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beginning_value' => 'setBeginningValue',
        'count' => 'setCount',
        'end_date' => 'setEndDate',
        'ending_value' => 'setEndingValue',
        'max' => 'setMax',
        'mean' => 'setMean',
        'median' => 'setMedian',
        'min' => 'setMin',
        'standard_deviation' => 'setStandardDeviation',
        'start_date' => 'setStartDate',
        'sum' => 'setSum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beginning_value' => 'getBeginningValue',
        'count' => 'getCount',
        'end_date' => 'getEndDate',
        'ending_value' => 'getEndingValue',
        'max' => 'getMax',
        'mean' => 'getMean',
        'median' => 'getMedian',
        'min' => 'getMin',
        'standard_deviation' => 'getStandardDeviation',
        'start_date' => 'getStartDate',
        'sum' => 'getSum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('beginning_value', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('ending_value', $data ?? [], null);
        $this->setIfExists('max', $data ?? [], null);
        $this->setIfExists('mean', $data ?? [], null);
        $this->setIfExists('median', $data ?? [], null);
        $this->setIfExists('min', $data ?? [], null);
        $this->setIfExists('standard_deviation', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('sum', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['beginning_value'] === null) {
            $invalidProperties[] = "'beginning_value' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['ending_value'] === null) {
            $invalidProperties[] = "'ending_value' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beginning_value
     *
     * @return float
     */
    public function getBeginningValue()
    {
        return $this->container['beginning_value'];
    }

    /**
     * Sets beginning_value
     *
     * @param float $beginning_value Value on the first date in the period
     *
     * @return self
     */
    public function setBeginningValue($beginning_value)
    {
        if (is_null($beginning_value)) {
            throw new \InvalidArgumentException('non-nullable beginning_value cannot be null');
        }
        $this->container['beginning_value'] = $beginning_value;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count Count of data points during the period
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End date for the period being reported
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets ending_value
     *
     * @return float
     */
    public function getEndingValue()
    {
        return $this->container['ending_value'];
    }

    /**
     * Sets ending_value
     *
     * @param float $ending_value Value on the last date in the period
     *
     * @return self
     */
    public function setEndingValue($ending_value)
    {
        if (is_null($ending_value)) {
            throw new \InvalidArgumentException('non-nullable ending_value cannot be null');
        }
        $this->container['ending_value'] = $ending_value;

        return $this;
    }

    /**
     * Gets max
     *
     * @return float|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param float|null $max Maximum amount during the period
     *
     * @return self
     */
    public function setMax($max)
    {
        if (is_null($max)) {
            throw new \InvalidArgumentException('non-nullable max cannot be null');
        }
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets mean
     *
     * @return float|null
     */
    public function getMean()
    {
        return $this->container['mean'];
    }

    /**
     * Sets mean
     *
     * @param float|null $mean Mean of amounts during the period
     *
     * @return self
     */
    public function setMean($mean)
    {
        if (is_null($mean)) {
            throw new \InvalidArgumentException('non-nullable mean cannot be null');
        }
        $this->container['mean'] = $mean;

        return $this;
    }

    /**
     * Gets median
     *
     * @return float|null
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     *
     * @param float|null $median Median of amounts during the period
     *
     * @return self
     */
    public function setMedian($median)
    {
        if (is_null($median)) {
            throw new \InvalidArgumentException('non-nullable median cannot be null');
        }
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets min
     *
     * @return float|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param float|null $min Minimum amount during the period
     *
     * @return self
     */
    public function setMin($min)
    {
        if (is_null($min)) {
            throw new \InvalidArgumentException('non-nullable min cannot be null');
        }
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets standard_deviation
     *
     * @return float|null
     */
    public function getStandardDeviation()
    {
        return $this->container['standard_deviation'];
    }

    /**
     * Sets standard_deviation
     *
     * @param float|null $standard_deviation Standard deviation of amounts during the period
     *
     * @return self
     */
    public function setStandardDeviation($standard_deviation)
    {
        if (is_null($standard_deviation)) {
            throw new \InvalidArgumentException('non-nullable standard_deviation cannot be null');
        }
        $this->container['standard_deviation'] = $standard_deviation;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date for the period being reported
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return float|null
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param float|null $sum Sum of amounts during the period
     *
     * @return self
     */
    public function setSum($sum)
    {
        if (is_null($sum)) {
            throw new \InvalidArgumentException('non-nullable sum cannot be null');
        }
        $this->container['sum'] = $sum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


