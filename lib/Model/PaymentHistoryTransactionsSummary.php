<?php
/**
 * PaymentHistoryTransactionsSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentHistoryTransactionsSummary Class Doc Comment
 *
 * @category Class
 * @description Top-level summary of transactions
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentHistoryTransactionsSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentHistoryTransactionsSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_non_sufficient_funds' => 'float',
        'average_monthly_non_sufficient_funds' => 'float',
        'total_deposits' => 'float',
        'average_monthly_deposits' => 'float',
        'total_withdrawals' => 'float',
        'average_monthly_withdrawals' => 'float',
        'begin_date' => 'string',
        'end_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_non_sufficient_funds' => null,
        'average_monthly_non_sufficient_funds' => null,
        'total_deposits' => null,
        'average_monthly_deposits' => null,
        'total_withdrawals' => null,
        'average_monthly_withdrawals' => null,
        'begin_date' => null,
        'end_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_non_sufficient_funds' => false,
        'average_monthly_non_sufficient_funds' => false,
        'total_deposits' => false,
        'average_monthly_deposits' => false,
        'total_withdrawals' => false,
        'average_monthly_withdrawals' => false,
        'begin_date' => false,
        'end_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_non_sufficient_funds' => 'totalNonSufficientFunds',
        'average_monthly_non_sufficient_funds' => 'averageMonthlyNonSufficientFunds',
        'total_deposits' => 'totalDeposits',
        'average_monthly_deposits' => 'averageMonthlyDeposits',
        'total_withdrawals' => 'totalWithdrawals',
        'average_monthly_withdrawals' => 'averageMonthlyWithdrawals',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_non_sufficient_funds' => 'setTotalNonSufficientFunds',
        'average_monthly_non_sufficient_funds' => 'setAverageMonthlyNonSufficientFunds',
        'total_deposits' => 'setTotalDeposits',
        'average_monthly_deposits' => 'setAverageMonthlyDeposits',
        'total_withdrawals' => 'setTotalWithdrawals',
        'average_monthly_withdrawals' => 'setAverageMonthlyWithdrawals',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_non_sufficient_funds' => 'getTotalNonSufficientFunds',
        'average_monthly_non_sufficient_funds' => 'getAverageMonthlyNonSufficientFunds',
        'total_deposits' => 'getTotalDeposits',
        'average_monthly_deposits' => 'getAverageMonthlyDeposits',
        'total_withdrawals' => 'getTotalWithdrawals',
        'average_monthly_withdrawals' => 'getAverageMonthlyWithdrawals',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_non_sufficient_funds', $data ?? [], null);
        $this->setIfExists('average_monthly_non_sufficient_funds', $data ?? [], null);
        $this->setIfExists('total_deposits', $data ?? [], null);
        $this->setIfExists('average_monthly_deposits', $data ?? [], null);
        $this->setIfExists('total_withdrawals', $data ?? [], null);
        $this->setIfExists('average_monthly_withdrawals', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_non_sufficient_funds'] === null) {
            $invalidProperties[] = "'total_non_sufficient_funds' can't be null";
        }
        if ($this->container['average_monthly_non_sufficient_funds'] === null) {
            $invalidProperties[] = "'average_monthly_non_sufficient_funds' can't be null";
        }
        if ($this->container['total_deposits'] === null) {
            $invalidProperties[] = "'total_deposits' can't be null";
        }
        if ($this->container['average_monthly_deposits'] === null) {
            $invalidProperties[] = "'average_monthly_deposits' can't be null";
        }
        if ($this->container['total_withdrawals'] === null) {
            $invalidProperties[] = "'total_withdrawals' can't be null";
        }
        if ($this->container['average_monthly_withdrawals'] === null) {
            $invalidProperties[] = "'average_monthly_withdrawals' can't be null";
        }
        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_non_sufficient_funds
     *
     * @return float
     */
    public function getTotalNonSufficientFunds()
    {
        return $this->container['total_non_sufficient_funds'];
    }

    /**
     * Sets total_non_sufficient_funds
     *
     * @param float $total_non_sufficient_funds Total of NSF transactions
     *
     * @return self
     */
    public function setTotalNonSufficientFunds($total_non_sufficient_funds)
    {
        if (is_null($total_non_sufficient_funds)) {
            throw new \InvalidArgumentException('non-nullable total_non_sufficient_funds cannot be null');
        }
        $this->container['total_non_sufficient_funds'] = $total_non_sufficient_funds;

        return $this;
    }

    /**
     * Gets average_monthly_non_sufficient_funds
     *
     * @return float
     */
    public function getAverageMonthlyNonSufficientFunds()
    {
        return $this->container['average_monthly_non_sufficient_funds'];
    }

    /**
     * Sets average_monthly_non_sufficient_funds
     *
     * @param float $average_monthly_non_sufficient_funds Monthly average of NSF transactions
     *
     * @return self
     */
    public function setAverageMonthlyNonSufficientFunds($average_monthly_non_sufficient_funds)
    {
        if (is_null($average_monthly_non_sufficient_funds)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_non_sufficient_funds cannot be null');
        }
        $this->container['average_monthly_non_sufficient_funds'] = $average_monthly_non_sufficient_funds;

        return $this;
    }

    /**
     * Gets total_deposits
     *
     * @return float
     */
    public function getTotalDeposits()
    {
        return $this->container['total_deposits'];
    }

    /**
     * Sets total_deposits
     *
     * @param float $total_deposits Total of deposit transactions
     *
     * @return self
     */
    public function setTotalDeposits($total_deposits)
    {
        if (is_null($total_deposits)) {
            throw new \InvalidArgumentException('non-nullable total_deposits cannot be null');
        }
        $this->container['total_deposits'] = $total_deposits;

        return $this;
    }

    /**
     * Gets average_monthly_deposits
     *
     * @return float
     */
    public function getAverageMonthlyDeposits()
    {
        return $this->container['average_monthly_deposits'];
    }

    /**
     * Sets average_monthly_deposits
     *
     * @param float $average_monthly_deposits Monthly average of deposit transactions
     *
     * @return self
     */
    public function setAverageMonthlyDeposits($average_monthly_deposits)
    {
        if (is_null($average_monthly_deposits)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_deposits cannot be null');
        }
        $this->container['average_monthly_deposits'] = $average_monthly_deposits;

        return $this;
    }

    /**
     * Gets total_withdrawals
     *
     * @return float
     */
    public function getTotalWithdrawals()
    {
        return $this->container['total_withdrawals'];
    }

    /**
     * Sets total_withdrawals
     *
     * @param float $total_withdrawals Total of withdrawals transactions
     *
     * @return self
     */
    public function setTotalWithdrawals($total_withdrawals)
    {
        if (is_null($total_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable total_withdrawals cannot be null');
        }
        $this->container['total_withdrawals'] = $total_withdrawals;

        return $this;
    }

    /**
     * Gets average_monthly_withdrawals
     *
     * @return float
     */
    public function getAverageMonthlyWithdrawals()
    {
        return $this->container['average_monthly_withdrawals'];
    }

    /**
     * Sets average_monthly_withdrawals
     *
     * @param float $average_monthly_withdrawals Monthly average of withdrawal transactions
     *
     * @return self
     */
    public function setAverageMonthlyWithdrawals($average_monthly_withdrawals)
    {
        if (is_null($average_monthly_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_withdrawals cannot be null');
        }
        $this->container['average_monthly_withdrawals'] = $average_monthly_withdrawals;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return string
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param string $begin_date ISO-8601 date of earliest transaction
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date ISO-8601 date of latest transaction
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


