<?php
/**
 * CashFlowOutflowAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CashFlowOutflowAttributes Class Doc Comment
 *
 * @category Class
 * @description Outflow attributes
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CashFlowOutflowAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CashFlowOutflowAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'average_withdrawal_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'count_withdrawals_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndCount[]',
        'historic_count_of_withdrawal_transactions' => 'int',
        'historic_sum_of_withdrawals' => 'float',
        'maximum_withdrawal_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'minimum_withdrawal_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]',
        'sum_withdrawals_by_month_for_the_report_time_period' => '\OpenAPI\Client\Model\ObbDateRangeAndAmount[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'average_withdrawal_by_month_for_the_report_time_period' => null,
        'count_withdrawals_by_month_for_the_report_time_period' => null,
        'historic_count_of_withdrawal_transactions' => null,
        'historic_sum_of_withdrawals' => null,
        'maximum_withdrawal_by_month_for_the_report_time_period' => null,
        'minimum_withdrawal_by_month_for_the_report_time_period' => null,
        'sum_withdrawals_by_month_for_the_report_time_period' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'average_withdrawal_by_month_for_the_report_time_period' => false,
        'count_withdrawals_by_month_for_the_report_time_period' => false,
        'historic_count_of_withdrawal_transactions' => false,
        'historic_sum_of_withdrawals' => false,
        'maximum_withdrawal_by_month_for_the_report_time_period' => false,
        'minimum_withdrawal_by_month_for_the_report_time_period' => false,
        'sum_withdrawals_by_month_for_the_report_time_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_withdrawal_by_month_for_the_report_time_period' => 'averageWithdrawalByMonthForTheReportTimePeriod',
        'count_withdrawals_by_month_for_the_report_time_period' => 'countWithdrawalsByMonthForTheReportTimePeriod',
        'historic_count_of_withdrawal_transactions' => 'historicCountOfWithdrawalTransactions',
        'historic_sum_of_withdrawals' => 'historicSumOfWithdrawals',
        'maximum_withdrawal_by_month_for_the_report_time_period' => 'maximumWithdrawalByMonthForTheReportTimePeriod',
        'minimum_withdrawal_by_month_for_the_report_time_period' => 'minimumWithdrawalByMonthForTheReportTimePeriod',
        'sum_withdrawals_by_month_for_the_report_time_period' => 'sumWithdrawalsByMonthForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_withdrawal_by_month_for_the_report_time_period' => 'setAverageWithdrawalByMonthForTheReportTimePeriod',
        'count_withdrawals_by_month_for_the_report_time_period' => 'setCountWithdrawalsByMonthForTheReportTimePeriod',
        'historic_count_of_withdrawal_transactions' => 'setHistoricCountOfWithdrawalTransactions',
        'historic_sum_of_withdrawals' => 'setHistoricSumOfWithdrawals',
        'maximum_withdrawal_by_month_for_the_report_time_period' => 'setMaximumWithdrawalByMonthForTheReportTimePeriod',
        'minimum_withdrawal_by_month_for_the_report_time_period' => 'setMinimumWithdrawalByMonthForTheReportTimePeriod',
        'sum_withdrawals_by_month_for_the_report_time_period' => 'setSumWithdrawalsByMonthForTheReportTimePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_withdrawal_by_month_for_the_report_time_period' => 'getAverageWithdrawalByMonthForTheReportTimePeriod',
        'count_withdrawals_by_month_for_the_report_time_period' => 'getCountWithdrawalsByMonthForTheReportTimePeriod',
        'historic_count_of_withdrawal_transactions' => 'getHistoricCountOfWithdrawalTransactions',
        'historic_sum_of_withdrawals' => 'getHistoricSumOfWithdrawals',
        'maximum_withdrawal_by_month_for_the_report_time_period' => 'getMaximumWithdrawalByMonthForTheReportTimePeriod',
        'minimum_withdrawal_by_month_for_the_report_time_period' => 'getMinimumWithdrawalByMonthForTheReportTimePeriod',
        'sum_withdrawals_by_month_for_the_report_time_period' => 'getSumWithdrawalsByMonthForTheReportTimePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('average_withdrawal_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('count_withdrawals_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('historic_count_of_withdrawal_transactions', $data ?? [], null);
        $this->setIfExists('historic_sum_of_withdrawals', $data ?? [], null);
        $this->setIfExists('maximum_withdrawal_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('minimum_withdrawal_by_month_for_the_report_time_period', $data ?? [], null);
        $this->setIfExists('sum_withdrawals_by_month_for_the_report_time_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['count_withdrawals_by_month_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'count_withdrawals_by_month_for_the_report_time_period' can't be null";
        }
        if ($this->container['historic_count_of_withdrawal_transactions'] === null) {
            $invalidProperties[] = "'historic_count_of_withdrawal_transactions' can't be null";
        }
        if ($this->container['maximum_withdrawal_by_month_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'maximum_withdrawal_by_month_for_the_report_time_period' can't be null";
        }
        if ($this->container['minimum_withdrawal_by_month_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'minimum_withdrawal_by_month_for_the_report_time_period' can't be null";
        }
        if ($this->container['sum_withdrawals_by_month_for_the_report_time_period'] === null) {
            $invalidProperties[] = "'sum_withdrawals_by_month_for_the_report_time_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_withdrawal_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null
     */
    public function getAverageWithdrawalByMonthForTheReportTimePeriod()
    {
        return $this->container['average_withdrawal_by_month_for_the_report_time_period'];
    }

    /**
     * Sets average_withdrawal_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[]|null $average_withdrawal_by_month_for_the_report_time_period Average value of withdrawals during periods in the report
     *
     * @return self
     */
    public function setAverageWithdrawalByMonthForTheReportTimePeriod($average_withdrawal_by_month_for_the_report_time_period)
    {
        if (is_null($average_withdrawal_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable average_withdrawal_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['average_withdrawal_by_month_for_the_report_time_period'] = $average_withdrawal_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets count_withdrawals_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndCount[]
     */
    public function getCountWithdrawalsByMonthForTheReportTimePeriod()
    {
        return $this->container['count_withdrawals_by_month_for_the_report_time_period'];
    }

    /**
     * Sets count_withdrawals_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndCount[] $count_withdrawals_by_month_for_the_report_time_period Count of all withdrawals during periods in the report
     *
     * @return self
     */
    public function setCountWithdrawalsByMonthForTheReportTimePeriod($count_withdrawals_by_month_for_the_report_time_period)
    {
        if (is_null($count_withdrawals_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable count_withdrawals_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['count_withdrawals_by_month_for_the_report_time_period'] = $count_withdrawals_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets historic_count_of_withdrawal_transactions
     *
     * @return int
     */
    public function getHistoricCountOfWithdrawalTransactions()
    {
        return $this->container['historic_count_of_withdrawal_transactions'];
    }

    /**
     * Sets historic_count_of_withdrawal_transactions
     *
     * @param int $historic_count_of_withdrawal_transactions Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)
     *
     * @return self
     */
    public function setHistoricCountOfWithdrawalTransactions($historic_count_of_withdrawal_transactions)
    {
        if (is_null($historic_count_of_withdrawal_transactions)) {
            throw new \InvalidArgumentException('non-nullable historic_count_of_withdrawal_transactions cannot be null');
        }
        $this->container['historic_count_of_withdrawal_transactions'] = $historic_count_of_withdrawal_transactions;

        return $this;
    }

    /**
     * Gets historic_sum_of_withdrawals
     *
     * @return float|null
     */
    public function getHistoricSumOfWithdrawals()
    {
        return $this->container['historic_sum_of_withdrawals'];
    }

    /**
     * Sets historic_sum_of_withdrawals
     *
     * @param float|null $historic_sum_of_withdrawals Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)
     *
     * @return self
     */
    public function setHistoricSumOfWithdrawals($historic_sum_of_withdrawals)
    {
        if (is_null($historic_sum_of_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable historic_sum_of_withdrawals cannot be null');
        }
        $this->container['historic_sum_of_withdrawals'] = $historic_sum_of_withdrawals;

        return $this;
    }

    /**
     * Gets maximum_withdrawal_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]
     */
    public function getMaximumWithdrawalByMonthForTheReportTimePeriod()
    {
        return $this->container['maximum_withdrawal_by_month_for_the_report_time_period'];
    }

    /**
     * Sets maximum_withdrawal_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[] $maximum_withdrawal_by_month_for_the_report_time_period Maximum withdrawal value for different periods in the report
     *
     * @return self
     */
    public function setMaximumWithdrawalByMonthForTheReportTimePeriod($maximum_withdrawal_by_month_for_the_report_time_period)
    {
        if (is_null($maximum_withdrawal_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable maximum_withdrawal_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['maximum_withdrawal_by_month_for_the_report_time_period'] = $maximum_withdrawal_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets minimum_withdrawal_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]
     */
    public function getMinimumWithdrawalByMonthForTheReportTimePeriod()
    {
        return $this->container['minimum_withdrawal_by_month_for_the_report_time_period'];
    }

    /**
     * Sets minimum_withdrawal_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[] $minimum_withdrawal_by_month_for_the_report_time_period Minimum withdrawal value for different periods in the report
     *
     * @return self
     */
    public function setMinimumWithdrawalByMonthForTheReportTimePeriod($minimum_withdrawal_by_month_for_the_report_time_period)
    {
        if (is_null($minimum_withdrawal_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable minimum_withdrawal_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['minimum_withdrawal_by_month_for_the_report_time_period'] = $minimum_withdrawal_by_month_for_the_report_time_period;

        return $this;
    }

    /**
     * Gets sum_withdrawals_by_month_for_the_report_time_period
     *
     * @return \OpenAPI\Client\Model\ObbDateRangeAndAmount[]
     */
    public function getSumWithdrawalsByMonthForTheReportTimePeriod()
    {
        return $this->container['sum_withdrawals_by_month_for_the_report_time_period'];
    }

    /**
     * Sets sum_withdrawals_by_month_for_the_report_time_period
     *
     * @param \OpenAPI\Client\Model\ObbDateRangeAndAmount[] $sum_withdrawals_by_month_for_the_report_time_period Sum of all withdrawals during periods in the report
     *
     * @return self
     */
    public function setSumWithdrawalsByMonthForTheReportTimePeriod($sum_withdrawals_by_month_for_the_report_time_period)
    {
        if (is_null($sum_withdrawals_by_month_for_the_report_time_period)) {
            throw new \InvalidArgumentException('non-nullable sum_withdrawals_by_month_for_the_report_time_period cannot be null');
        }
        $this->container['sum_withdrawals_by_month_for_the_report_time_period'] = $sum_withdrawals_by_month_for_the_report_time_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


