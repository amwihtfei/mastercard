<?php
/**
 * CertifiedInstitution
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CertifiedInstitution Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CertifiedInstitution implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CertifiedInstitution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'rssd' => 'int',
        'name' => 'string',
        'trans_agg' => 'bool',
        'ach' => 'bool',
        'state_agg' => 'bool',
        'voi' => 'bool',
        'voa' => 'bool',
        'aha' => 'bool',
        'avail_balance' => 'bool',
        'account_owner' => 'bool',
        'student_loan_data' => 'bool',
        'loan_payment_details' => 'bool',
        'child_institutions' => '\OpenAPI\Client\Model\ChildInstitution[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'rssd' => 'int64',
        'name' => null,
        'trans_agg' => null,
        'ach' => null,
        'state_agg' => null,
        'voi' => null,
        'voa' => null,
        'aha' => null,
        'avail_balance' => null,
        'account_owner' => null,
        'student_loan_data' => null,
        'loan_payment_details' => null,
        'child_institutions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'rssd' => false,
        'name' => false,
        'trans_agg' => false,
        'ach' => false,
        'state_agg' => false,
        'voi' => false,
        'voa' => false,
        'aha' => false,
        'avail_balance' => false,
        'account_owner' => false,
        'student_loan_data' => false,
        'loan_payment_details' => false,
        'child_institutions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rssd' => 'rssd',
        'name' => 'name',
        'trans_agg' => 'transAgg',
        'ach' => 'ach',
        'state_agg' => 'stateAgg',
        'voi' => 'voi',
        'voa' => 'voa',
        'aha' => 'aha',
        'avail_balance' => 'availBalance',
        'account_owner' => 'accountOwner',
        'student_loan_data' => 'studentLoanData',
        'loan_payment_details' => 'loanPaymentDetails',
        'child_institutions' => 'childInstitutions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rssd' => 'setRssd',
        'name' => 'setName',
        'trans_agg' => 'setTransAgg',
        'ach' => 'setAch',
        'state_agg' => 'setStateAgg',
        'voi' => 'setVoi',
        'voa' => 'setVoa',
        'aha' => 'setAha',
        'avail_balance' => 'setAvailBalance',
        'account_owner' => 'setAccountOwner',
        'student_loan_data' => 'setStudentLoanData',
        'loan_payment_details' => 'setLoanPaymentDetails',
        'child_institutions' => 'setChildInstitutions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rssd' => 'getRssd',
        'name' => 'getName',
        'trans_agg' => 'getTransAgg',
        'ach' => 'getAch',
        'state_agg' => 'getStateAgg',
        'voi' => 'getVoi',
        'voa' => 'getVoa',
        'aha' => 'getAha',
        'avail_balance' => 'getAvailBalance',
        'account_owner' => 'getAccountOwner',
        'student_loan_data' => 'getStudentLoanData',
        'loan_payment_details' => 'getLoanPaymentDetails',
        'child_institutions' => 'getChildInstitutions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('rssd', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('trans_agg', $data ?? [], null);
        $this->setIfExists('ach', $data ?? [], null);
        $this->setIfExists('state_agg', $data ?? [], null);
        $this->setIfExists('voi', $data ?? [], null);
        $this->setIfExists('voa', $data ?? [], null);
        $this->setIfExists('aha', $data ?? [], null);
        $this->setIfExists('avail_balance', $data ?? [], null);
        $this->setIfExists('account_owner', $data ?? [], null);
        $this->setIfExists('student_loan_data', $data ?? [], null);
        $this->setIfExists('loan_payment_details', $data ?? [], null);
        $this->setIfExists('child_institutions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['trans_agg'] === null) {
            $invalidProperties[] = "'trans_agg' can't be null";
        }
        if ($this->container['ach'] === null) {
            $invalidProperties[] = "'ach' can't be null";
        }
        if ($this->container['state_agg'] === null) {
            $invalidProperties[] = "'state_agg' can't be null";
        }
        if ($this->container['voi'] === null) {
            $invalidProperties[] = "'voi' can't be null";
        }
        if ($this->container['voa'] === null) {
            $invalidProperties[] = "'voa' can't be null";
        }
        if ($this->container['aha'] === null) {
            $invalidProperties[] = "'aha' can't be null";
        }
        if ($this->container['avail_balance'] === null) {
            $invalidProperties[] = "'avail_balance' can't be null";
        }
        if ($this->container['account_owner'] === null) {
            $invalidProperties[] = "'account_owner' can't be null";
        }
        if ($this->container['student_loan_data'] === null) {
            $invalidProperties[] = "'student_loan_data' can't be null";
        }
        if ($this->container['loan_payment_details'] === null) {
            $invalidProperties[] = "'loan_payment_details' can't be null";
        }
        if (!is_null($this->container['child_institutions']) && (count($this->container['child_institutions']) < 0)) {
            $invalidProperties[] = "invalid value for 'child_institutions', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of a financial institution, represented as a number
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rssd
     *
     * @return int|null
     */
    public function getRssd()
    {
        return $this->container['rssd'];
    }

    /**
     * Sets rssd
     *
     * @param int|null $rssd The RSSD ID is a unique identifier assigned to financial institutions by the Federal Reserve. While the length of the RSSD ID varies by institution, it cannot exceed 10 numerical digits.
     *
     * @return self
     */
    public function setRssd($rssd)
    {
        if (is_null($rssd)) {
            throw new \InvalidArgumentException('non-nullable rssd cannot be null');
        }
        $this->container['rssd'] = $rssd;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the institution
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trans_agg
     *
     * @return bool
     */
    public function getTransAgg()
    {
        return $this->container['trans_agg'];
    }

    /**
     * Sets trans_agg
     *
     * @param bool $trans_agg \"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product
     *
     * @return self
     */
    public function setTransAgg($trans_agg)
    {
        if (is_null($trans_agg)) {
            throw new \InvalidArgumentException('non-nullable trans_agg cannot be null');
        }
        $this->container['trans_agg'] = $trans_agg;

        return $this;
    }

    /**
     * Gets ach
     *
     * @return bool
     */
    public function getAch()
    {
        return $this->container['ach'];
    }

    /**
     * Sets ach
     *
     * @param bool $ach \"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product
     *
     * @return self
     */
    public function setAch($ach)
    {
        if (is_null($ach)) {
            throw new \InvalidArgumentException('non-nullable ach cannot be null');
        }
        $this->container['ach'] = $ach;

        return $this;
    }

    /**
     * Gets state_agg
     *
     * @return bool
     */
    public function getStateAgg()
    {
        return $this->container['state_agg'];
    }

    /**
     * Sets state_agg
     *
     * @param bool $state_agg \"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product
     *
     * @return self
     */
    public function setStateAgg($state_agg)
    {
        if (is_null($state_agg)) {
            throw new \InvalidArgumentException('non-nullable state_agg cannot be null');
        }
        $this->container['state_agg'] = $state_agg;

        return $this;
    }

    /**
     * Gets voi
     *
     * @return bool
     */
    public function getVoi()
    {
        return $this->container['voi'];
    }

    /**
     * Sets voi
     *
     * @param bool $voi \"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product
     *
     * @return self
     */
    public function setVoi($voi)
    {
        if (is_null($voi)) {
            throw new \InvalidArgumentException('non-nullable voi cannot be null');
        }
        $this->container['voi'] = $voi;

        return $this;
    }

    /**
     * Gets voa
     *
     * @return bool
     */
    public function getVoa()
    {
        return $this->container['voa'];
    }

    /**
     * Sets voa
     *
     * @param bool $voa \"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product
     *
     * @return self
     */
    public function setVoa($voa)
    {
        if (is_null($voa)) {
            throw new \InvalidArgumentException('non-nullable voa cannot be null');
        }
        $this->container['voa'] = $voa;

        return $this;
    }

    /**
     * Gets aha
     *
     * @return bool
     */
    public function getAha()
    {
        return $this->container['aha'];
    }

    /**
     * Sets aha
     *
     * @param bool $aha \"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product
     *
     * @return self
     */
    public function setAha($aha)
    {
        if (is_null($aha)) {
            throw new \InvalidArgumentException('non-nullable aha cannot be null');
        }
        $this->container['aha'] = $aha;

        return $this;
    }

    /**
     * Gets avail_balance
     *
     * @return bool
     */
    public function getAvailBalance()
    {
        return $this->container['avail_balance'];
    }

    /**
     * Sets avail_balance
     *
     * @param bool $avail_balance \"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product
     *
     * @return self
     */
    public function setAvailBalance($avail_balance)
    {
        if (is_null($avail_balance)) {
            throw new \InvalidArgumentException('non-nullable avail_balance cannot be null');
        }
        $this->container['avail_balance'] = $avail_balance;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return bool
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param bool $account_owner \"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product
     *
     * @return self
     */
    public function setAccountOwner($account_owner)
    {
        if (is_null($account_owner)) {
            throw new \InvalidArgumentException('non-nullable account_owner cannot be null');
        }
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets student_loan_data
     *
     * @return bool
     */
    public function getStudentLoanData()
    {
        return $this->container['student_loan_data'];
    }

    /**
     * Sets student_loan_data
     *
     * @param bool $student_loan_data \"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product
     *
     * @return self
     */
    public function setStudentLoanData($student_loan_data)
    {
        if (is_null($student_loan_data)) {
            throw new \InvalidArgumentException('non-nullable student_loan_data cannot be null');
        }
        $this->container['student_loan_data'] = $student_loan_data;

        return $this;
    }

    /**
     * Gets loan_payment_details
     *
     * @return bool
     */
    public function getLoanPaymentDetails()
    {
        return $this->container['loan_payment_details'];
    }

    /**
     * Sets loan_payment_details
     *
     * @param bool $loan_payment_details \"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product
     *
     * @return self
     */
    public function setLoanPaymentDetails($loan_payment_details)
    {
        if (is_null($loan_payment_details)) {
            throw new \InvalidArgumentException('non-nullable loan_payment_details cannot be null');
        }
        $this->container['loan_payment_details'] = $loan_payment_details;

        return $this;
    }

    /**
     * Gets child_institutions
     *
     * @return \OpenAPI\Client\Model\ChildInstitution[]|null
     */
    public function getChildInstitutions()
    {
        return $this->container['child_institutions'];
    }

    /**
     * Sets child_institutions
     *
     * @param \OpenAPI\Client\Model\ChildInstitution[]|null $child_institutions An array of child financial institutions
     *
     * @return self
     */
    public function setChildInstitutions($child_institutions)
    {
        if (is_null($child_institutions)) {
            throw new \InvalidArgumentException('non-nullable child_institutions cannot be null');
        }


        if ((count($child_institutions) < 0)) {
            throw new \InvalidArgumentException('invalid length for $child_institutions when calling CertifiedInstitution., number of items must be greater than or equal to 0.');
        }
        $this->container['child_institutions'] = $child_institutions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


