<?php
/**
 * VOETransactionsReportIncomeStream
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VOETransactionsReportIncomeStream Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VOETransactionsReportIncomeStream implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VOETransactionsReportIncomeStream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'status' => 'string',
        'estimate_inclusion' => 'string',
        'confidence' => 'int',
        'cadence' => '\OpenAPI\Client\Model\CadenceDetails',
        'days_since_last_transaction' => 'int',
        'next_expected_transaction_date' => 'int',
        'income_stream_months' => 'int',
        'transactions' => '\OpenAPI\Client\Model\ReportTransaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'status' => null,
        'estimate_inclusion' => null,
        'confidence' => 'int32',
        'cadence' => null,
        'days_since_last_transaction' => 'int32',
        'next_expected_transaction_date' => 'int64',
        'income_stream_months' => 'int32',
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'status' => false,
        'estimate_inclusion' => false,
        'confidence' => false,
        'cadence' => false,
        'days_since_last_transaction' => false,
        'next_expected_transaction_date' => false,
        'income_stream_months' => false,
        'transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'estimate_inclusion' => 'estimateInclusion',
        'confidence' => 'confidence',
        'cadence' => 'cadence',
        'days_since_last_transaction' => 'daysSinceLastTransaction',
        'next_expected_transaction_date' => 'nextExpectedTransactionDate',
        'income_stream_months' => 'incomeStreamMonths',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'status' => 'setStatus',
        'estimate_inclusion' => 'setEstimateInclusion',
        'confidence' => 'setConfidence',
        'cadence' => 'setCadence',
        'days_since_last_transaction' => 'setDaysSinceLastTransaction',
        'next_expected_transaction_date' => 'setNextExpectedTransactionDate',
        'income_stream_months' => 'setIncomeStreamMonths',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'status' => 'getStatus',
        'estimate_inclusion' => 'getEstimateInclusion',
        'confidence' => 'getConfidence',
        'cadence' => 'getCadence',
        'days_since_last_transaction' => 'getDaysSinceLastTransaction',
        'next_expected_transaction_date' => 'getNextExpectedTransactionDate',
        'income_stream_months' => 'getIncomeStreamMonths',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('estimate_inclusion', $data ?? [], null);
        $this->setIfExists('confidence', $data ?? [], null);
        $this->setIfExists('cadence', $data ?? [], null);
        $this->setIfExists('days_since_last_transaction', $data ?? [], null);
        $this->setIfExists('next_expected_transaction_date', $data ?? [], null);
        $this->setIfExists('income_stream_months', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['estimate_inclusion'] === null) {
            $invalidProperties[] = "'estimate_inclusion' can't be null";
        }
        if ($this->container['confidence'] === null) {
            $invalidProperties[] = "'confidence' can't be null";
        }
        if ($this->container['cadence'] === null) {
            $invalidProperties[] = "'cadence' can't be null";
        }
        if ($this->container['days_since_last_transaction'] === null) {
            $invalidProperties[] = "'days_since_last_transaction' can't be null";
        }
        if ($this->container['next_expected_transaction_date'] === null) {
            $invalidProperties[] = "'next_expected_transaction_date' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Income stream ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A human-readable name based on the `normalizedPayee` name of the transactions for this income stream
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Possible values: \"ACTIVE\", \"INACTIVE\"
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets estimate_inclusion
     *
     * @return string
     */
    public function getEstimateInclusion()
    {
        return $this->container['estimate_inclusion'];
    }

    /**
     * Sets estimate_inclusion
     *
     * @param string $estimate_inclusion Possible values: \"HIGH\", \"MODERATE\", \"LOW\", \"NO\"
     *
     * @return self
     */
    public function setEstimateInclusion($estimate_inclusion)
    {
        if (is_null($estimate_inclusion)) {
            throw new \InvalidArgumentException('non-nullable estimate_inclusion cannot be null');
        }
        $this->container['estimate_inclusion'] = $estimate_inclusion;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return int
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param int $confidence Level of confidence that the deposit stream represents income (example: 85%)
     *
     * @return self
     */
    public function setConfidence($confidence)
    {
        if (is_null($confidence)) {
            throw new \InvalidArgumentException('non-nullable confidence cannot be null');
        }
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets cadence
     *
     * @return \OpenAPI\Client\Model\CadenceDetails
     */
    public function getCadence()
    {
        return $this->container['cadence'];
    }

    /**
     * Sets cadence
     *
     * @param \OpenAPI\Client\Model\CadenceDetails $cadence cadence
     *
     * @return self
     */
    public function setCadence($cadence)
    {
        if (is_null($cadence)) {
            throw new \InvalidArgumentException('non-nullable cadence cannot be null');
        }
        $this->container['cadence'] = $cadence;

        return $this;
    }

    /**
     * Gets days_since_last_transaction
     *
     * @return int
     */
    public function getDaysSinceLastTransaction()
    {
        return $this->container['days_since_last_transaction'];
    }

    /**
     * Sets days_since_last_transaction
     *
     * @param int $days_since_last_transaction The number of days since the last credit transaction for the particular income stream
     *
     * @return self
     */
    public function setDaysSinceLastTransaction($days_since_last_transaction)
    {
        if (is_null($days_since_last_transaction)) {
            throw new \InvalidArgumentException('non-nullable days_since_last_transaction cannot be null');
        }
        $this->container['days_since_last_transaction'] = $days_since_last_transaction;

        return $this;
    }

    /**
     * Gets next_expected_transaction_date
     *
     * @return int
     */
    public function getNextExpectedTransactionDate()
    {
        return $this->container['next_expected_transaction_date'];
    }

    /**
     * Sets next_expected_transaction_date
     *
     * @param int $next_expected_transaction_date The next expected credit transaction date for the particular income stream, based on the cadence
     *
     * @return self
     */
    public function setNextExpectedTransactionDate($next_expected_transaction_date)
    {
        if (is_null($next_expected_transaction_date)) {
            throw new \InvalidArgumentException('non-nullable next_expected_transaction_date cannot be null');
        }
        $this->container['next_expected_transaction_date'] = $next_expected_transaction_date;

        return $this;
    }

    /**
     * Gets income_stream_months
     *
     * @return int|null
     */
    public function getIncomeStreamMonths()
    {
        return $this->container['income_stream_months'];
    }

    /**
     * Sets income_stream_months
     *
     * @param int|null $income_stream_months The number of months the income transactions are observed
     *
     * @return self
     */
    public function setIncomeStreamMonths($income_stream_months)
    {
        if (is_null($income_stream_months)) {
            throw new \InvalidArgumentException('non-nullable income_stream_months cannot be null');
        }
        $this->container['income_stream_months'] = $income_stream_months;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \OpenAPI\Client\Model\ReportTransaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \OpenAPI\Client\Model\ReportTransaction[] $transactions A list of transaction records
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


