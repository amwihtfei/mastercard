<?php
/**
 * PayrollVOIEIncomeRecord
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayrollVOIEIncomeRecord Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollVOIEIncomeRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayrollVOIEIncomeRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_frequency' => 'string',
        'pay_type' => 'string',
        'base_pay_rate' => 'float',
        'base_pay_rate_unit' => 'string',
        'oldest_pay_statement_available' => 'string',
        'annual_income' => '\OpenAPI\Client\Model\AnnualIncome[]',
        'monthly_income' => '\OpenAPI\Client\Model\MonthlyIncome',
        'direct_pay_statements' => '\OpenAPI\Client\Model\DirectPayStatements[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_frequency' => null,
        'pay_type' => null,
        'base_pay_rate' => null,
        'base_pay_rate_unit' => null,
        'oldest_pay_statement_available' => null,
        'annual_income' => null,
        'monthly_income' => null,
        'direct_pay_statements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_frequency' => false,
        'pay_type' => false,
        'base_pay_rate' => false,
        'base_pay_rate_unit' => false,
        'oldest_pay_statement_available' => false,
        'annual_income' => false,
        'monthly_income' => false,
        'direct_pay_statements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_frequency' => 'payFrequency',
        'pay_type' => 'payType',
        'base_pay_rate' => 'basePayRate',
        'base_pay_rate_unit' => 'basePayRateUnit',
        'oldest_pay_statement_available' => 'oldestPayStatementAvailable',
        'annual_income' => 'annualIncome',
        'monthly_income' => 'monthlyIncome',
        'direct_pay_statements' => 'directPayStatements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_frequency' => 'setPayFrequency',
        'pay_type' => 'setPayType',
        'base_pay_rate' => 'setBasePayRate',
        'base_pay_rate_unit' => 'setBasePayRateUnit',
        'oldest_pay_statement_available' => 'setOldestPayStatementAvailable',
        'annual_income' => 'setAnnualIncome',
        'monthly_income' => 'setMonthlyIncome',
        'direct_pay_statements' => 'setDirectPayStatements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_frequency' => 'getPayFrequency',
        'pay_type' => 'getPayType',
        'base_pay_rate' => 'getBasePayRate',
        'base_pay_rate_unit' => 'getBasePayRateUnit',
        'oldest_pay_statement_available' => 'getOldestPayStatementAvailable',
        'annual_income' => 'getAnnualIncome',
        'monthly_income' => 'getMonthlyIncome',
        'direct_pay_statements' => 'getDirectPayStatements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pay_frequency', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('base_pay_rate', $data ?? [], null);
        $this->setIfExists('base_pay_rate_unit', $data ?? [], null);
        $this->setIfExists('oldest_pay_statement_available', $data ?? [], null);
        $this->setIfExists('annual_income', $data ?? [], null);
        $this->setIfExists('monthly_income', $data ?? [], null);
        $this->setIfExists('direct_pay_statements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_frequency
     *
     * @return string|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param string|null $pay_frequency The current pay frequency or how often a regular pay check is:  * `Daily`   * `Weekly`   * `Bi-Weekly`   * `Semi-Monthly`   * `Monthly`   * `Quarterly`   * `Semi-Annual`   * `Annual`   * `Every 2.6 wks`   * `Every 4 wks`   * `Every 5.2 wks`   * `Other`
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        if (is_null($pay_frequency)) {
            throw new \InvalidArgumentException('non-nullable pay_frequency cannot be null');
        }
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type The current pay type:  * `Salary`  * `Hourly`  * `Daily`
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            throw new \InvalidArgumentException('non-nullable pay_type cannot be null');
        }
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets base_pay_rate
     *
     * @return float|null
     */
    public function getBasePayRate()
    {
        return $this->container['base_pay_rate'];
    }

    /**
     * Sets base_pay_rate
     *
     * @param float|null $base_pay_rate The current base or regular pay rate. Please use in conjunction with the `basePayRateUnit` field.
     *
     * @return self
     */
    public function setBasePayRate($base_pay_rate)
    {
        if (is_null($base_pay_rate)) {
            throw new \InvalidArgumentException('non-nullable base_pay_rate cannot be null');
        }
        $this->container['base_pay_rate'] = $base_pay_rate;

        return $this;
    }

    /**
     * Gets base_pay_rate_unit
     *
     * @return string|null
     */
    public function getBasePayRateUnit()
    {
        return $this->container['base_pay_rate_unit'];
    }

    /**
     * Sets base_pay_rate_unit
     *
     * @param string|null $base_pay_rate_unit Unit for the base pay rate:  * `Hourly`  * `Daily`  * `Weekly`  * `Bi-Weekly`  * `Semi-Monthly`  * `Monthly`  * `Quarterly`  * `Semi-Annual`  * `Annual`  * `Every 2.6 wks`  * `Every 5.2 wks`  * `Other`
     *
     * @return self
     */
    public function setBasePayRateUnit($base_pay_rate_unit)
    {
        if (is_null($base_pay_rate_unit)) {
            throw new \InvalidArgumentException('non-nullable base_pay_rate_unit cannot be null');
        }
        $this->container['base_pay_rate_unit'] = $base_pay_rate_unit;

        return $this;
    }

    /**
     * Gets oldest_pay_statement_available
     *
     * @return string|null
     */
    public function getOldestPayStatementAvailable()
    {
        return $this->container['oldest_pay_statement_available'];
    }

    /**
     * Sets oldest_pay_statement_available
     *
     * @param string|null $oldest_pay_statement_available The date of the oldest direct pay statement available from the payroll source, as measured by the oldest `payDate` from all the pay statements delivered.
     *
     * @return self
     */
    public function setOldestPayStatementAvailable($oldest_pay_statement_available)
    {
        if (is_null($oldest_pay_statement_available)) {
            throw new \InvalidArgumentException('non-nullable oldest_pay_statement_available cannot be null');
        }
        $this->container['oldest_pay_statement_available'] = $oldest_pay_statement_available;

        return $this;
    }

    /**
     * Gets annual_income
     *
     * @return \OpenAPI\Client\Model\AnnualIncome[]|null
     */
    public function getAnnualIncome()
    {
        return $this->container['annual_income'];
    }

    /**
     * Sets annual_income
     *
     * @param \OpenAPI\Client\Model\AnnualIncome[]|null $annual_income The annual pay for the current year, through prior year 2 (as available)  This is a mandatory field only for VOIE-payroll report type.
     *
     * @return self
     */
    public function setAnnualIncome($annual_income)
    {
        if (is_null($annual_income)) {
            throw new \InvalidArgumentException('non-nullable annual_income cannot be null');
        }
        $this->container['annual_income'] = $annual_income;

        return $this;
    }

    /**
     * Gets monthly_income
     *
     * @return \OpenAPI\Client\Model\MonthlyIncome|null
     */
    public function getMonthlyIncome()
    {
        return $this->container['monthly_income'];
    }

    /**
     * Sets monthly_income
     *
     * @param \OpenAPI\Client\Model\MonthlyIncome|null $monthly_income monthly_income
     *
     * @return self
     */
    public function setMonthlyIncome($monthly_income)
    {
        if (is_null($monthly_income)) {
            throw new \InvalidArgumentException('non-nullable monthly_income cannot be null');
        }
        $this->container['monthly_income'] = $monthly_income;

        return $this;
    }

    /**
     * Gets direct_pay_statements
     *
     * @return \OpenAPI\Client\Model\DirectPayStatements[]|null
     */
    public function getDirectPayStatements()
    {
        return $this->container['direct_pay_statements'];
    }

    /**
     * Sets direct_pay_statements
     *
     * @param \OpenAPI\Client\Model\DirectPayStatements[]|null $direct_pay_statements An array of payment histories for each available paycheck
     *
     * @return self
     */
    public function setDirectPayStatements($direct_pay_statements)
    {
        if (is_null($direct_pay_statements)) {
            throw new \InvalidArgumentException('non-nullable direct_pay_statements cannot be null');
        }
        $this->container['direct_pay_statements'] = $direct_pay_statements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


