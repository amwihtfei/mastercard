<?php
/**
 * DirectPayStatements
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DirectPayStatements Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectPayStatements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectPayStatements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payroll_pay_history_id' => 'string',
        'last_pay_period_indicator' => 'bool',
        'main_pay_statement_fields' => '\OpenAPI\Client\Model\MainPayStatementFields',
        'earnings' => '\OpenAPI\Client\Model\Earnings[]',
        'deductions' => '\OpenAPI\Client\Model\Deductions[]',
        'direct_deposits' => '\OpenAPI\Client\Model\DirectDeposits[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payroll_pay_history_id' => null,
        'last_pay_period_indicator' => null,
        'main_pay_statement_fields' => null,
        'earnings' => null,
        'deductions' => null,
        'direct_deposits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payroll_pay_history_id' => false,
        'last_pay_period_indicator' => false,
        'main_pay_statement_fields' => false,
        'earnings' => false,
        'deductions' => false,
        'direct_deposits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payroll_pay_history_id' => 'payrollPayHistoryId',
        'last_pay_period_indicator' => 'lastPayPeriodIndicator',
        'main_pay_statement_fields' => 'mainPayStatementFields',
        'earnings' => 'earnings',
        'deductions' => 'deductions',
        'direct_deposits' => 'directDeposits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payroll_pay_history_id' => 'setPayrollPayHistoryId',
        'last_pay_period_indicator' => 'setLastPayPeriodIndicator',
        'main_pay_statement_fields' => 'setMainPayStatementFields',
        'earnings' => 'setEarnings',
        'deductions' => 'setDeductions',
        'direct_deposits' => 'setDirectDeposits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payroll_pay_history_id' => 'getPayrollPayHistoryId',
        'last_pay_period_indicator' => 'getLastPayPeriodIndicator',
        'main_pay_statement_fields' => 'getMainPayStatementFields',
        'earnings' => 'getEarnings',
        'deductions' => 'getDeductions',
        'direct_deposits' => 'getDirectDeposits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payroll_pay_history_id', $data ?? [], null);
        $this->setIfExists('last_pay_period_indicator', $data ?? [], null);
        $this->setIfExists('main_pay_statement_fields', $data ?? [], null);
        $this->setIfExists('earnings', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('direct_deposits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payroll_pay_history_id'] === null) {
            $invalidProperties[] = "'payroll_pay_history_id' can't be null";
        }
        if ($this->container['last_pay_period_indicator'] === null) {
            $invalidProperties[] = "'last_pay_period_indicator' can't be null";
        }
        if ($this->container['main_pay_statement_fields'] === null) {
            $invalidProperties[] = "'main_pay_statement_fields' can't be null";
        }
        if ($this->container['earnings'] === null) {
            $invalidProperties[] = "'earnings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payroll_pay_history_id
     *
     * @return string
     */
    public function getPayrollPayHistoryId()
    {
        return $this->container['payroll_pay_history_id'];
    }

    /**
     * Sets payroll_pay_history_id
     *
     * @param string $payroll_pay_history_id An ID for the income and employment details for the given pay period
     *
     * @return self
     */
    public function setPayrollPayHistoryId($payroll_pay_history_id)
    {
        if (is_null($payroll_pay_history_id)) {
            throw new \InvalidArgumentException('non-nullable payroll_pay_history_id cannot be null');
        }
        $this->container['payroll_pay_history_id'] = $payroll_pay_history_id;

        return $this;
    }

    /**
     * Gets last_pay_period_indicator
     *
     * @return bool
     */
    public function getLastPayPeriodIndicator()
    {
        return $this->container['last_pay_period_indicator'];
    }

    /**
     * Sets last_pay_period_indicator
     *
     * @param bool $last_pay_period_indicator Most recent available pay check
     *
     * @return self
     */
    public function setLastPayPeriodIndicator($last_pay_period_indicator)
    {
        if (is_null($last_pay_period_indicator)) {
            throw new \InvalidArgumentException('non-nullable last_pay_period_indicator cannot be null');
        }
        $this->container['last_pay_period_indicator'] = $last_pay_period_indicator;

        return $this;
    }

    /**
     * Gets main_pay_statement_fields
     *
     * @return \OpenAPI\Client\Model\MainPayStatementFields
     */
    public function getMainPayStatementFields()
    {
        return $this->container['main_pay_statement_fields'];
    }

    /**
     * Sets main_pay_statement_fields
     *
     * @param \OpenAPI\Client\Model\MainPayStatementFields $main_pay_statement_fields main_pay_statement_fields
     *
     * @return self
     */
    public function setMainPayStatementFields($main_pay_statement_fields)
    {
        if (is_null($main_pay_statement_fields)) {
            throw new \InvalidArgumentException('non-nullable main_pay_statement_fields cannot be null');
        }
        $this->container['main_pay_statement_fields'] = $main_pay_statement_fields;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return \OpenAPI\Client\Model\Earnings[]
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param \OpenAPI\Client\Model\Earnings[] $earnings Categorization of pay, for the pay period
     *
     * @return self
     */
    public function setEarnings($earnings)
    {
        if (is_null($earnings)) {
            throw new \InvalidArgumentException('non-nullable earnings cannot be null');
        }
        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return \OpenAPI\Client\Model\Deductions[]|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param \OpenAPI\Client\Model\Deductions[]|null $deductions Deductions from the pay check
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets direct_deposits
     *
     * @return \OpenAPI\Client\Model\DirectDeposits[]|null
     */
    public function getDirectDeposits()
    {
        return $this->container['direct_deposits'];
    }

    /**
     * Sets direct_deposits
     *
     * @param \OpenAPI\Client\Model\DirectDeposits[]|null $direct_deposits Direct deposit information for the paycheck
     *
     * @return self
     */
    public function setDirectDeposits($direct_deposits)
    {
        if (is_null($direct_deposits)) {
            throw new \InvalidArgumentException('non-nullable direct_deposits cannot be null');
        }
        $this->container['direct_deposits'] = $direct_deposits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


