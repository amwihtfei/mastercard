<?php
/**
 * PaymentHistoryCustomerMonthlySummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentHistoryCustomerMonthlySummary Class Doc Comment
 *
 * @category Class
 * @description Customer-level summary of transactions in a month
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentHistoryCustomerMonthlySummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentHistoryCustomerMonthlySummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'month' => 'string',
        'average_balance' => 'float',
        'closing_balance' => 'float',
        'opening_balance' => 'float',
        'total_deposits' => 'float',
        'total_withdrawals' => 'float',
        'non_sufficient_funds' => 'float',
        'insurance_payments' => 'float',
        'tax_payments' => 'float',
        'recurring_expense_payments' => 'float',
        'missed_recurring_expense_payments' => 'float',
        'recurring_loan_payments' => 'float',
        'missed_recurring_loan_payments' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'month' => null,
        'average_balance' => null,
        'closing_balance' => null,
        'opening_balance' => null,
        'total_deposits' => null,
        'total_withdrawals' => null,
        'non_sufficient_funds' => null,
        'insurance_payments' => null,
        'tax_payments' => null,
        'recurring_expense_payments' => null,
        'missed_recurring_expense_payments' => null,
        'recurring_loan_payments' => null,
        'missed_recurring_loan_payments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'month' => false,
        'average_balance' => false,
        'closing_balance' => false,
        'opening_balance' => false,
        'total_deposits' => false,
        'total_withdrawals' => false,
        'non_sufficient_funds' => false,
        'insurance_payments' => false,
        'tax_payments' => false,
        'recurring_expense_payments' => false,
        'missed_recurring_expense_payments' => false,
        'recurring_loan_payments' => false,
        'missed_recurring_loan_payments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'month' => 'month',
        'average_balance' => 'averageBalance',
        'closing_balance' => 'closingBalance',
        'opening_balance' => 'openingBalance',
        'total_deposits' => 'totalDeposits',
        'total_withdrawals' => 'totalWithdrawals',
        'non_sufficient_funds' => 'nonSufficientFunds',
        'insurance_payments' => 'insurancePayments',
        'tax_payments' => 'taxPayments',
        'recurring_expense_payments' => 'recurringExpensePayments',
        'missed_recurring_expense_payments' => 'missedRecurringExpensePayments',
        'recurring_loan_payments' => 'recurringLoanPayments',
        'missed_recurring_loan_payments' => 'missedRecurringLoanPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'month' => 'setMonth',
        'average_balance' => 'setAverageBalance',
        'closing_balance' => 'setClosingBalance',
        'opening_balance' => 'setOpeningBalance',
        'total_deposits' => 'setTotalDeposits',
        'total_withdrawals' => 'setTotalWithdrawals',
        'non_sufficient_funds' => 'setNonSufficientFunds',
        'insurance_payments' => 'setInsurancePayments',
        'tax_payments' => 'setTaxPayments',
        'recurring_expense_payments' => 'setRecurringExpensePayments',
        'missed_recurring_expense_payments' => 'setMissedRecurringExpensePayments',
        'recurring_loan_payments' => 'setRecurringLoanPayments',
        'missed_recurring_loan_payments' => 'setMissedRecurringLoanPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'month' => 'getMonth',
        'average_balance' => 'getAverageBalance',
        'closing_balance' => 'getClosingBalance',
        'opening_balance' => 'getOpeningBalance',
        'total_deposits' => 'getTotalDeposits',
        'total_withdrawals' => 'getTotalWithdrawals',
        'non_sufficient_funds' => 'getNonSufficientFunds',
        'insurance_payments' => 'getInsurancePayments',
        'tax_payments' => 'getTaxPayments',
        'recurring_expense_payments' => 'getRecurringExpensePayments',
        'missed_recurring_expense_payments' => 'getMissedRecurringExpensePayments',
        'recurring_loan_payments' => 'getRecurringLoanPayments',
        'missed_recurring_loan_payments' => 'getMissedRecurringLoanPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('month', $data ?? [], null);
        $this->setIfExists('average_balance', $data ?? [], null);
        $this->setIfExists('closing_balance', $data ?? [], null);
        $this->setIfExists('opening_balance', $data ?? [], null);
        $this->setIfExists('total_deposits', $data ?? [], null);
        $this->setIfExists('total_withdrawals', $data ?? [], null);
        $this->setIfExists('non_sufficient_funds', $data ?? [], null);
        $this->setIfExists('insurance_payments', $data ?? [], null);
        $this->setIfExists('tax_payments', $data ?? [], null);
        $this->setIfExists('recurring_expense_payments', $data ?? [], null);
        $this->setIfExists('missed_recurring_expense_payments', $data ?? [], null);
        $this->setIfExists('recurring_loan_payments', $data ?? [], null);
        $this->setIfExists('missed_recurring_loan_payments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['month'] === null) {
            $invalidProperties[] = "'month' can't be null";
        }
        if ($this->container['average_balance'] === null) {
            $invalidProperties[] = "'average_balance' can't be null";
        }
        if ($this->container['closing_balance'] === null) {
            $invalidProperties[] = "'closing_balance' can't be null";
        }
        if ($this->container['opening_balance'] === null) {
            $invalidProperties[] = "'opening_balance' can't be null";
        }
        if ($this->container['total_deposits'] === null) {
            $invalidProperties[] = "'total_deposits' can't be null";
        }
        if ($this->container['total_withdrawals'] === null) {
            $invalidProperties[] = "'total_withdrawals' can't be null";
        }
        if ($this->container['non_sufficient_funds'] === null) {
            $invalidProperties[] = "'non_sufficient_funds' can't be null";
        }
        if ($this->container['insurance_payments'] === null) {
            $invalidProperties[] = "'insurance_payments' can't be null";
        }
        if ($this->container['tax_payments'] === null) {
            $invalidProperties[] = "'tax_payments' can't be null";
        }
        if ($this->container['recurring_expense_payments'] === null) {
            $invalidProperties[] = "'recurring_expense_payments' can't be null";
        }
        if ($this->container['missed_recurring_expense_payments'] === null) {
            $invalidProperties[] = "'missed_recurring_expense_payments' can't be null";
        }
        if ($this->container['recurring_loan_payments'] === null) {
            $invalidProperties[] = "'recurring_loan_payments' can't be null";
        }
        if ($this->container['missed_recurring_loan_payments'] === null) {
            $invalidProperties[] = "'missed_recurring_loan_payments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets month
     *
     * @return string
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param string $month Date of the month
     *
     * @return self
     */
    public function setMonth($month)
    {
        if (is_null($month)) {
            throw new \InvalidArgumentException('non-nullable month cannot be null');
        }
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets average_balance
     *
     * @return float
     */
    public function getAverageBalance()
    {
        return $this->container['average_balance'];
    }

    /**
     * Sets average_balance
     *
     * @param float $average_balance Average balance for the month
     *
     * @return self
     */
    public function setAverageBalance($average_balance)
    {
        if (is_null($average_balance)) {
            throw new \InvalidArgumentException('non-nullable average_balance cannot be null');
        }
        $this->container['average_balance'] = $average_balance;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return float
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param float $closing_balance Closing balance for the month
     *
     * @return self
     */
    public function setClosingBalance($closing_balance)
    {
        if (is_null($closing_balance)) {
            throw new \InvalidArgumentException('non-nullable closing_balance cannot be null');
        }
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets opening_balance
     *
     * @return float
     */
    public function getOpeningBalance()
    {
        return $this->container['opening_balance'];
    }

    /**
     * Sets opening_balance
     *
     * @param float $opening_balance Opening balance for the month
     *
     * @return self
     */
    public function setOpeningBalance($opening_balance)
    {
        if (is_null($opening_balance)) {
            throw new \InvalidArgumentException('non-nullable opening_balance cannot be null');
        }
        $this->container['opening_balance'] = $opening_balance;

        return $this;
    }

    /**
     * Gets total_deposits
     *
     * @return float
     */
    public function getTotalDeposits()
    {
        return $this->container['total_deposits'];
    }

    /**
     * Sets total_deposits
     *
     * @param float $total_deposits Total of deposit transactions for the month
     *
     * @return self
     */
    public function setTotalDeposits($total_deposits)
    {
        if (is_null($total_deposits)) {
            throw new \InvalidArgumentException('non-nullable total_deposits cannot be null');
        }
        $this->container['total_deposits'] = $total_deposits;

        return $this;
    }

    /**
     * Gets total_withdrawals
     *
     * @return float
     */
    public function getTotalWithdrawals()
    {
        return $this->container['total_withdrawals'];
    }

    /**
     * Sets total_withdrawals
     *
     * @param float $total_withdrawals Total of withdrawal transactions for the month
     *
     * @return self
     */
    public function setTotalWithdrawals($total_withdrawals)
    {
        if (is_null($total_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable total_withdrawals cannot be null');
        }
        $this->container['total_withdrawals'] = $total_withdrawals;

        return $this;
    }

    /**
     * Gets non_sufficient_funds
     *
     * @return float
     */
    public function getNonSufficientFunds()
    {
        return $this->container['non_sufficient_funds'];
    }

    /**
     * Sets non_sufficient_funds
     *
     * @param float $non_sufficient_funds Total of NSF transactions for the month
     *
     * @return self
     */
    public function setNonSufficientFunds($non_sufficient_funds)
    {
        if (is_null($non_sufficient_funds)) {
            throw new \InvalidArgumentException('non-nullable non_sufficient_funds cannot be null');
        }
        $this->container['non_sufficient_funds'] = $non_sufficient_funds;

        return $this;
    }

    /**
     * Gets insurance_payments
     *
     * @return float
     */
    public function getInsurancePayments()
    {
        return $this->container['insurance_payments'];
    }

    /**
     * Sets insurance_payments
     *
     * @param float $insurance_payments Total of insurance payment transactions for the month
     *
     * @return self
     */
    public function setInsurancePayments($insurance_payments)
    {
        if (is_null($insurance_payments)) {
            throw new \InvalidArgumentException('non-nullable insurance_payments cannot be null');
        }
        $this->container['insurance_payments'] = $insurance_payments;

        return $this;
    }

    /**
     * Gets tax_payments
     *
     * @return float
     */
    public function getTaxPayments()
    {
        return $this->container['tax_payments'];
    }

    /**
     * Sets tax_payments
     *
     * @param float $tax_payments Total of tax payment transactions for the month
     *
     * @return self
     */
    public function setTaxPayments($tax_payments)
    {
        if (is_null($tax_payments)) {
            throw new \InvalidArgumentException('non-nullable tax_payments cannot be null');
        }
        $this->container['tax_payments'] = $tax_payments;

        return $this;
    }

    /**
     * Gets recurring_expense_payments
     *
     * @return float
     */
    public function getRecurringExpensePayments()
    {
        return $this->container['recurring_expense_payments'];
    }

    /**
     * Sets recurring_expense_payments
     *
     * @param float $recurring_expense_payments Total of recurring expense payment transactions for the month
     *
     * @return self
     */
    public function setRecurringExpensePayments($recurring_expense_payments)
    {
        if (is_null($recurring_expense_payments)) {
            throw new \InvalidArgumentException('non-nullable recurring_expense_payments cannot be null');
        }
        $this->container['recurring_expense_payments'] = $recurring_expense_payments;

        return $this;
    }

    /**
     * Gets missed_recurring_expense_payments
     *
     * @return float
     */
    public function getMissedRecurringExpensePayments()
    {
        return $this->container['missed_recurring_expense_payments'];
    }

    /**
     * Sets missed_recurring_expense_payments
     *
     * @param float $missed_recurring_expense_payments Total of missed recurring expense payment transactions for the month
     *
     * @return self
     */
    public function setMissedRecurringExpensePayments($missed_recurring_expense_payments)
    {
        if (is_null($missed_recurring_expense_payments)) {
            throw new \InvalidArgumentException('non-nullable missed_recurring_expense_payments cannot be null');
        }
        $this->container['missed_recurring_expense_payments'] = $missed_recurring_expense_payments;

        return $this;
    }

    /**
     * Gets recurring_loan_payments
     *
     * @return float
     */
    public function getRecurringLoanPayments()
    {
        return $this->container['recurring_loan_payments'];
    }

    /**
     * Sets recurring_loan_payments
     *
     * @param float $recurring_loan_payments Total of recurring loan payment transactions for the month
     *
     * @return self
     */
    public function setRecurringLoanPayments($recurring_loan_payments)
    {
        if (is_null($recurring_loan_payments)) {
            throw new \InvalidArgumentException('non-nullable recurring_loan_payments cannot be null');
        }
        $this->container['recurring_loan_payments'] = $recurring_loan_payments;

        return $this;
    }

    /**
     * Gets missed_recurring_loan_payments
     *
     * @return float
     */
    public function getMissedRecurringLoanPayments()
    {
        return $this->container['missed_recurring_loan_payments'];
    }

    /**
     * Sets missed_recurring_loan_payments
     *
     * @param float $missed_recurring_loan_payments Total of missed recurring loan payment transactions for the month
     *
     * @return self
     */
    public function setMissedRecurringLoanPayments($missed_recurring_loan_payments)
    {
        if (is_null($missed_recurring_loan_payments)) {
            throw new \InvalidArgumentException('non-nullable missed_recurring_loan_payments cannot be null');
        }
        $this->container['missed_recurring_loan_payments'] = $missed_recurring_loan_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


