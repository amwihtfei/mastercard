<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Open Banking
 *
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.16.1
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'amount' => 'float',
        'account_id' => 'int',
        'customer_id' => 'int',
        'status' => 'string',
        'description' => 'string',
        'memo' => 'string',
        'type' => 'string',
        'transaction_date' => 'int',
        'posted_date' => 'int',
        'created_date' => 'int',
        'first_effective_date' => 'int',
        'effective_date' => 'int',
        'option_expire_date' => 'int',
        'check_num' => 'string',
        'escrow_amount' => 'float',
        'fee_amount' => 'float',
        'suspense_amount' => 'float',
        'interest_amount' => 'float',
        'principal_amount' => 'float',
        'option_strike_price' => 'float',
        'unit_quantity' => 'int',
        'unit_price' => 'float',
        'categorization' => '\OpenAPI\Client\Model\Categorization',
        'running_balance_amount' => 'float',
        'subaccount_security_type' => 'string',
        'commission_amount' => 'int',
        'ticker' => 'string',
        'investment_transaction_type' => 'string',
        'taxes_amount' => 'int',
        'currency_symbol' => 'string',
        'income_type' => 'string',
        'split_denominator' => 'float',
        'split_numerator' => 'float',
        'shares_per_contract' => 'float',
        'sub_account_fund' => 'string',
        'security_id' => 'string',
        'security_id_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'amount' => null,
        'account_id' => 'int64',
        'customer_id' => 'int64',
        'status' => null,
        'description' => null,
        'memo' => null,
        'type' => null,
        'transaction_date' => 'int64',
        'posted_date' => 'int64',
        'created_date' => 'int64',
        'first_effective_date' => 'int64',
        'effective_date' => 'int64',
        'option_expire_date' => 'int64',
        'check_num' => null,
        'escrow_amount' => null,
        'fee_amount' => null,
        'suspense_amount' => null,
        'interest_amount' => null,
        'principal_amount' => null,
        'option_strike_price' => null,
        'unit_quantity' => 'int32',
        'unit_price' => null,
        'categorization' => null,
        'running_balance_amount' => null,
        'subaccount_security_type' => null,
        'commission_amount' => 'int32',
        'ticker' => null,
        'investment_transaction_type' => null,
        'taxes_amount' => 'int32',
        'currency_symbol' => null,
        'income_type' => null,
        'split_denominator' => null,
        'split_numerator' => null,
        'shares_per_contract' => null,
        'sub_account_fund' => null,
        'security_id' => null,
        'security_id_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'amount' => false,
        'account_id' => false,
        'customer_id' => false,
        'status' => false,
        'description' => false,
        'memo' => false,
        'type' => false,
        'transaction_date' => false,
        'posted_date' => false,
        'created_date' => false,
        'first_effective_date' => false,
        'effective_date' => false,
        'option_expire_date' => false,
        'check_num' => false,
        'escrow_amount' => false,
        'fee_amount' => false,
        'suspense_amount' => false,
        'interest_amount' => false,
        'principal_amount' => false,
        'option_strike_price' => false,
        'unit_quantity' => false,
        'unit_price' => false,
        'categorization' => false,
        'running_balance_amount' => false,
        'subaccount_security_type' => false,
        'commission_amount' => false,
        'ticker' => false,
        'investment_transaction_type' => false,
        'taxes_amount' => false,
        'currency_symbol' => false,
        'income_type' => false,
        'split_denominator' => false,
        'split_numerator' => false,
        'shares_per_contract' => false,
        'sub_account_fund' => false,
        'security_id' => false,
        'security_id_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'amount' => 'amount',
        'account_id' => 'accountId',
        'customer_id' => 'customerId',
        'status' => 'status',
        'description' => 'description',
        'memo' => 'memo',
        'type' => 'type',
        'transaction_date' => 'transactionDate',
        'posted_date' => 'postedDate',
        'created_date' => 'createdDate',
        'first_effective_date' => 'firstEffectiveDate',
        'effective_date' => 'effectiveDate',
        'option_expire_date' => 'optionExpireDate',
        'check_num' => 'checkNum',
        'escrow_amount' => 'escrowAmount',
        'fee_amount' => 'feeAmount',
        'suspense_amount' => 'suspenseAmount',
        'interest_amount' => 'interestAmount',
        'principal_amount' => 'principalAmount',
        'option_strike_price' => 'optionStrikePrice',
        'unit_quantity' => 'unitQuantity',
        'unit_price' => 'unitPrice',
        'categorization' => 'categorization',
        'running_balance_amount' => 'runningBalanceAmount',
        'subaccount_security_type' => 'subaccountSecurityType',
        'commission_amount' => 'commissionAmount',
        'ticker' => 'ticker',
        'investment_transaction_type' => 'investmentTransactionType',
        'taxes_amount' => 'taxesAmount',
        'currency_symbol' => 'currencySymbol',
        'income_type' => 'incomeType',
        'split_denominator' => 'splitDenominator',
        'split_numerator' => 'splitNumerator',
        'shares_per_contract' => 'sharesPerContract',
        'sub_account_fund' => 'subAccountFund',
        'security_id' => 'securityId',
        'security_id_type' => 'securityIdType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'amount' => 'setAmount',
        'account_id' => 'setAccountId',
        'customer_id' => 'setCustomerId',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'memo' => 'setMemo',
        'type' => 'setType',
        'transaction_date' => 'setTransactionDate',
        'posted_date' => 'setPostedDate',
        'created_date' => 'setCreatedDate',
        'first_effective_date' => 'setFirstEffectiveDate',
        'effective_date' => 'setEffectiveDate',
        'option_expire_date' => 'setOptionExpireDate',
        'check_num' => 'setCheckNum',
        'escrow_amount' => 'setEscrowAmount',
        'fee_amount' => 'setFeeAmount',
        'suspense_amount' => 'setSuspenseAmount',
        'interest_amount' => 'setInterestAmount',
        'principal_amount' => 'setPrincipalAmount',
        'option_strike_price' => 'setOptionStrikePrice',
        'unit_quantity' => 'setUnitQuantity',
        'unit_price' => 'setUnitPrice',
        'categorization' => 'setCategorization',
        'running_balance_amount' => 'setRunningBalanceAmount',
        'subaccount_security_type' => 'setSubaccountSecurityType',
        'commission_amount' => 'setCommissionAmount',
        'ticker' => 'setTicker',
        'investment_transaction_type' => 'setInvestmentTransactionType',
        'taxes_amount' => 'setTaxesAmount',
        'currency_symbol' => 'setCurrencySymbol',
        'income_type' => 'setIncomeType',
        'split_denominator' => 'setSplitDenominator',
        'split_numerator' => 'setSplitNumerator',
        'shares_per_contract' => 'setSharesPerContract',
        'sub_account_fund' => 'setSubAccountFund',
        'security_id' => 'setSecurityId',
        'security_id_type' => 'setSecurityIdType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'amount' => 'getAmount',
        'account_id' => 'getAccountId',
        'customer_id' => 'getCustomerId',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'memo' => 'getMemo',
        'type' => 'getType',
        'transaction_date' => 'getTransactionDate',
        'posted_date' => 'getPostedDate',
        'created_date' => 'getCreatedDate',
        'first_effective_date' => 'getFirstEffectiveDate',
        'effective_date' => 'getEffectiveDate',
        'option_expire_date' => 'getOptionExpireDate',
        'check_num' => 'getCheckNum',
        'escrow_amount' => 'getEscrowAmount',
        'fee_amount' => 'getFeeAmount',
        'suspense_amount' => 'getSuspenseAmount',
        'interest_amount' => 'getInterestAmount',
        'principal_amount' => 'getPrincipalAmount',
        'option_strike_price' => 'getOptionStrikePrice',
        'unit_quantity' => 'getUnitQuantity',
        'unit_price' => 'getUnitPrice',
        'categorization' => 'getCategorization',
        'running_balance_amount' => 'getRunningBalanceAmount',
        'subaccount_security_type' => 'getSubaccountSecurityType',
        'commission_amount' => 'getCommissionAmount',
        'ticker' => 'getTicker',
        'investment_transaction_type' => 'getInvestmentTransactionType',
        'taxes_amount' => 'getTaxesAmount',
        'currency_symbol' => 'getCurrencySymbol',
        'income_type' => 'getIncomeType',
        'split_denominator' => 'getSplitDenominator',
        'split_numerator' => 'getSplitNumerator',
        'shares_per_contract' => 'getSharesPerContract',
        'sub_account_fund' => 'getSubAccountFund',
        'security_id' => 'getSecurityId',
        'security_id_type' => 'getSecurityIdType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('posted_date', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('first_effective_date', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('option_expire_date', $data ?? [], null);
        $this->setIfExists('check_num', $data ?? [], null);
        $this->setIfExists('escrow_amount', $data ?? [], null);
        $this->setIfExists('fee_amount', $data ?? [], null);
        $this->setIfExists('suspense_amount', $data ?? [], null);
        $this->setIfExists('interest_amount', $data ?? [], null);
        $this->setIfExists('principal_amount', $data ?? [], null);
        $this->setIfExists('option_strike_price', $data ?? [], null);
        $this->setIfExists('unit_quantity', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('categorization', $data ?? [], null);
        $this->setIfExists('running_balance_amount', $data ?? [], null);
        $this->setIfExists('subaccount_security_type', $data ?? [], null);
        $this->setIfExists('commission_amount', $data ?? [], null);
        $this->setIfExists('ticker', $data ?? [], null);
        $this->setIfExists('investment_transaction_type', $data ?? [], null);
        $this->setIfExists('taxes_amount', $data ?? [], null);
        $this->setIfExists('currency_symbol', $data ?? [], null);
        $this->setIfExists('income_type', $data ?? [], null);
        $this->setIfExists('split_denominator', $data ?? [], null);
        $this->setIfExists('split_numerator', $data ?? [], null);
        $this->setIfExists('shares_per_contract', $data ?? [], null);
        $this->setIfExists('sub_account_fund', $data ?? [], null);
        $this->setIfExists('security_id', $data ?? [], null);
        $this->setIfExists('security_id_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id A transaction ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id An account ID represented as a number
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id A customer ID represented as a number. See Add Customer API for how to create a customer ID.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\"
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return int|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param int|null $transaction_date A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return int|null
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param int|null $posted_date A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setPostedDate($posted_date)
    {
        if (is_null($posted_date)) {
            throw new \InvalidArgumentException('non-nullable posted_date cannot be null');
        }
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int $created_date A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets first_effective_date
     *
     * @return int|null
     */
    public function getFirstEffectiveDate()
    {
        return $this->container['first_effective_date'];
    }

    /**
     * Sets first_effective_date
     *
     * @param int|null $first_effective_date A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setFirstEffectiveDate($first_effective_date)
    {
        if (is_null($first_effective_date)) {
            throw new \InvalidArgumentException('non-nullable first_effective_date cannot be null');
        }
        $this->container['first_effective_date'] = $first_effective_date;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return int|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param int|null $effective_date A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets option_expire_date
     *
     * @return int|null
     */
    public function getOptionExpireDate()
    {
        return $this->container['option_expire_date'];
    }

    /**
     * Sets option_expire_date
     *
     * @param int|null $option_expire_date A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
     *
     * @return self
     */
    public function setOptionExpireDate($option_expire_date)
    {
        if (is_null($option_expire_date)) {
            throw new \InvalidArgumentException('non-nullable option_expire_date cannot be null');
        }
        $this->container['option_expire_date'] = $option_expire_date;

        return $this;
    }

    /**
     * Gets check_num
     *
     * @return string|null
     */
    public function getCheckNum()
    {
        return $this->container['check_num'];
    }

    /**
     * Sets check_num
     *
     * @param string|null $check_num The check number of the transaction
     *
     * @return self
     */
    public function setCheckNum($check_num)
    {
        if (is_null($check_num)) {
            throw new \InvalidArgumentException('non-nullable check_num cannot be null');
        }
        $this->container['check_num'] = $check_num;

        return $this;
    }

    /**
     * Gets escrow_amount
     *
     * @return float|null
     */
    public function getEscrowAmount()
    {
        return $this->container['escrow_amount'];
    }

    /**
     * Sets escrow_amount
     *
     * @param float|null $escrow_amount The portion of the transaction allocated to escrow
     *
     * @return self
     */
    public function setEscrowAmount($escrow_amount)
    {
        if (is_null($escrow_amount)) {
            throw new \InvalidArgumentException('non-nullable escrow_amount cannot be null');
        }
        $this->container['escrow_amount'] = $escrow_amount;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return float|null
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param float|null $fee_amount The portion of the overall transaction amount applied to fees
     *
     * @return self
     */
    public function setFeeAmount($fee_amount)
    {
        if (is_null($fee_amount)) {
            throw new \InvalidArgumentException('non-nullable fee_amount cannot be null');
        }
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets suspense_amount
     *
     * @return float|null
     */
    public function getSuspenseAmount()
    {
        return $this->container['suspense_amount'];
    }

    /**
     * Sets suspense_amount
     *
     * @param float|null $suspense_amount Temporarily hold funds if you overpay or underpay your monthly payment
     *
     * @return self
     */
    public function setSuspenseAmount($suspense_amount)
    {
        if (is_null($suspense_amount)) {
            throw new \InvalidArgumentException('non-nullable suspense_amount cannot be null');
        }
        $this->container['suspense_amount'] = $suspense_amount;

        return $this;
    }

    /**
     * Gets interest_amount
     *
     * @return float|null
     */
    public function getInterestAmount()
    {
        return $this->container['interest_amount'];
    }

    /**
     * Sets interest_amount
     *
     * @param float|null $interest_amount The portion of the transaction allocated to interest
     *
     * @return self
     */
    public function setInterestAmount($interest_amount)
    {
        if (is_null($interest_amount)) {
            throw new \InvalidArgumentException('non-nullable interest_amount cannot be null');
        }
        $this->container['interest_amount'] = $interest_amount;

        return $this;
    }

    /**
     * Gets principal_amount
     *
     * @return float|null
     */
    public function getPrincipalAmount()
    {
        return $this->container['principal_amount'];
    }

    /**
     * Sets principal_amount
     *
     * @param float|null $principal_amount The portion of the transaction allocated to principal
     *
     * @return self
     */
    public function setPrincipalAmount($principal_amount)
    {
        if (is_null($principal_amount)) {
            throw new \InvalidArgumentException('non-nullable principal_amount cannot be null');
        }
        $this->container['principal_amount'] = $principal_amount;

        return $this;
    }

    /**
     * Gets option_strike_price
     *
     * @return float|null
     */
    public function getOptionStrikePrice()
    {
        return $this->container['option_strike_price'];
    }

    /**
     * Sets option_strike_price
     *
     * @param float|null $option_strike_price The strike price of the option contract
     *
     * @return self
     */
    public function setOptionStrikePrice($option_strike_price)
    {
        if (is_null($option_strike_price)) {
            throw new \InvalidArgumentException('non-nullable option_strike_price cannot be null');
        }
        $this->container['option_strike_price'] = $option_strike_price;

        return $this;
    }

    /**
     * Gets unit_quantity
     *
     * @return int|null
     */
    public function getUnitQuantity()
    {
        return $this->container['unit_quantity'];
    }

    /**
     * Sets unit_quantity
     *
     * @param int|null $unit_quantity The number of units (individual shares) in the transaction
     *
     * @return self
     */
    public function setUnitQuantity($unit_quantity)
    {
        if (is_null($unit_quantity)) {
            throw new \InvalidArgumentException('non-nullable unit_quantity cannot be null');
        }
        $this->container['unit_quantity'] = $unit_quantity;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price Share price for the investment unit: stocks, mutual funds, ETFs
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets categorization
     *
     * @return \OpenAPI\Client\Model\Categorization|null
     */
    public function getCategorization()
    {
        return $this->container['categorization'];
    }

    /**
     * Sets categorization
     *
     * @param \OpenAPI\Client\Model\Categorization|null $categorization categorization
     *
     * @return self
     */
    public function setCategorization($categorization)
    {
        if (is_null($categorization)) {
            throw new \InvalidArgumentException('non-nullable categorization cannot be null');
        }
        $this->container['categorization'] = $categorization;

        return $this;
    }

    /**
     * Gets running_balance_amount
     *
     * @return float|null
     */
    public function getRunningBalanceAmount()
    {
        return $this->container['running_balance_amount'];
    }

    /**
     * Sets running_balance_amount
     *
     * @param float|null $running_balance_amount The ending balance after the transaction was posted
     *
     * @return self
     */
    public function setRunningBalanceAmount($running_balance_amount)
    {
        if (is_null($running_balance_amount)) {
            throw new \InvalidArgumentException('non-nullable running_balance_amount cannot be null');
        }
        $this->container['running_balance_amount'] = $running_balance_amount;

        return $this;
    }

    /**
     * Gets subaccount_security_type
     *
     * @return string|null
     */
    public function getSubaccountSecurityType()
    {
        return $this->container['subaccount_security_type'];
    }

    /**
     * Sets subaccount_security_type
     *
     * @param string|null $subaccount_security_type The type of sub account the funds came from
     *
     * @return self
     */
    public function setSubaccountSecurityType($subaccount_security_type)
    {
        if (is_null($subaccount_security_type)) {
            throw new \InvalidArgumentException('non-nullable subaccount_security_type cannot be null');
        }
        $this->container['subaccount_security_type'] = $subaccount_security_type;

        return $this;
    }

    /**
     * Gets commission_amount
     *
     * @return int|null
     */
    public function getCommissionAmount()
    {
        return $this->container['commission_amount'];
    }

    /**
     * Sets commission_amount
     *
     * @param int|null $commission_amount Transaction commission
     *
     * @return self
     */
    public function setCommissionAmount($commission_amount)
    {
        if (is_null($commission_amount)) {
            throw new \InvalidArgumentException('non-nullable commission_amount cannot be null');
        }
        $this->container['commission_amount'] = $commission_amount;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string|null
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string|null $ticker Ticker symbol for the investment related to the transaction
     *
     * @return self
     */
    public function setTicker($ticker)
    {
        if (is_null($ticker)) {
            throw new \InvalidArgumentException('non-nullable ticker cannot be null');
        }
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets investment_transaction_type
     *
     * @return string|null
     */
    public function getInvestmentTransactionType()
    {
        return $this->container['investment_transaction_type'];
    }

    /**
     * Sets investment_transaction_type
     *
     * @param string|null $investment_transaction_type Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values:  * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendReinvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\"
     *
     * @return self
     */
    public function setInvestmentTransactionType($investment_transaction_type)
    {
        if (is_null($investment_transaction_type)) {
            throw new \InvalidArgumentException('non-nullable investment_transaction_type cannot be null');
        }
        $this->container['investment_transaction_type'] = $investment_transaction_type;

        return $this;
    }

    /**
     * Gets taxes_amount
     *
     * @return int|null
     */
    public function getTaxesAmount()
    {
        return $this->container['taxes_amount'];
    }

    /**
     * Sets taxes_amount
     *
     * @param int|null $taxes_amount Taxes applicable to the investment trade
     *
     * @return self
     */
    public function setTaxesAmount($taxes_amount)
    {
        if (is_null($taxes_amount)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount cannot be null');
        }
        $this->container['taxes_amount'] = $taxes_amount;

        return $this;
    }

    /**
     * Gets currency_symbol
     *
     * @return string|null
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     *
     * @param string|null $currency_symbol If the foreign amount value is present then this is the currency code of that foreign amount
     *
     * @return self
     */
    public function setCurrencySymbol($currency_symbol)
    {
        if (is_null($currency_symbol)) {
            throw new \InvalidArgumentException('non-nullable currency_symbol cannot be null');
        }
        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets income_type
     *
     * @return string|null
     */
    public function getIncomeType()
    {
        return $this->container['income_type'];
    }

    /**
     * Sets income_type
     *
     * @param string|null $income_type Capital gains applied in short, long, or miscellaneous terms for tax purposes
     *
     * @return self
     */
    public function setIncomeType($income_type)
    {
        if (is_null($income_type)) {
            throw new \InvalidArgumentException('non-nullable income_type cannot be null');
        }
        $this->container['income_type'] = $income_type;

        return $this;
    }

    /**
     * Gets split_denominator
     *
     * @return float|null
     */
    public function getSplitDenominator()
    {
        return $this->container['split_denominator'];
    }

    /**
     * Sets split_denominator
     *
     * @param float|null $split_denominator Denominator of the stock split for the transaction
     *
     * @return self
     */
    public function setSplitDenominator($split_denominator)
    {
        if (is_null($split_denominator)) {
            throw new \InvalidArgumentException('non-nullable split_denominator cannot be null');
        }
        $this->container['split_denominator'] = $split_denominator;

        return $this;
    }

    /**
     * Gets split_numerator
     *
     * @return float|null
     */
    public function getSplitNumerator()
    {
        return $this->container['split_numerator'];
    }

    /**
     * Sets split_numerator
     *
     * @param float|null $split_numerator Numerator of the stock split for the transaction
     *
     * @return self
     */
    public function setSplitNumerator($split_numerator)
    {
        if (is_null($split_numerator)) {
            throw new \InvalidArgumentException('non-nullable split_numerator cannot be null');
        }
        $this->container['split_numerator'] = $split_numerator;

        return $this;
    }

    /**
     * Gets shares_per_contract
     *
     * @return float|null
     */
    public function getSharesPerContract()
    {
        return $this->container['shares_per_contract'];
    }

    /**
     * Sets shares_per_contract
     *
     * @param float|null $shares_per_contract Shares per contract of the underlying stock option
     *
     * @return self
     */
    public function setSharesPerContract($shares_per_contract)
    {
        if (is_null($shares_per_contract)) {
            throw new \InvalidArgumentException('non-nullable shares_per_contract cannot be null');
        }
        $this->container['shares_per_contract'] = $shares_per_contract;

        return $this;
    }

    /**
     * Gets sub_account_fund
     *
     * @return string|null
     */
    public function getSubAccountFund()
    {
        return $this->container['sub_account_fund'];
    }

    /**
     * Sets sub_account_fund
     *
     * @param string|null $sub_account_fund The sub account where the funds came from
     *
     * @return self
     */
    public function setSubAccountFund($sub_account_fund)
    {
        if (is_null($sub_account_fund)) {
            throw new \InvalidArgumentException('non-nullable sub_account_fund cannot be null');
        }
        $this->container['sub_account_fund'] = $sub_account_fund;

        return $this;
    }

    /**
     * Gets security_id
     *
     * @return string|null
     */
    public function getSecurityId()
    {
        return $this->container['security_id'];
    }

    /**
     * Sets security_id
     *
     * @param string|null $security_id The security ID of the transaction
     *
     * @return self
     */
    public function setSecurityId($security_id)
    {
        if (is_null($security_id)) {
            throw new \InvalidArgumentException('non-nullable security_id cannot be null');
        }
        $this->container['security_id'] = $security_id;

        return $this;
    }

    /**
     * Gets security_id_type
     *
     * @return string|null
     */
    public function getSecurityIdType()
    {
        return $this->container['security_id_type'];
    }

    /**
     * Sets security_id_type
     *
     * @param string|null $security_id_type The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"
     *
     * @return self
     */
    public function setSecurityIdType($security_id_type)
    {
        if (is_null($security_id_type)) {
            throw new \InvalidArgumentException('non-nullable security_id_type cannot be null');
        }
        $this->container['security_id_type'] = $security_id_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


